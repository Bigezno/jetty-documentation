<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="using-deployment-manager"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Using the Deployment Manager</title>

  <para>For Jetty to serve content (static or dynamic), you need to create a
  <link
  xl:href="@JDURL@/org/eclipse/jetty/server/handler/ContextHandler.html">ContextHandler</link>
  and add it to Jetty in the appropriate place. A pluggable DeploymentManager
  exists in Jetty 7 and later to make this process easier. The Jetty
  distribution contains example DeploymentManager configurations to deploy WAR
  files found in a directory to Jetty, and to deploy Jetty
  <filename>context.xml</filename> files into Jetty as well.</para>

  <para>The DeploymentManager is the heart of the typical webapp deployment
  mechanism; it operates as a combination of an Application LifeCycle Graph,
  Application Providers that find and provide Applications into the
  Application LifeCycle Graph, and a set of bindings in the graph that control
  the deployment process.</para>

  <mediaobject>
    <info>
      <othercredit>
        <orgname>jetty deployment manager roles</orgname>
      </othercredit>
    </info>

    <imageobject>
      <imagedata align="center"
                 fileref="images/Jetty_DeployManager_DeploymentManager_Roles.png"
                 format="PNG" width="6in"/>
    </imageobject>
  </mediaobject>

  <section xml:id="udm-application-providers">
    <title>Application Providers</title>

    <para>Before Jetty deploys an application, an <link
    xl:href="@JDURL@/org/eclipse/jetty/deploy/AppProvider.html">
    AppProvider</link> identifies the App and then provides it to the
    DeploymentManager. The main AppProvider with the Jetty distribution is the
    <link
    xl:href="@JDURL@/org/eclipse/jetty/deploy/providers/WebAppProvider.html">WebAppProvider.</link></para>
  </section>

  <section xml:id="udm-application-lifecycle-graph">
    <title>Application LifeCycle Graph</title>

    <para>The core feature of the DeploymentManager is the <link
    xl:href="@JDURL@/org/eclipse/jetty/deploy/AppLifeCycle.html">Application
    LifeCycle Graph</link>.</para>

    <mediaobject>
      <info>
        <othercredit>
          <orgname>jetty deployment manager life cycle</orgname>
        </othercredit>
      </info>

      <imageobject>
        <imagedata align="center"
                   fileref="images/Jetty_DeployManager_AppLifeCycle-1.png"
                   format="PNG" width="6in"/>
      </imageobject>
    </mediaobject>

    <para>The nodes and edges of this graph are pre-defined in Jetty along the
    most common actions and states found. These nodes and edges are not
    hardcoded; you can adjust and add to them depending on your needs (for
    example, any complex requirements for added workflow, approvals, staging,
    distribution, coordinated deploys for a cluster or cloud, etc.).</para>

    <para>New applications enter this graph at the Undeployed node, and the
    <link
    xl:href="@JDURL@/org/eclipse/jetty/deploy/DeploymentManager.html#requestAppGoal(org.eclipse.jetty.deploy.App">
    <code>java.lang.String DeploymentManager.requestAppGoal(App,String)</code>
    </link> method pushes them through the graph.</para>
  </section>

  <section xml:id="udm-lifecycle-bindings">
    <title>LifeCycle Bindings</title>

    <para>A set of default <link
    xl:href="@JDURL@/org/eclipse/jetty/deploy/AppLifeCycle.Binding.html">
    <code>AppLifeCycle.Bindings</code> </link> defines standard behavior, and
    handles deploying, starting, stopping, and undeploying applications. If
    you choose, you can write your own <code>AppLifeCycle.Bindings</code> and
    assign them to anywhere on the Application LifeCycle graph.</para>

    <para>Examples of new <code>AppLifeCycle.Binding</code> implementations
    that you can write include:</para>

    <itemizedlist>
      <listitem>
        <para>Validating the incoming application.</para>
      </listitem>

      <listitem>
        <para>Preventing the deployment of known forbidden
        applications.</para>
      </listitem>

      <listitem>
        <para>Submitting the installation to an application auditing service
        in a corporate environment.</para>
      </listitem>

      <listitem>
        <para>Distributing the application to other nodes in the cluster or
        cloud.</para>
      </listitem>

      <listitem>
        <para>Emailing owner/admin of change of state of the
        application.</para>
      </listitem>
    </itemizedlist>

    <para>There are four default bindings:</para>

    <itemizedlist>
      <listitem>
        <para><link
        xl:href="@JDURL@/org/eclipse/jetty/deploy/bindings/StandardDeployer.html">
        StandardDeployer</link> –Deploys the ContextHandler into Jetty in the
        appropriate place.</para>
      </listitem>

      <listitem>
        <para><link
        xl:href="@JDURL@/org/eclipse/jetty/deploy/bindings/StandardStarter.html">
        StandardStarter</link> –Sets the ContextHandler to started and start
        accepting incoming requests.</para>
      </listitem>

      <listitem>
        <para><link
        xl:href="@JDURL@/org/eclipse/jetty/deploy/bindings/StandardStopper.html">
        StandardStopper</link> –Stops the ContextHandler and stops accepting
        incoming requests.</para>
      </listitem>

      <listitem>
        <para><link
        xl:href="@JDURL@/org/eclipse/jetty/deploy/bindings/StandardUndeployer.html">
        StandardUndeployer</link> –Removes the ContextHandler from
        Jetty.</para>
      </listitem>
    </itemizedlist>

    <mediaobject>
      <info>
        <othercredit>
          <orgname>jetty deployment manager life cycle</orgname>
        </othercredit>
      </info>

      <imageobject>
        <imagedata align="center"
                   fileref="images/Jetty_DeployManager_DefaultAppLifeCycleBindings.png"
                   format="PNG" width="6in"/>
      </imageobject>
    </mediaobject>

    <para>A fifth, non-standard binding, called <link
    xl:href="@JDURL@/org/eclipse/jetty/deploy/bindings/DebugBinding.html">Debug
    Binding</link>, is also available for debugging reasons; It logs the
    various transitions through the Application LifeCycle.</para>
  </section>
</section>
