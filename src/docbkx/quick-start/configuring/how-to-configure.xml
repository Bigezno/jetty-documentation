<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0" xml:id="quickstart-config-how"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/1999/xhtml"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>How to Configure Jetty</title>

  <para>To understand Jetty configuration, you need to understand the "How"
  and the "What". This section covers how to configure Jetty in terms of what
  mechanisms exist to perform configuration. The <link
  linkend="quickstart-config-what">next section</link> gives an overview of
  the action components and fields that you can configure with these
  mechanisms.</para>

  <section>
    <title>Jetty POJO Configuration</title>

    <para>The core components of Jetty are simply Plain Old Java Objects
    (<link
    xl:href="http://en.wikipedia.org/wiki/Plain_Old_Java_Object">POJOs</link>);
    the process of configuring Jetty is mostly the process of instantiating,
    assembling and setting fields on the Jetty POJOs. You can achieve this
    either by:</para>

    <itemizedlist>
      <listitem>
        <para>Writing Java code to directly instantiate and assemble Jetty
        objects. This is referred to as <xref
        linkend="embedding-jetty"/>.</para>
      </listitem>

      <listitem>
        <para>Using Jetty XML configuration, which is an <link
        xl:href="http://en.wikipedia.org/wiki/Inversion_of_Control">Inversion
        of Control (IoC)</link> framework, to instantiate and assemble Jetty
        objects as XML objects. The <filename>etc/jetty.xml</filename> file is
        the main Jetty XML configuration file, but there are many other
        <filename>etc/jetty-</filename><emphasis>feature</emphasis><filename>.xml</filename>
        files included in the jetty distribution.</para>
      </listitem>

      <listitem>
        <para>Using a third party <link
        xl:href="http://en.wikipedia.org/wiki/Inversion_of_Control">
        IoC</link> framework like <link
        xl:href="http://en.wikipedia.org/wiki/Spring_Framework">Spring</link>,
        to instantiate and assemble Jetty objects as Spring beans.</para>
      </listitem>
    </itemizedlist>

    <para>Because the main Jetty configuration is done by IoC, the <link
    xl:href="@JDURL@/">Jetty API documentation</link> is the ultimate
    configuration reference.</para>
  </section>

  <section>
    <title>Jetty Start Configuration Files</title>

    <para>The Jetty distribution uses the following configuration files to
    instantiate, inject and start server via the start.jar mechanism</para>

    <variablelist>
      <varlistentry>
        <term><filename>ini files</filename></term>

        <listitem>
          <para>The Jetty Start mechanism uses the command line, the
          <code>$JETTY_BASE/start.ini</code> and/or
          <code>$JETTY_BASE/start.d/*.ini</code> files to create an effective
          command line of arguments. Arguments may be:</para>

          <itemizedlist>
            <listitem>
              <para>XML files in Jetty IoC (or spring) XML format</para>
            </listitem>

            <listitem>
              <para>Module activations in the form --module=name</para>
            </listitem>

            <listitem>
              <para>Property in the form of name=value, used to parameterize
              Jetty IoC XML</para>
            </listitem>

            <listitem>
              <para>A standard <link
              xl:href="http://en.wikipedia.org/wiki/Java_properties">Java
              property file</link> containing additional start
              properties</para>
            </listitem>

            <listitem>
              <para>Other start.jar options (see java -jar start.jar
              --help)</para>
            </listitem>

            <listitem>
              <para>Some JVM options</para>
            </listitem>
          </itemizedlist>

          <para>It is the ini files are located in the jetty base (if
          different from jetty home) that are typically edited to change the
          configuration (Eg change ports)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>mod files</term>

        <listitem>
          <para>The <code>$JETTY_HOME/modules/*.mod</code> files contain the
          definition of modules that can be activated by --module=name. Each
          mod file defines:</para>

          <itemizedlist>
            <listitem>
              <para>Module dependencies for ordering and activation</para>
            </listitem>

            <listitem>
              <para>The libraries needed by the module to be added to the
              classpath</para>
            </listitem>

            <listitem>
              <para>The XML files needed by the module to be added to the
              effective command line</para>
            </listitem>

            <listitem>
              <para>Files needed by the activated module</para>
            </listitem>

            <listitem>
              <para>A template ini file to be used when activating with the
              --add-to-start=name option</para>
            </listitem>
          </itemizedlist>

          <para>Typically module files are rarely edited and only for
          significant structural changes. The *.mod files are normally located
          <code>$JETTY_HOME/modules/</code>, but extra or edited modules may
          be added to <code>$JETTY_BASE/module</code>. If module changes are
          required, it is best practise to copy the particular *.mod file from
          <code>$JETTY_HOME/modules/</code> to
          <code>$JETTY_BASE/modules/</code> before being modified.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>XML files</term>

        <listitem>
          <para>XML files in <link linkend="jetty-xml-syntax">Jetty IoC XML
          format</link> or spring IoC format are listed either on the command
          line, in ini files or are added to the effective command line by a
          module definition. The XML files instantiate and inject the actual
          Java objects that comprise the server, connectors and contexts.
          Because Jetty IoC XML files use properties, most common
          configuration tasks can be accomplished without editing these XML
          files and can instead be achieved by editing the properti in the
          corresponding ini files.</para>

          <para>The XML files are normally located
          <code>$JETTY_HOME/etc/</code>, but extra or edited XML files may be
          added to <code>$JETTY_BASE/etc/</code>. If XML configuration changes
          are required, it is best practise to copy the XML file from
          <code>$JETTY_HOME/etc/</code> to <code>$JETTY_BASE/etc/</code>
          before being modified.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Other Configuration Files</title>

    <para>In addition to the start configuration files described above, the
    configuration of the server can use the following file:</para>

    <variablelist>
      <varlistentry>
        <term>Context XML files</term>

        <listitem>
          <para>Any XML files in <link linkend="jetty-xml-syntax">Jetty IoC
          XML format</link> or spring IoC format that is discovered in the
          webapps directory are used by the deploy module to instantiate and
          inject HttpContext instances to create a specific context. These may
          be standard web applications or bespoke contexts created from
          special purpose handlers.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><filename>web.xml</filename></term>

        <listitem>
          <para>The <link
          xl:href="http://en.wikipedia.org/wiki/Servlet">Servlet</link>
          Specification defines the <link
          xl:href="http://en.wikipedia.org/wiki/Web.xml">
          <filename>web.xml</filename> </link> deployment descriptor that
          defines and configures the filters, servlets and resources a <link
          xl:href="http://en.wikipedia.org/wiki/Web_application">web
          application</link> uses. The Jetty WebAppContext component uses this
          XML format to:</para>

          <itemizedlist>
            <listitem>
              <para>Set up the default configuration of a web application
              context.</para>
            </listitem>

            <listitem>
              <para>Interpret the application-specific configuration supplied
              with a web application in the <filename>
              WEB-INF/web.xml</filename> file.</para>
            </listitem>

            <listitem>
              <para>Interpret descriptor fragments included in the
              <filename>META-INF</filename> directory of Jar files within
              <filename>WEB-INF/lib.</filename></para>
            </listitem>
          </itemizedlist>

          <para>Normally the web.xml file for a web application is found in
          the WEB-INF/web.xml location within the war file/directory or as
          web.xml fragments with jar files found in WEB-INF/lib. Jetty also
          supports multiple web.xml files so that a default descriptor may be
          applied before WEB-INF/web.xml (typically set to etc/webdefault.xml
          by the deploy module) and an override descriptor may be applied
          after WEB-INF/web.xml (typically set by a context XML file see
          test.xml)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Property Files</term>

        <listitem>
          <para>Standard <link
          xl:href="http://en.wikipedia.org/wiki/Java_properties">Java property
          files</link> are also used for Jetty configuration in several
          ways:</para>

          <itemizedlist>
            <listitem>
              <para>To parameterize Jetty IoC XML via the use of the Property
              element.</para>
            </listitem>

            <listitem>
              <para>To configure the default logging mechanism (StdErrLog).
              You can also plug in other logging frameworks, and also use
              property files (for example, log4j).</para>
            </listitem>

            <listitem>
              <para>As a simple database for login usernames and
              credentials.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Jetty IoC XML format</title>

    <para>To understand the <link linkend="jetty-xml-syntax">Jetty IoC XML
    format</link>, consider the following example of an embedded Jetty server
    instantiated and configured in java:</para>

    <programlisting language="rjava"><![CDATA[     ]]><filename>
      @GITURL@/examples/embedded/src/main/java/org/eclipse/jetty/embedded/ExampleServer.java</filename><![CDATA[
    ]]></programlisting>

    <para><link linkend="jetty-xml-syntax">Jetty IoC XML format</link> allows
    you to instantiate and configure the exact same server in XML without
    writing any java code:</para>

    <programlisting language="rxml"><![CDATA[      ]]><filename>
      @GITURL@/examples/embedded/src/main/resources/exampleserver.xml</filename><![CDATA[
    ]]></programlisting>

    <para>In practise, most commonly used Jetty features have XML files that
    are included in the standard distribution in the <filename>etc</filename>
    directory. Thus configuring Jetty is often a matter of just editing
    existing XML files and altering the property values injected into
    them.</para>
  </section>
</section>
