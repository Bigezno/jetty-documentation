<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0" xml:id="quickstart-config-how"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/1999/xhtml"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>How to Configure Jetty</title>

  <para>To understand Jetty configuration, you need to understand the "How"
  and the "What". This section covers how to configure Jetty in terms of what
  mechanisms exist to perform configuration. The <link
  linkend="quickstart-config-what">next section</link> gives an overview of
  the action components and fields that you can configure with these
  mechanisms.</para>

  <section>
    <title>Jetty XML POJO Configuration</title>

    <para>The main components of Jetty are simply Plain Old Java Objects
    (<link
    xl:href="http://en.wikipedia.org/wiki/Plain_Old_Java_Object">POJOs</link>);
    the process of configuring Jetty is mostly the process of instantiating,
    assembling and setting fields on the Jetty POJOs. You can achieve this
    either by:</para>

    <itemizedlist>
      <listitem>
        <para>Writing Java code to directly instantiate and assemble Jetty
        objects. This is referred to as <xref
        linkend="embedding-jetty"/>.</para>
      </listitem>

      <listitem>
        <para>Using Jetty XML configuration, which is an <link
        xl:href="http://en.wikipedia.org/wiki/Inversion_of_Control">Inversion
        of Control (IoC)</link> framework, to instantiate and assemble Jetty
        objects as XML objects. The <filename>etc/jetty.xml</filename> file is
        the main Jetty XML configuration file, but there are many other
        <filename>etc/jetty-</filename><emphasis>feature</emphasis><filename>.xml</filename>
        files included in the jetty distribution.</para>
      </listitem>

      <listitem>
        <para>Using a third party <link
        xl:href="http://en.wikipedia.org/wiki/Inversion_of_Control">
        IoC</link> framework like <link
        xl:href="http://en.wikipedia.org/wiki/Spring_Framework">Spring</link>,
        to instantiate and assemble Jetty objects as Spring beans.</para>
      </listitem>
    </itemizedlist>

    <para>Because the main Jetty configuration is done by IoC, the <link
    xl:href="@JDURL@/">Jetty API documentation</link> is the ultimate
    configuration reference.</para>
  </section>

  <section>
    <title>Other Configuration Files</title>

    <para>Some Jetty Components do have configuration files that are not
    IoC.</para>

    <variablelist>
      <varlistentry>
        <term><filename>ini files</filename></term>

        <listitem>
          <para>The Jetty Start mechanism uses an <filename>ini</filename>
          files to hold arguments that are treated as if they were appended to
          the command line used to start jetty. By default the file
          <code>start.ini</code> is used as the main ini file, which is the
          normal jetty distribution contains a single active line enabling the
          <code>start.d/</code> directory of modular ini files. The ini files
          within start.d may be enabled and disabled by renaming or using the
          --enable and --disable options of start.jar</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><filename>web.xml</filename></term>

        <listitem>
          <para>The <link
          xl:href="http://en.wikipedia.org/wiki/Servlet">Servlet</link>
          Specification defines the <link
          xl:href="http://en.wikipedia.org/wiki/Web.xml">
          <filename>web.xml</filename> </link> deployment descriptor that
          defines and configures the filters, servlets and resources a <link
          xl:href="http://en.wikipedia.org/wiki/Web_application">web
          application</link> uses. The Jetty WebAppContext component uses this
          XML format to:</para>

          <itemizedlist>
            <listitem>
              <para>Set up the default configuration of a web application
              context.</para>
            </listitem>

            <listitem>
              <para>Interpret the application-specific configuration supplied
              with a web application in the <filename>
              WEB-INF/web.xml</filename> file.</para>
            </listitem>

            <listitem>
              <para>Interpret descriptor fragments included in the
              <filename>META-INF</filename> directory of Jar files within
              <filename>WEB-INF/lib.</filename></para>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Property Files</term>

        <listitem>
          <para>Standard <link
          xl:href="http://en.wikipedia.org/wiki/Java_properties">Java property
          files</link> are also used for Jetty configuration in several
          ways:</para>

          <itemizedlist>
            <listitem>
              <para>To parameterize Jetty IoC XML via the use of the Property
              element.</para>
            </listitem>

            <listitem>
              <para>To configure the default logging mechanism (StdErrLog).
              You can also plug in other logging frameworks, and also use
              property files (for example, log4j).</para>
            </listitem>

            <listitem>
              <para>As a simple database for login usernames and
              credentials.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Jetty IoC XML Configuration format</title>

    <para>To understand the Jetty IoC XML format, consider the following
    example of an embedded Jetty server instantiated and configured in
    java:</para>

    <programlisting language="rjava">     <filename>
      @GITURL@/examples/embedded/src/main/java/org/eclipse/jetty/embedded/ExampleServer.java</filename>
    </programlisting>

    <para>Jetty IoC XML allows you to instantiate and configure the exact same
    server in XML without writing any java code:</para>

    <programlisting language="rxml">      <filename>
      @GITURL@/examples/embedded/src/main/resources/exampleserver.xml</filename>
    </programlisting>

    <para>In practise, most commonly used Jetty features have XML files that
    are included in the standard distribution in the <filename>etc</filename>
    directory. Thus configuring Jetty is often a matter of just editing
    existing XML files and altering the configuration values within
    them.</para>
  </section>

  <section>
    <title>Configuring the Jetty Distribution</title>

    <para>With a normal distribution of Jetty, the configuration mechanisms
    introduced above are typically used as follows:</para>

    <variablelist>
      <varlistentry>
        <term><filename>$JETTY_HOME/start.ini</filename></term>

        <listitem>
          <para>Used for global command line options. In the standard jetty
          distribution since release 9.1 the contents of start.ini have been
          moved to modular ini files under the <code>start.d/</code> .</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><filename>$JETTY_HOME/start.d</filename></term>

        <listitem>
          <para>A directory of modular ini files that are used to set the
          OPTION, parameters and configuration files for key jetty modules.
          These modules may be enable/disabled by renaming the files or since
          release 9.1 by using the --enable or --disable option of
          start.jar</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><filename>$JETTY_HOME/lib/*.xml</filename></term>

        <listitem>
          <para>Jetty IoC XML files that configure individual features; for
          example <filename>jetty.xml</filename> (for the server),
          <filename>jetty-http.xml,</filename>
          <filename>jetty-https.xml,</filename> <filename>
          jetty-jmx.xml</filename>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><filename>$JETTY_HOME/webapps/*</filename></term>

        <listitem>
          <para>The directory in which standard WAR files, web applications
          and context IoC XML files are deployed.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Jetty Port Configuration Example</title>

    <para>The following example examines the common Jetty configuration
    mechanism using the HTTP port as an example. To run the jetty server from
    the distribution, it is just a matter of running the following
    command:</para>

    <screen>&gt; java -jar start.jar</screen>

    <para>The Jetty <filename>distribution uses the start.d/
    </filename>directory to define what OPTIONS, configuration files and
    Properties are defined. The start.d/210-http.ini module is enabled by
    default and contains the following lines (among others):</para>

    <programlisting language="plain">jetty.port=8080
etc/jetty-http.xml</programlisting>

    <para>This sets the jetty port parameter and lists the
    <filename>etc/jetty-http.xml</filename> configuration file as a command
    line argument. Looking inside that configuration file, we see that it
    calls addConnector on the server with a new instance of the
    ServerConnector class. This instance is configured in XML and includes the
    line:</para>

    <programlisting language="xml">&lt;Set name="port"&gt;&lt;Property name="jetty.port" default="8080" /&gt;&lt;/Set&gt;    </programlisting>

    <para>The effect of this line is to call ServerConnector.setPort(int) with
    either the value of the <filename>jetty.port</filename> property if set or
    with the value 8080. We can see from the start.ini except above that the
    jetty.port property line is set to 8080 also, so out of the box, the jetty
    distribution will use the default 8080 port set inside the 210-http.ini
    file.</para>

    <para>If you wish to change the port, then the 210-http.ini file can be
    edited and the default value there changed to the new port. However this
    does mean that a file which is part of the jetty distribution has been
    modified, which can make future upgrades more difficult. Alternately the
    Property value can be set in one of several ways. Firstly an overriding
    property value may be passed on the command line:</para>

    <screen>$ java -jar start.jar jetty.port=9999
</screen>

    <para>This can be convenient if you have a script (like
    <filename>bin/jetty.sh</filename>) that builds the command line for you.
    However, if the start script is located away from the distribution (eg in
    /etc/init.d) this can separate configuration from the installation, so the
    start mechanism also allows for any command line argument to be placed in
    the start.ini, so the jetty.port line can be uncommented in start.ini and
    the port set there. This works, but now we are modifying a part of the
    distribution again. If you want to avoid this, then you can create a
    <filename>start.d/900-myconfig.ini</filename> file to include your
    additional OPTIONS, configuration files and Properties:</para>

    <screen>$ echo jetty.port=9999 &amp;gt; start.d/900-myconfig.ini
$ java -jar start.jar    </screen>

    <para>Finally, if your configuration results in a lot of properties that
    need to be set and you wish to work with standard property files, then
    these too can be added on the command line, in start.ini or your own
    start.d files:</para>

    <screen>$ echo "jetty.port: 9999" &amp;gt; start.d/myconfig.properties
$ echo start.d/myconfig.properties &amp;gt; start.d/900-myconfig.ini
$ java -jar start.jar    </screen>

    <para>In summary, Jetty is configured by calling setters and methods on
    POJO's which can be done either from java code or from Jetty IoC XML
    files. The XML files can either be edited or parameterised with properties
    that can be set on the command line or passed via an ini file. The XMLs to
    use are also set either on the command line and/or with ini files.</para>
  </section>
</section>
