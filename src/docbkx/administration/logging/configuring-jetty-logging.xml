<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="configuring-jetty-logging"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Configuring Jetty Logging</title>

  <para>Jetty provides logging via its own
  <code>org.eclipse.jetty.util.log.Logger</code> layer, and does not natively
  use any existing Java logging framework. All logging events, produced via
  the Jetty logging layer, have a name, a level, and a message. The name is a
  FQCN (fully qualified class name) similar to how all existing Java logging
  frameworks operate.</para>

  <para>Jetty logging, however, has a slightly different set of levels that it
  uses internally:</para>

  <variablelist>
    <varlistentry>
      <term>WARN</term>

      <listitem>
        <para>For events serious enough to inform and log, but not
        fatal.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>INFO</term>

      <listitem>
        <para>Informational events.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>DEBUG</term>

      <listitem>
        <para>Debugging events (very noisy).</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>IGNORE</term>

      <listitem>
        <para>Exception events that you can safely ignore, but useful for some
        people. You might see this level as DEBUG under some Java logging
        framework configurations, where it retains the
        <emphasis>ignore</emphasis> phrase somewhere in the logging.</para>
      </listitem>
    </varlistentry>
  </variablelist>

  <note>
    <para>Jetty logging produces no FATAL or SEVERE events.</para>
  </note>

  <section xml:id="selecting-log-framework">
    <title>Selecting the Log Framework</title>

    <para>Configure the Jetty logging layer via the
    <code>org.eclipse.jetty.util.log.Log</code> class, following <link
    xl:href="@GITBROWSEURL@/jetty-util/src/main/java/org/eclipse/jetty/util/log/Log.java">these
    rules</link>.</para>

    <orderedlist>
      <listitem>
        <para>Load Properties</para>

        <itemizedlist>
          <listitem>
            <para>First from a Classpath Resource called
            <code>jetty-logging.properties</code> (if found).</para>
          </listitem>

          <listitem>
            <para>Then from the <code>System.getProperties()</code>.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Determine the log implementation.</para>

        <itemizedlist>
          <listitem>
            <para>If property
            <literal>org.eclipse.jetty.util.log.class</literal> is defined,
            load the class it defines as the logger implementation from the
            server classpath.</para>
          </listitem>

          <listitem>
            <para>If the class <code>org.slf4j.Logger</code> exists in server
            classpath, the Jetty implementation becomes
            <code>org.eclipse.jetty.util.log.Slf4jLog</code>.</para>
          </listitem>

          <listitem>
            <para>If no logger implementation is specified, default to
            <code>org.eclipse.jetty.util.log.StdErrLog</code>.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </orderedlist>

    <note>
      <para>You can create your own custom logging by providing an
      implementation of the <link
      xl:href="@JDURL@org/eclipse/jetty/util/log/Logger.html">Jetty
      Logger API</link>. For an example of a custom logger, see <link
      xl:href="@GITBROWSEURL@/jetty-util/src/main/java/org/eclipse/jetty/util/log/JavaUtilLog.java">JavaUtilLog.java</link>.</para>
    </note>
  </section>

  <section xml:id="configuring-jetty-stderrlog">
    <title>The jetty-logging.properties file</title>

    <para>By default, the internal Jetty Logging discovery mechanism will load
    logging specific properties from a classpath resource called
    <filename>jetty-logging.properties</filename> and then initialize the
    Logging from a combination of properties found in that file, along with
    any System Properties.</para>

    <para>A typical jetty-logging.properties file will include at least the
    declaration of which logging implementation you want to use by defining a
    value for the <literal>org.eclipse.jetty.util.log.class</literal>
    property.</para>

    <para>Examples for various logging frameworks can be found later in this
    documentation.</para>

    <itemizedlist>
      <listitem>
        <para>Default Logging with <link
        linkend="default-logging-with-stderrlog">Jetty's
        StdErrLog</link></para>
      </listitem>

      <listitem>
        <para>Using <link linkend="example-logging-log4j">Log4j via
        Slf4jLog</link></para>
      </listitem>

      <listitem>
        <para>Using <link linkend="example-logging-logback">Logback via
        Slf4jLog</link></para>
      </listitem>

      <listitem>
        <para>Using java.util.logging via Slf4jLog</para>
      </listitem>

      <listitem>
        <para>Using java.util.logging via Jetty's JavaUtilLog</para>
      </listitem>

      <listitem>
        <para>Capturing <link
        linkend="example-slf4j-multiple-loggers">Multiple Logging Frameworks
        via Slf4jLog</link></para>
      </listitem>

      <listitem>
        <para><link linkend="example-logging-logback-centralized">Centralized
        Logging with Logback and Sfl4jLog</link></para>
      </listitem>
    </itemizedlist>
  </section>
</section>
