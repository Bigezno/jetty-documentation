<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="startup-overview" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Startup Overview</title>

  <para>The <filename>start.jar</filename> bootstrap manages the startup of standalone Jetty. It is responsible for:</para>

  <variablelist>
    <varlistentry>
      <term>Building the classpath</term>

      <listitem>
        <para>The <filename>start.jar</filename> bootstrap builds a classpath for all the
        required Jetty features and their dependencies. It builds the classpath using either the <literal>--lib</literal> option to <filename>start.jar</filename> to add an individual
        classpath entry, or with the <literal>--module</literal> option that
        includes all the libs and their dependencies for a module (a named
        Jetty feature).</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Instantiating the Server Components</term>

      <listitem>
        <para>The server and its components are instantiated using either
        Jetty IoC XML or spring. The Jetty server is just a collection of java
        POJOs for the server, connectors, session managers and others. These are
        instantiated, injected, and wired up together in XML files, commonly
        one per module/feature, that are passed as arguments to
        <filename>start.jar</filename>.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Resolving Server Filesystem Locations</term>

      <listitem>
        <para>The <filename>start.jar</filename> mechanism resolves
        canonical locations for the <literal>${jetty.home}</literal> and the
        <literal>${jetty.base}</literal> directories.</para>

        <para>The <literal>${jetty.home}</literal> directory is the location of the standard
        distribution of Jetty.</para>

        <para>The <literal>${jetty.base}</literal> directory is the location of the local server
        customization and configurations.</para>

        <para>If you want to modify the Jetty distribution, base and
        home can be the same directory. Separating the base and home
        directories allows the distribution to remain unmodified, with all customizations in the base directory, and thus
        simplifies subsequent server version upgrades.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Parameterizing the Server Configuration</term>

      <listitem>
        <para>XML files primarily determine the server configuration. Many of these files are parameterized to allow simple
        injection of host names, ports, passwords and more. The
        <filename>start.jar</filename> mechanism allows you to set parameters
        on the command line or in properties files.</para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>To achieve these start up mechanisms, the <filename>start.jar</filename>
  uses:</para>

  <variablelist>
    <varlistentry>
      <term>Command line arguments</term>

      <listitem>
        <para>You can configure the entire server with command line arguments
        that specify libraries, properties and XML files. However in practice
        the INI and modules mechanisms (below) reduce the
        verbosity of the command line.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>INI files</term>

      <listitem>
        <para>The 
        <filename>start.jar</filename> mechanism uses the contents of the <filename>${jetty.base}/start.ini</filename>
        and <filename>${jetty.base}/start.d/*.ini</filename> files with each line equivalent to a <literal>start.jar</literal> command line
        argument. This means that either a global <filename>start.ini</filename> file or multiple <filename>start.d/feature.ini</filename> files control the configuration of the server.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Modules</term>

      <listitem>
        <para>Instead of explicitly listing all the libraries, properties and
        XML files for a feature, the <filename>start.jar</filename> mechanism
        allows you to create modules. You define a module in a
        <filename>modules/*.mod</filename> file, including the libraries,
        dependencies, XML, and template INI files for a Jetty feature. Thus you can use a
        single <literal>--module=name</literal> command line option as the equivalent of specifying many
        <literal>--lib=location</literal>, feature.xml, name=value arguments
        for a feature and all its dependencies. Modules also use their
        dependencies to control the ordering of libraries and XML
        files.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>XML Files</term>

      <listitem>
        <para>XML files in either Jetty IoC or Spring format instantiate the actual POJO components of the server. This includes all major
        components such as connectors, keystores, session managers, and data
        sources. Typically there are one or more
        XML files per module, and these are defined and activated in the
        corresponding module.</para>
      </listitem>
    </varlistentry>
  </variablelist>

  <section>
    <title>Startup Example</title>

    <para>The simplest way to start Jetty is via the
    <filename>start.jar</filename> mechanism using the following Java command
    line:</para>

    <screen><![CDATA[[user]$ cd jetty-distribution-@project.version@
[jetty-distribution-@project.version@]$ java -jar start.jar --module=http jetty.http.port=8080]]></screen>

    <para>This command uses the <filename>start.jar</filename> mechanism to
    bootstrap the classpath, properties, and XML files with the metadata
    obtained from the <literal>http</literal> module. Specifically the
    <literal>http</literal> module is defined in the
    <filename>${jetty.home}/modules/http.mod</filename> file, and includes the
    following:</para>

    <screen><![CDATA[[jetty-distribution-@project.version@]$ cat modules/http.mod
[depend]
server

[xml]
etc/jetty-http.xml

[ini-template]
jetty.http.port=8080
http.timeout=30000]]></screen>

    <para>The <literal>http</literal> module declares that
    <literal>http</literal> depends on the server module, uses the
    <filename>jetty-http.xml</filename> file, and can be parameterized with
    <literal>jetty.http.port</literal> and <literal>http.timeout</literal>
    parameters. The INI-template section is not actually used by the command
    above, so the <literal>jetty.http.port</literal> must still be defined on the
    command line.</para>

    <para>Following the server dependency, the
    <filename>${jetty.home}/modules/server.mod</filename> file
    includes:</para>

    <screen><![CDATA[[jetty-distribution-@project.version@]$ cat modules/server.mod
[lib]
lib/servlet-api-3.1.jar
lib/jetty-http-${jetty.version}.jar
lib/jetty-server-${jetty.version}.jar
lib/jetty-xml-${jetty.version}.jar
lib/jetty-util-${jetty.version}.jar
lib/jetty-io-${jetty.version}.jar

[xml]
etc/jetty.xml

[ini-template]
threads.min=10
threads.max=200
]]></screen>

    <para>The <literal>server</literal> module declares the libraries the server needs
    and t0 use <filename>jetty.xml</filename> file.
    The combined metadata of the <literal>http</literal> and
    <literal>server</literal> modules results in
    <filename>start.jar</filename> generating the effective Java command line
    required to start Jetty.</para>

    <para>Another way to see this is by asking Jetty what its configuration looks
    like:</para>

    <screen><![CDATA[[jetty-distribution-@project.version@]$ java -jar start.jar --module=http jetty.http.port=9099 --list-config

Java Environment:
-----------------
 java.home=/user/lib/jvm/jdk-7u21-x64/jre
 java.vm.vendor=Oracle Corporation
 java.vm.version=23.25-b01
 java.vm.name=Java HotSpot(TM) 64-Bit Server VM
 java.vm.info=mixed mode
 java.runtime.name=Java(TM) SE Runtime Environment
 java.runtime.version=1.7.0_25-b15
 java.io.tmpdir=/tmp

Jetty Environment:
-----------------
 jetty.home=/opt/jetty/jetty-distribution-@project.version@
 jetty.base=/opt/jetty/jetty-distribution-@project.version@
 jetty.version=@project.version@

JVM Arguments:
--------------
 (no jvm args specified)

System Properties:
------------------
 jetty.home = /opt/jetty/jetty-distribution-@project.version@
 jetty.base = /opt/jetty/jetty-distribution-@project.version@

Properties:
-----------
 jetty.http.port = 9099

Jetty Server Classpath:
-----------------------
Version Information on 7 entries in the classpath.
Note: order presented here is how they would appear on the classpath.
      changes to the --module=name command line options will be reflected here.
 0:                    3.1.0 | ${jetty.home}/lib/servlet-api-3.1.jar
 1:                  3.1.RC0 | ${jetty.home}/lib/jetty-schemas-3.1.jar
 2:               @project.version@ | ${jetty.home}/lib/jetty-http-@project.version@.jar
 3:               @project.version@ | ${jetty.home}/lib/jetty-server-@project.version@.jar
 4:               @project.version@ | ${jetty.home}/lib/jetty-xml-@project.version@.jar
 5:               @project.version@ | ${jetty.home}/lib/jetty-util-@project.version@.jar
 6:               @project.version@ | ${jetty.home}/lib/jetty-io-@project.version@.jar

Jetty Active XMLs:
------------------
 ${jetty.home}/etc/jetty.xml
 ${jetty.home}/etc/jetty-http.xml
]]></screen>

    <para>This represents the entirety of the configuration that is applied to
    start Jetty.</para>

    <para>If you don't want to use the <filename>start.jar</filename>
    bootstrap, you can start Jetty using a traditional Java command
    line.</para>

    <para>The following is the equivalent <filename>java</filename> command
    line for what the <filename>start.jar</filename> bootstrap above
    performs.</para>

    <screen><![CDATA[[user]$ cd jetty-distribution-@project.version@
[jetty-distribution-@project.version@]$ echo jetty.http.port=8080 > /tmp/jetty.properties
[jetty-distribution-@project.version@]$ export JETTY_HOME=`pwd`
[jetty-distribution-@project.version@]$ export JETTY_BASE=`pwd`
[jetty-distribution-@project.version@]$ export JETTY_VERSION="${project.version}"
[jetty-distribution-@project.version@]$ java -Djetty.home=$JETTY_HOME \
-Djetty.base=$JETTY_BASE \
-cp \
 $JETTY_HOME/lib/servlet-api-3.1.jar\
:$JETTY_HOME/lib/jetty-schemas-3.1.jar\
:$JETTY_HOME/lib/jetty-http-$JETTY_VERSION.jar\
:$JETTY_HOME/lib/jetty-server-$JETTY_VERSION.jar \
:$JETTY_HOME/lib/jetty-xml-$JETTY_VERSION.jar\
:$JETTY_HOME/lib/jetty-util-$JETTY_VERSION.jar\
:$JETTY_HOME/lib/jetty-io-$JETTY_VERSION.jar\
org.eclipse.jetty.xml.XmlConfiguration \
/tmp/jetty.properties \
$JETTY_HOME/etc/jetty.xml \
$JETTY_HOME/etc/jetty-http.xml
]]></screen>

    <para>The java command line sets up the classpath with the core Jetty jars and
    the servlet API, executes the XmlConfiguration class, and passes it some
    XML files that define the server and an HTTP connector running on the port
    defined in the <filename>jetty.properties</filename> file.</para>

    <para>You can further simplify the startup of this server by using the
    INI template defined by the modules to create a
    <filename>start.ini</filename> file with the command:</para>

    <screen><![CDATA[[user]$ cd jetty-distribution-@project.version@
[jetty-distribution-@project.version@]$ mkdir example-base
[example-base]$ cd example-base
[example-base]$ ls -la
total 8
drwxrwxr-x  2 user webgroup 4096 Oct  4 11:49 ./
drwxrwxr-x 12 user webgroup 4096 Oct  4 11:49 ../
[example-base]$ java -jar $JETTY_HOME/start.jar --add-to-start=http
WARNING: http            initialised in ${jetty.base}/start.ini (appended)
WARNING: http            enabled in     ${jetty.base}/start.ini
WARNING: server          initialised in ${jetty.base}/start.ini (appended)
WARNING: server          enabled in     ${jetty.base}/start.ini
[example-base]$ ls -la
total 12
drwxrwxr-x  2 user webgroup 4096 Oct  4 11:55 ./
drwxrwxr-x 12 user webgroup 4096 Oct  4 11:49 ../
-rw-rw-r--  1 user webgroup  250 Oct  4 11:55 start.ini
]]></screen>

    <para>Once complete, you can edit the <filename>start.ini</filename> file to modify any
    parameters and you can run the server with the simple command:</para>

    <screen><![CDATA[[example-base]$ java -jar $JETTY_HOME/start.jar]]></screen>
  </section>
</section>
