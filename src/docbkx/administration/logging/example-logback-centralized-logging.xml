<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="example-logging-logback-centralized"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Example: Centralized Logging with Logback</title>

  <para>The term <emphasis>Centralized Logging</emphasis> refers to a forced
  logging configuration for the Jetty Server and all web applications that are
  deployed on the server. It routes all logging events from the web
  applications to a single configuration on the Server side.</para>

  <para>The example below shows how to accomplish this with Jetty and Slf4j,
  using Logback to manage the final writing of logs to disk.</para>

  <important>
    <para>This mechanism forces all webapps to use the server's configuration
    for logging, something that isn't 100% appropriate for all webapps.</para>

    <para>An example would be having Jenkins-CI deployed as an webapp, if you
    force its logging configuration to the server side, you lose the ability
    on <link xl:href="http://jenkins-ci.org/">Jenkins-CI</link> to see the
    logs from the various builds (as now those logs are actually going to the
    main server log)</para>
  </important>

  <para>This configuration is essentially the multiple logger configuration
  with added configuration to the deployers to force a WebAppClassLoader
  change to use the server classpath over the webapps classpath for the logger
  specific classes.</para>

  <para>The technique used by this configuration is to provide an <link
  xl:href="http://download.eclipse.org/jetty/stable-9/apidocs/org/eclipse/jetty/deploy/AppLifeCycle.Binding.html">AppLifeCycle.Binding</link>
  against the <link
  xl:href="http://download.eclipse.org/jetty/stable-9/apidocs/org/eclipse/jetty/deploy/AppLifeCycle.html"><literal>"deploying"</literal>
  node</link> that modifies the <link
  xl:href="http://download.eclipse.org/jetty/stable-9/apidocs/org/eclipse/jetty/webapp/WebAppContext.html#addSystemClass(java.lang.String)">WebAppContext.addSystemClass(String)</link>
  for the common logging classes. (See <link
  xl:href="https://github.com/jetty-project/jetty-webapp-logging/blob/master/src/main/java/org/eclipse/jetty/webapp/logging/CentralizedWebAppLoggingBinding.java">org.eclipse.jetty.logging.CentralizedWebAppLoggingBinding</link>
  for actual implementation)</para>

  <simplesect>
    <title>Quick Setup of Centralized Logging using Jetty 9.2.1+</title>

    <para>A convenient replacement <literal>logging</literal> module has been
    created to bootstrap your <filename>${jetty.base}</filename> directory for
    capturing all Jetty server logging from multiple logging frameworks into a
    single logging output file managed by logback.</para>

    <screen><![CDATA[[mybase]$ mkdir modules
[mybase]$ cd modules
[modules]$ curl -O https://raw.githubusercontent.com/jetty-project/logging-modules/master/capture-all/logging.mod
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  1416  100  1416    0     0   4241      0 --:--:-- --:--:-- --:--:--  4252
[master]$ curl -O https://raw.githubusercontent.com/jetty-project/logging-modules/master/centralized/webapp-logging.mod
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   660  100   660    0     0   2032      0 --:--:-- --:--:-- --:--:--  2037
[modules]$ cd ..
[mybase]$ java -jar /opt/jetty-dist/start.jar --add-to-start=logging,webapp-logging
INFO: logging         initialised in ${jetty.base}/start.ini (appended)
MKDIR: ${jetty.base}/logs
DOWNLOAD: http://central.maven.org/maven2/org/slf4j/slf4j-api/1.6.6/slf4j-api-1.6.6.jar to lib/logging/slf4j-api-1.6.6.jar
DOWNLOAD: http://central.maven.org/maven2/org/slf4j/log4j-over-slf4j/1.6.6/log4j-over-slf4j-1.6.6.jar to lib/logging/log4j-over-slf4j-1.6.6.jar
DOWNLOAD: http://central.maven.org/maven2/org/slf4j/jul-to-slf4j/1.6.6/jul-to-slf4j-1.6.6.jar to lib/logging/jul-to-slf4j-1.6.6.jar
DOWNLOAD: http://central.maven.org/maven2/org/slf4j/jcl-over-slf4j/1.6.6/jcl-over-slf4j-1.6.6.jar to lib/logging/jcl-over-slf4j-1.6.6.jar
DOWNLOAD: http://central.maven.org/maven2/ch/qos/logback/logback-core/1.0.7/logback-core-1.0.7.jar to lib/logging/logback-core-1.0.7.jar
DOWNLOAD: http://central.maven.org/maven2/ch/qos/logback/logback-classic/1.0.7/logback-classic-1.0.7.jar to lib/logging/logback-classic-1.0.7.jar
DOWNLOAD: https://raw.githubusercontent.com/jetty-project/logging-modules/master/capture-all/logback.xml to resources/logback.xml
DOWNLOAD: https://raw.githubusercontent.com/jetty-project/logging-modules/master/capture-all/jetty-logging.properties to resources/jetty-logging.properties
DOWNLOAD: https://raw.githubusercontent.com/jetty-project/logging-modules/master/capture-all/jetty-logging.xml to etc/jetty-logging.xml
INFO: resources       initialised transitively
INFO: resources       enabled in     ${jetty.base}/start.ini
INFO: webapp-logging  initialised in ${jetty.base}/start.ini (appended)
DOWNLOAD: http://central.maven.org/maven2/org/eclipse/jetty/jetty-webapp-logging/9.0.0/jetty-webapp-logging-9.0.0.jar to lib/webapp-logging/jetty-webapp-logging-9.0.0.jar
DOWNLOAD: https://raw.githubusercontent.com/jetty-project/jetty-webapp-logging/master/src/main/config/etc/jetty-webapp-logging.xml to etc/jetty-webapp-logging.xml
DOWNLOAD: https://raw.githubusercontent.com/jetty-project/jetty-webapp-logging/master/src/main/config/etc/jetty-mdc-handler.xml to etc/jetty-mdc-handler.xml
INFO: deploy          initialised transitively
INFO: deploy          enabled in     ${jetty.base}/start.ini
INFO: logging         initialised transitively
INFO: resources       initialised transitively
INFO: resources       enabled in     ${jetty.base}/start.ini
[mybase]$ java -jar /opt/jetty-dist/start.jar
]]></screen>
  </simplesect>

  <simplesect>
    <title>That's cool and all, but tell me what that just did.</title>

    <para>The replacement <filename>logging.mod</filename> performs a number
    of tasks.</para>

    <orderedlist>
      <listitem>
        <para><filename>mybase</filename> is a
        <filename>${jetty.base}</filename> directory</para>
      </listitem>

      <listitem>
        <para>The jetty-distribution is unpacked (and untouched) into
        <filename>/opt/jetty-dist/ </filename>and becomes the
        <filename>${jetty.home}</filename> directory for this
        demonstration.</para>
      </listitem>

      <listitem>
        <para>The <command>curl</command> command downloads the replacement
        <filename>logging.mod</filename> and puts it into the
        <filename>${jetty.base}/modules/</filename> directory for use by
        mybase only.</para>
      </listitem>

      <listitem>
        <para>The <command>start.jar
        --add-to-start=logging,webapp-logging</command> command performs a
        number of steps to make the logging module available to the
        <filename>${jetty.base}</filename> configuration.</para>

        <orderedlist>
          <listitem>
            <para>Several entries are added to the
            <filename>${jetty.base}/start.ini</filename> configuration</para>

            <orderedlist>
              <listitem>
                <para><command>--module=logging</command> is added to enable
                the logging module</para>
              </listitem>

              <listitem>
                <para><command>--module=webapp-logging</command> is added to
                enable the webapp-logging module</para>
              </listitem>
            </orderedlist>
          </listitem>

          <listitem>
            <para>Required <filename>${jetty.base}</filename> directories are
            created: <filename>${jetty.base}/logs</filename> and
            <filename>${jetty.base}/resources</filename></para>
          </listitem>

          <listitem>
            <para>Required logging libraries are downloaded (if not present
            already):</para>

            <itemizedlist>
              <listitem>
                <para>slf4j-api.jar - API jar for Slf4j (used by most of the
                rest of the jars)</para>
              </listitem>

              <listitem>
                <para>log4j-over-slf4j.jar - Slf4j jar that captures all log4j
                emitted logging events</para>
              </listitem>

              <listitem>
                <para>jul-to-slf4j.jar - Slf4j jar that captures all
                java.util.logging events</para>
              </listitem>

              <listitem>
                <para>jcl-over-slf4j.jar - Slf4j jar that captures all
                commons-logging events</para>
              </listitem>

              <listitem>
                <para>logback-classic.jar - the Slf4j adapter jar that routes
                all of the captured logging events to logback itself.</para>
              </listitem>

              <listitem>
                <para>logback-core.jar - the logback implementation jar, that
                handles all of the filtering and output of the logging
                events.</para>
              </listitem>
            </itemizedlist>

            <para>These libraries are put in the
            <filename>${jetty.base}/lib/logging/</filename> directory.</para>
          </listitem>

          <listitem>
            <para>Required webapp-logging library are downloaded (if not
            present already):</para>

            <itemizedlist>
              <listitem>
                <para>jetty-webapp-logging.jar - the jetty side deployment
                manger app-lifecycle bindings for modifying the
                WebAppClassloaders of deployed webapps.</para>
              </listitem>
            </itemizedlist>

            <para>This library is put in the
            <filename>${jetty.base}/lib/webapp-logging/</filename>
            directory.</para>
          </listitem>

          <listitem>
            <para>Required configuration files are downloaded (if not present
            already): <filename>jetty-logging.properties</filename>, and
            <filename>logback.xml</filename></para>

            <para>The configuration files are put in the
            <filename>${jetty.base}/resources/</filename> directory.</para>
          </listitem>

          <listitem>
            <para>Required initialization commands are downloaded (if not
            present already): <filename>jetty-logging.xml</filename>,
            <filename>jetty-webapp-logging.xml</filename>, and
            <filename>jetty-mdc-handler.xml</filename></para>

            <para>These xml files are put in the
            <filename>${jetty.base}/etc/</filename> directory.</para>
          </listitem>
        </orderedlist>
      </listitem>

      <listitem>
        <para>At this point you have your <filename>mybase</filename>
        configured so that the jetty server itself will log using slf4j, and
        all other logging events from other Jetty Server components (such as
        database drivers, security layers, jsp, mail, and other 3rd party
        server components) are routed to logback for filtering and
        output.</para>

        <para>All webapps deployed via the DeploymentManager have their
        WebAppClassLoader modified to use server side classes and
        configuration for all logging implementations.</para>
      </listitem>
    </orderedlist>

    <para>You can verify the server classpath by using the <command>start.jar
    --list-config</command> command.</para>

    <para>In essence, Jetty is now configured to emit its own logging events
    to slf4j, and various slf4j bridge jars are acting on behalf of log4j,
    java.util.logging, and commons-logging, routing all of the logging events
    to logback (a slf4j adapter) for routing (to console, file, etc...)</para>
  </simplesect>
</section>
