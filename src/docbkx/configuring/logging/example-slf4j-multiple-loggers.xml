<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="example-slf4j-multiple-loggers"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Example: Capturing Multiple Logging Frameworks with Slf4j</title>

  <para>This page describes how to configure Jetty for capturing multiple
  logging frameworks logging events into a single logging implementation
  handled by Slf4j.</para>

  <para>When using Slf4j, you can configure a single logging
  solution for the variety of logging libraries available in common
  use. With careful setup, you can support all of the following logging
  APIs at the same time, with a single configuration file to control the
  output of events produces by these APIs.</para>

  <para>Logging APIs that Slf4j supports:</para>

  <itemizedlist>
    <listitem>
      <para>Slf4j API</para>
    </listitem>

    <listitem>
      <para>Logback API</para>
    </listitem>

    <listitem>
      <para>Apache Log4j 1.2</para>
    </listitem>

    <listitem>
      <para>JDK 1.4 Logging (aka <literal>java.util.logging</literal>)</para>
    </listitem>

    <listitem>
      <para>Apache Commons Logging</para>
    </listitem>
  </itemizedlist>

  <para>To accomplish this you must make some careful choices, starting with a single underlying logging
  framework. This decision guides the rest of your choices about JARs to place on the Server classpath.</para>

  <table width="8">
    <title>Slf4j Logging Grid</title>

    <tgroup cols="4">
      <colspec colwidth="25%"/>

      <colspec colwidth="25%"/>

      <colspec colwidth="25%"/>

      <colspec colwidth="25%"/>

      <thead>
        <row>
          <entry>Logging API</entry>

          <entry>Slf4j Binding Jar</entry>

          <entry>Slf4j Adapter Jar</entry>

          <entry>Underlying Logging Framework</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>Logback API</entry>

          <entry>n/a</entry>

          <entry>logback-classic.jar</entry>

          <entry>logback-core.jar</entry>
        </row>

        <row>
          <entry>Log4j</entry>

          <entry><link
          xl:href="http://slf4j.org/legacy.html#log4j-over-slf4j">log4j-over-slf4j.jar</link></entry>

          <entry>slf4j-log4j12.jar</entry>

          <entry>log4j.jar</entry>
        </row>

        <row>
          <entry>JDK 1.4 Logging</entry>

          <entry><link
          xl:href="http://slf4j.org/legacy.html#jul-to-slf4j">jul-to-slf4j.jar</link></entry>

          <entry>slf4j-jdk14.jar</entry>

          <entry>(Core Java Classlib)</entry>
        </row>

        <row>
          <entry>Commons Logging</entry>

          <entry><link
          xl:href="http://slf4j.org/legacy.html#jcl-over-slf4j">jcl-over-slf4j.jar</link></entry>

          <entry>slf4j-jcl.jar</entry>

          <entry>commons-logging.jar</entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <variablelist>
    <varlistentry>
      <term>Logging API</term>

      <listitem>
        <para>The Logging API that you are either capturing events from and/or
        using to write out those events (for example, to disk).</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Slf4j Binding JAR</term>

      <listitem>
        <para>Special JARs, created and maintained by the Slf4j
        project, that pretend to be the various Logging API implementation
        classes, but instead just route that Logging API's events to Slf4j to
        handle.</para>

        <para>There MAY be multiple Slf4j binding JARs present on the
        classpath at the same time.</para>

        <para>For a single logging API, if you choose to use the Slf4j binding
        JAR, then you MUST NOT include the SLf4j adapter JAR or underlying
        logging framework in the classpath as well.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Slf4j Adapter Jar</term>

      <listitem>
        <para>These JARs are created and maintained by the Slf4j project and
        route Slf4j logging events to a specific underlying logging
        framework.</para>

        <para>There MUST NOT be multiple Slf4j adapter JARs present on the
        classpath at the same time.</para>

        <para>Logging events that these adapter JARs capture can come from
        direct use of the Slf4j API or via one of the Slf4j binding JAR
        implementations.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Underlying Logging Framework</term>

      <listitem>
        <para>This is the last leg of your configuration, the implementation
        that processes, filters, and outputs the logging events to the
        console, logging directory on disk, or whatever else the
        underlying logging framework supports (like Socket, SMTP, Database, or
        even SysLog in the case of Logback).</para>

        <para><caution>
            <para>There MUST NOT be multiple underlying logging frameworks on
            the classpath. If there are, the Slf4j framework fails to load.</para>
          </caution></para>

        <para><note>
            <para>Some third party libraries provide their own
            implementations of common logging APIs; be careful not to
            accidentally include an underlying logging framework.</para>

            <para>For example, if you are using SpringSource you likely have a
            <filename>com.springsource.org.apache.log4j.jar</filename> along
            with a <filename>log4j.jar</filename>, which have the same classes
            in them. In this example, use the
            <filename>com.springsource.org.apache.log4j.jar</filename> version
            and exclude the <filename>log4j.jar</filename>, as the
            SpringSource version includes extra metadata suitable for using
            SpringSource.</para>
          </note></para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>The following sections use Logback as the underlying
  Logging framework. This requires using <literal>logback-classic.jar</literal> and
  <literal>logback-core.jar</literal>, and excluding any other Slf4j adapter JAR or
  underlying logging framework.</para>

  <para>It also requires including the other Slf4j binding JARs in the
  classpath, along with some special initialization for
  <literal>java.util.logging</literal>.</para>

  <simplesect>
    <title>The Required JARs</title>

    <para>You need to download six JARs, which you can do by clicking the following links:</para>

    <para><variablelist>
        <varlistentry>
          <term><filename><link
          xl:href="http://repo1.maven.org/maven2/ch/qos/logback/logback-classic/1.0.7/logback-classic-1.0.7.jar">logback-classic-1.0.7.jar</link></filename></term>

          <listitem>
            <para>The underlying logging framework and adaption layer
            for Slf4j.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename><link
          xl:href="http://repo1.maven.org/maven2/ch/qos/logback/logback-core/1.0.7/logback-core-1.0.7.jar">logback-core-1.0.7.jar</link></filename></term>

          <listitem>
            <para>The common implementation classes for the Logback
            project.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><link
          xl:href="http://repo1.maven.org/maven2/org/slf4j/log4j-over-slf4j/1.6.6/log4j-over-slf4j-1.6.6.jar"><filename>log4j-over-slf4j-1.6.6.jar</filename></link></term>

          <listitem>
            <para>The Slf4j binding JAR for Log4j.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><link
          xl:href="http://repo1.maven.org/maven2/org/slf4j/jul-to-slf4j/1.6.6/jul-to-slf4j-1.6.6.jar"><filename>jul-to-slf4j-1.6.6.jar</filename></link></term>

          <listitem>
            <para>The Slf4j binding JAR for <literal>java.util.logging</literal>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><link
          xl:href="http://repo1.maven.org/maven2/org/slf4j/jcl-over-slf4j/1.6.6/jcl-over-slf4j-1.6.6.jar"><filename>jcl-over-slf4j-1.6.6.jar</filename></link></term>

          <listitem>
            <para>The Slf4j binding JAR for Commons Logging.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename><link
          xl:href="http://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.6.6/slf4j-api-1.6.6.jar">slf4j-api-1.6.6.jar</link></filename></term>

          <listitem>
            <para>The basic Slf4j API that Jetty's Slf4jLog
            implementation uses.</para>
          </listitem>
        </varlistentry>
      </variablelist>This allows you to capture logging events generated by
    any of the following APIs.</para>

    <itemizedlist>
      <listitem>
        <para><link
        xl:href="http://slf4j.org/apidocs/org/apache/log4j/Logger.html">org.slf4j.Logger</link>
        – Slf4j API</para>
      </listitem>

      <listitem>
        <para><link
        xl:href="http://logback.qos.ch/apidocs/ch/qos/logback/classic/Logger.html">ch.qos.logback.classic.Logger</link>
        - Logback API</para>
      </listitem>

      <listitem>
        <para><link
        xl:href="http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/Logger.html">org.apache.log4j.Logger</link>
        - Apache Log4j API</para>
      </listitem>

      <listitem>
        <para><link
        xl:href="http://docs.oracle.com/javase/7/docs/api/java/util/logging/Logger.html">java.util.logging.Logger</link>
        - Core java.util.logging API</para>
      </listitem>

      <listitem>
        <para><link
        xl:href="http://commons.apache.org/proper/commons-logging/apidocs/">org.apache.commons.logging.Log</link>
        - Apache Commons Logging API</para>
      </listitem>
    </itemizedlist>

    <para>Any logging event from those APIs now routes to Logback
    Classic.</para>
  </simplesect>

  <simplesect>
    <title>Configuring Server Classpath</title>

    <para>For the Server to use these new JARs you need to put
    them in place and tell Jetty to load them on each startup. Create a <filename>${jetty.home}/lib/logging/</filename> directory and place the six files
    you downloaded there.</para>

    <screen language="bash"><![CDATA[[jetty-distribution-${project.version}]$ ls -l ]]><emphasis
        role="bold">lib/logging/</emphasis><![CDATA[
total 632
-rw-rw-r-- 1 jetty jetty  17289 Mar 12 16:21 ]]><emphasis role="bold">jcl-over-slf4j-1.6.6.jar</emphasis><![CDATA[
-rw-rw-r-- 1 jetty jetty   4955 Mar 12 16:21 ]]><emphasis role="bold">jul-to-slf4j-1.6.6.jar</emphasis><![CDATA[
-rw-rw-r-- 1 jetty jetty  20647 Mar 12 16:21 ]]><emphasis role="bold">log4j-over-slf4j-1.6.6.jar</emphasis><![CDATA[
-rw-rw-r-- 1 jetty jetty 251679 Mar 12 16:21 ]]><emphasis role="bold">logback-classic-1.0.7.jar</emphasis><![CDATA[
-rw-rw-r-- 1 jetty jetty 364399 Mar 12 16:21 ]]><emphasis role="bold">logback-core-1.0.7.jar</emphasis><![CDATA[
-rw-rw-r-- 1 jetty jetty  26176 Mar 12 16:21 ]]><emphasis role="bold">slf4j-api-1.6.6.jar</emphasis><![CDATA[
]]></screen>

    <para>Next edit the
    <filename>${jetty.home}/start.ini</filename> to get jetty to load these
    logging files into the Server classpath. Check for the following entries. If they are missing, add them at the end of the file.</para>

    <programlisting language="properties"><![CDATA[# Enable jul-to-slf4j layer
etc/jetty-jul-to-slf4j.xml
# Adding lib/logging to server classpath
OPTIONS=logging
]]></programlisting>

    <para>Now verify that the server classpath loads the six JARs.</para>

    <screen><![CDATA[[jetty-distribution-${project.version}]$ ]]><emphasis
        role="bold">java -jar start.jar --version</emphasis><![CDATA[ | grep logging
Active Options: [Server, client, ext, jmx, jsp, ]]><emphasis role="bold">logging</emphasis><![CDATA[, resources, websocket]
18:                1.6.6 | ${jetty.home}/lib/logging/]]><emphasis role="bold">jcl-over-slf4j-1.6.6.jar</emphasis><![CDATA[
19:                1.6.6 | ${jetty.home}/lib/logging/]]><emphasis role="bold">jul-to-slf4j-1.6.6.jar</emphasis><![CDATA[
20:                1.6.6 | ${jetty.home}/lib/logging/]]><emphasis role="bold">log4j-over-slf4j-1.6.6.jar</emphasis><![CDATA[
21:                1.0.7 | ${jetty.home}/lib/logging/]]><emphasis role="bold">logback-classic-1.0.7.jar</emphasis><![CDATA[
22:                1.0.7 | ${jetty.home}/lib/logging/]]><emphasis role="bold">logback-core-1.0.7.jar</emphasis><![CDATA[
23:                1.6.6 | ${jetty.home}/lib/logging/]]><emphasis role="bold">slf4j-api-1.6.6.jar</emphasis><![CDATA[
]]></screen>
  </simplesect>

  <simplesect>
    <title>Configuring Server Logging</title>

    <para>If you have a
    <filename>${jetty.home}/resources/jetty-logging.properties</filename> file,
    make sure it contains just the following:</para>

    <para><programlisting language="properties"><![CDATA[# Configure Jetty for SLf4j Logging
org.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.Slf4jLog]]></programlisting></para>

    <para>This tells Jetty to use the Slf4jLog implementation for its
    internal logging.</para>
  </simplesect>

  <simplesect>
    <title>Initializing Jul-to-Slf4j Bridge</title>

    <para>There is an extra requirement when using the <literal>jul-to-slf4j.jar</literal> to inform <literal>java.util.logging</literal> of the existence of the <link
    xl:href="http://slf4j.org/api/org/slf4j/bridge/SLF4JBridgeHandler.html">SLF4JBridgeHandler</link>.</para>

    <para>You can satisfy this requirement by including a new
    <filename>etc/jetty-jul-to-slf4j.xml</filename> file in
    the <filename>start.ini</filename> above.</para>

    <programlisting language="xml"><![CDATA[<?xml version="1.0"?>
<!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure_9_0.dtd">

<Configure id="Server" class="org.eclipse.jetty.server.Server">
  <Call class="org.slf4j.bridge.SLF4JBridgeHandler" name="removeHandlersForRootLogger"/>
  <Call class="org.slf4j.bridge.SLF4JBridgeHandler" name="install"/>
</Configure>
]]></programlisting>
  </simplesect>

  <simplesect>
    <title>Configuring Logback</title>

    <para>You'll need a
    <filename>${jetty.home}/resources/logback.xml</filename> file to define
    what you want Logback to do. It will be automatically located and loaded
    on Logging startup.</para>

    <para>Example <filename>${jetty.home}/resources/logback.xml</filename>
    file</para>

    <para><programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  Example LOGBACK Configuration File
  http://logback.qos.ch/manual/configuration.html
  -->
<configuration>
  <!-- address performance concern with jul-to-slf4j -->
  <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
    <resetJUL>true</resetJUL>
  </contextListener>

  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
    </encoder>
  </appender>

  <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>\${jetty.home}/logs/jetty.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>jetty_%d{yyyy-MM-dd}.log</fileNamePattern>
      <maxHistory>30</maxHistory>
    </rollingPolicy>

    <encoder>
      <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
    </encoder>
  </appender>

  <root level="info">
    <appender-ref ref="STDOUT" />
    <appender-ref ref="FILE" />
  </root>
</configuration>
]]></programlisting></para>

    <para><note>
        <para>When using the jul-to-slf4j Binding JAR, be sure you also
        use the <link
        xl:href="http://logback.qos.ch/manual/configuration.html#LevelChangePropagator">LevelChangePropagator</link>
        (as referenced in the <link
        xl:href="http://slf4j.org/api/org/slf4j/bridge/SLF4JBridgeHandler.html">SLF4JBridgeHandler
        javadoc</link>.</para>
      </note></para>
  </simplesect>

  <simplesect>
    <title>Starting Jetty</title>

    <para>You have now configured Jetty for all logging APIs. Just start
    Jetty to start using it.</para>

    <para><screen><![CDATA[[jetty-distribution-${project.version}]$ java -jar start.jar ]]></screen><note>
        <para>This configuration captures all Server side logging events
        and routes them to the console and logging file handled by Logback. If
        you also want to capture all of the web application logging events, read <xref linkend="example-logging-logback-centralized"/> for
        detailed instruction.</para>
      </note></para>
  </simplesect>
</section>
