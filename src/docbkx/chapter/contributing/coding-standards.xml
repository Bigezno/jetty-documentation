<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC '-//OASIS//DTD DocBook XML V5.0//EN'
'http://www.oasis-open.org/docbook/xml/5.0b5/dtd/docbook.dtd'
>
<section xml:id="coding-standards" version="5.0"
xmlns="http://docbook.org/ns/docbook"
xmlns:xlink="http://www.w3.org/1999/xlink"
xmlns:xi="http://www.w3.org/2001/XInclude"
xmlns:ns5="http://www.w3.org/2000/svg"
xmlns:ns4="http://www.w3.org/1998/Math/MathML"
xmlns:ns3="http://www.w3.org/1999/xhtml"
xmlns:db="http://docbook.org/ns/docbook">
  <title>Coding Standards</title>
  <para>Jetty uses number of conventions for its source code.</para>
  <section>
    <title>Code Formatting</title>
    <para>Jetty uses the code formatting the following project
    specifies.</para>
    <itemlizedlist>
      <listitem>
        <link
        xlink:href="http://git.eclipse.org/c/jetty/org.eclipse.jetty.admin.git/tree/jetty-eclipse-java-format.xml">http://git.eclipse.org/c/jetty/org.eclipse.jetty.admin.git/tree/jetty-eclipse-java-format.xml</link>
      </listitem>
      <section>
        <title>Code Templates</title>
        <para>Jetty specifies the following code templates for use by the
        project developers.</para>
        <itemlizedlist>
          <listitem>
            <link
            xlink:href="http://git.eclipse.org/c/jetty/org.eclipse.jetty.admin.git/tree/jetty-eclipse-codetemplates.xml">http://git.eclipse.org/c/jetty/org.eclipse.jetty.admin.git/tree/jetty-eclipse-codetemplates.xml</link>
          </listitem>
          <section>
            <title>Code Conventions</title>
            <para>The following is an example of the Java formatting and naming
            styles to apply to Jetty:</para>
            <informalexample>
              <programlisting language="java">
<![CDATA[
import some.exact.ClassName;      // GOOD
import some.wildcard.package.*;   // BAD!

package org.always.have.a.package;

/* --------------------------------------------------------- */
/** Always have some javadoc
 */
class MyClassName
{
    // indent by 4 spaces.
    // use spaced to indent
    // The code must format OK with default tabsize of 8.

    private static final int ALL_CAPS_FOR_PUBLIC_CONSTANTS=1;

    // Field prefixed with __ for static of _ for normal fields.
    // This convention is no longer mandatory, but any given
    // class should either consistently use this style or not.
    private static String __staticField;
    private Object _privateField;


    // use getters and setters rather than public fields.
    public void setPrivateField(Object privateField)
    {
        _privateField=privateField;
    }

    public Object getPrivateField()
    {
        return _privateField;
    }

    public void doSomething()
        throws SomeException
    {
        Object local_variable = _privateField;
        if (local_variable==null)
        {
             // do Something
        }
    }
}
]]>
              </programlisting>
            </informalexample>
          </section>
        </itemlizedlist>
      </section>
    </itemlizedlist>
  </section>
</section>
