<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0" xml:id="debugging-with-eclipse"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
    <title>Debugging With Eclipse</title>
    <para>
        There are a number of options available to debug your application in Eclipse.
    </para>
    <para>If not done already prepare your application for remote debugging as described here:
        <xref linkend="enable-remote-debugging"/>
    </para>
    <section>
        <title>Linking with Eclipse</title>
        <para>
            Next we need to link the Eclipse project with the deployed webapp.
        </para>
        <orderedlist>
            <listitem>
                <para>
                    Within Eclipse, right-click on the project containing the webapp deployed into jetty and select
                    <emphasis role="bold">Debug -> Debug Configurations</emphasis>
                    and create a new configuration of<emphasis role="bold">Remote Java Application</emphasis>. Make sure
                    the port you choose is the same as the one you added in <xref linkend="enable-remote-debugging"/>.
                </para>
                <mediaobject>
                    <info>
                        <othercredit>
                            <orgname>remote debug configuration in eclipse</orgname>
                        </othercredit>
                    </info>
                    <imageobject>
                        <imagedata align="center" fileref="images/debug-eclipse-1.png" format="PNG" width="6in"/>
                    </imageobject>
                </mediaobject>
            </listitem>
            <listitem>
                <para>
                    Next in your webapp you can set a breakpoint within a servlet which when it is tripped will halt the
                    remote jvm's processing thread to await for debugging commands from your Eclipse instance.
                </para>
                <mediaobject>
                    <info>
                        <othercredit>
                            <orgname>setting a breakpoint in eclipse</orgname>
                        </othercredit>
                    </info>
                    <imageobject>
                        <imagedata align="center" fileref="images/debug-eclipse-2.png" format="PNG" width="6in"/>
                    </imageobject>
                </mediaobject>
            </listitem>
            <listitem>
                <para>
                    Accessing that servlet within your browser, pointed at your remote debug configurated
                    jetty-distribution, should transition your Eclipse instance to the standard Debug view.
                </para>
                <mediaobject>
                    <info>
                        <othercredit>
                            <orgname>standard debug view against remote jetty distribution</orgname>
                        </othercredit>
                    </info>
                    <imageobject>
                        <imagedata align="center" fileref="images/debug-eclipse-3.png" format="PNG" width="6in"/>
                    </imageobject>
                </mediaobject>
            </listitem>
        </orderedlist>
    </section>
    <section xml:id="eclipse-within-eclipse">
        <title>Within Eclipse</title>
        <para>
            Since Jetty can be incredibly simple to embed, many people choose to create a small
            <code>main</code>
            method which they can launch directly within Eclipse in order to more easily debug their entire application.
            The best place to get started on this approach is to look through
            <xref linkend="embedding-jetty"/>
            and the
            <xref linkend="embedded-examples"/>
            sections.
        </para>
        <para>
            Once you have a main method defined in order to launch your application, right-click on the source file and
            select<emphasis role="bold">Debug As -> Java Application</emphasis>. In your
            <emphasis role="bold">Console</emphasis>
            tab within Eclipse you should see your application startup and once it has completed startup you should be
            able to configure breakpoints and hit the Jetty instance as normal via your web browser.
        </para>
        <tip>
            <title>Logging</title>
            <para>
                You can easily configure logging through a
                <filename>jetty-logging.properties</filename>
                file. If this file is on your classpath then Jetty will use it for configuring logging, we use this
                approach extensively throughout Jetty development and it makes life ever so much easier. You can see
                this in action in the
                <xref linkend="configuring-jetty-stderrlog"/>
                section.
            </para>
        </tip>
    </section>
</section>
