<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0" xml:id="setting-port80-access"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Setting Port 80 Access for a Non-Root User</title>

  <para>On Unix-based systems, port 80 is protected; typically only the
  superuser root can open it. For security reasons, it is not desirable to run
  the server as root. This page presents several options to access port 80 as
  a non-root user, including using ipchains, iptables, Jetty's SetUID feature,
  xinetd, and the Solaris 10 User Rights Management Framework.</para>

  <section xml:id="using-ipchains">
    <title>Using ipchains</title>

    <para>On some Linux systems you can use the <emphasis>ipchains
    REDIRECT</emphasis> mechanism to redirect from one port to another inside
    the kernel (if ipchains is not available, then usually iptables
    is):</para>

    <screen><![CDATA[# /sbin/ipchains -I input --proto TCP --dport 80 -j REDIRECT 8080]]></screen>

    <para>This command instructs the system as follows: "Insert into the
    kernel's packet filtering the following as the first rule to check on
    incoming packets: if the protocol is TCP and the destination port is 80,
    redirect the packet to port 8080". Be aware that your kernel must be
    compiled with support for ipchains (virtually all stock kernels are). You
    must also have the ipchains command-line utility installed. You can run
    this command at any time, preferably just once, since it inserts another
    copy of the rule every time you run it.</para>
  </section>

  <section xml:id="using-iptables">
    <title>Using iptables</title>

    <para>On many Linux systems you can use the iptables REDIRECT mechanism to
    redirect from one port to another inside the kernel (if iptables is not
    available, then usually ipchains is).</para>

    <para>You need to add something like the following to the startup scripts
    or your firewall rules:</para>

    <screen><![CDATA[# /sbin/iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080]]></screen>

    <para>The underlying model of iptables is different from ipchains, so the
    forwarding normally happens only to packets originating off-box. You also
    need to allow incoming packets to port 8080 if you use iptables as a local
    firewall.</para>

    <para>Be careful to place rules like this one early in your
    <emphasis>input</emphasis> chain. Such rules must precede any rule that
    accepts the packet, otherwise the redirection won't occur. You can insert
    as many rules as required if your server needs to listen on multiple
    ports, as for HTTPS.</para>
  </section>

  <section xml:id="configuring-jetty-setuid-feature">
    <title>Configuring Jetty's SetUID Feature</title>

    <para><link xl:href="http://en.wikipedia.org/wiki/Setuid">SetUID</link> is
    a technique that uses Unix-like file system access right to allow users to
    run an executable that would otherwise require higher privileges.</para>

    <para>Jetty's SetUID module allows you to run Jetty as a normal user even
    when you need to run Jetty on port 80 or 443. </para>

    <para>To use it with the jetty distribution:</para>

    <orderedlist>
      <listitem>
        <para>Ensure that you have the http.mod (and <link
        linkend="quickstart-starting-https">https.mod</link> if you are using
        SSL) <link linkend="startup-modules">modules enabled</link> for the
        <link linkend="creating-jetty-base">base</link> you are using. The
        http.mod is enabled by default in the distribution, while the <link
        linkend="quickstart-starting-https">https.mod</link> is only enabled
        in the <link linkend="demo-webapps-base">demo-base</link>
        directory.</para>
      </listitem>

      <listitem>
        <para>Ensure that you have <link
        linkend="quickstart-changing-jetty-port">changed the http port</link>
        to 80 (and <link linkend="quickstart-changing-https-port">changed the
        https port</link> to 443 if you are using SSL). </para>
      </listitem>

      <listitem>
        <para>Enable the setuid.mod module:</para>

        <para><screen><![CDATA[# java -jar start.jar --add-to-start=setuid]]></screen><note>
            <para>The --add-to-start command will enable the setuid module for
            this and all subsequent executions of jetty. There are other ways
            to enable the module, such as just for this execution. For more
            information on the alternatives see the section on <link
            linkend="startup-modules">Managing Startup Modules</link>.</para>
          </note></para>
      </listitem>

      <listitem>
        <para>Edit the configuration for the setuid module to substitute the
        userid and groupid of the user to switch to after starting. If you
        used the <code>--add-to-start</code> command, this configuration is in
        the <code>start.ini</code> file. If you used the
        <code>--add-to-startd</code> command instead, this configuration is in
        the <code>start.d/setuid.ini </code>file instead. Here are the lines
        to configure:</para>

        <para><informalexample>
            <programlisting language="text"><![CDATA[jetty.startServerAsPrivileged=false
jetty.username=foo
jetty.groupname=bar
jetty.umask=002
]]></programlisting>
          </informalexample><note>
            <para>As well as opening the connectors as root, you can also have
            jetty start the Server as root before changing to the non-root
            user.</para>
          </note></para>
      </listitem>

      <listitem>
        <para>You now need a native code library to do the user switching.
        This code is hosted as part of the Jetty ToolChain project and it is
        released independently from Jetty itself. You can find the source code
        <link
        xl:href="http://git.eclipse.org/gitroot/jetty/org.eclipse.jetty.toolchain.git">here</link>
        in the <link
        xl:href="http://git.eclipse.org/gitroot/jetty/org.eclipse.jetty.toolchain.git/jetty-setuid/">jetty-setuid</link>
        project. Build it locally, which will produce a native library
        appropriate for the operating system:</para>

        <para><screen><![CDATA[# mvn clean install]]></screen>If you built on
        a linux machine you will find the native library in
        <code>jetty-setuid/libsetuid-linux/target/libsetuid-linux.so</code>.
        If you built on a different operating system you will find the library
        in a different subdirectory, with the name containing the name of the
        operating system. You might like to copy this file into your jetty
        distribution's lib directory.</para>
      </listitem>

      <listitem>
        <para>Start jetty as the root user in your base directory, providing
        the location of the native library to java. Here's an example of how
        to do it on the command line, assuming were are in the <link
        linkend="demo-webapps-base">demo-base</link> directory:<screen><![CDATA[# sudo java -Djava.library.path=libsetuid-linux -jar ../start.jar]]></screen></para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="using-xinetd">
    <title>Using xinetd</title>

    <para>With modern Linux flavours, <code>inetd</code> has a newer, better
    big brother <emphasis><code>xinetd</code></emphasis>, that you can use to
    redirect network traffic. Since <code>xinetd</code> is driven by text
    files, all you need is a text editor. For detailed information, see <link
    xl:href="http://linux.die.net/man/5/xinetd.conf">http://linux.die.net/man/5/xinetd.conf</link>.</para>

    <para>There are two ways to give <code>xinetd</code> instructions:</para>

    <itemizedlist>
      <listitem>
        <para>Add a new service to <filename>etc/xinetd.conf</filename></para>
      </listitem>

      <listitem>
        <para>Add a new file to the directory
        <filename>etc/xinetd.d</filename></para>
      </listitem>
    </itemizedlist>

    <para>The format is the same; if you have a look at the file/directory,
    you will get the picture.</para>

    <para>The following entry redirects all inward TCP traffic on port 80 to
    port 8888 on the local machine. You can also redirect to other machines
    for gimp proxying:</para>

    <screen><![CDATA[service my_redirector
{
 type = UNLISTED
 disable = no
 socket_type = stream
 protocol = tcp
 user = root
 wait = no
 port = 80
 redirect = 127.0.0.1 8888
 log_type = FILE /tmp/somefile.log
}]]></screen>

    <section xml:id="caveats">
      <title>caveats</title>

      <para>Be aware of the following:</para>

      <itemizedlist>
        <listitem>
          <para>Include a space on either side of the '=' or it is
          ignored.</para>
        </listitem>

        <listitem>
          <para><code>type = UNLISTED</code> means that the name of the
          service does not have to be listed in
          <filename>/etc/services</filename>, but then you have to specify
          port and protocol. If you want to do use an existing service name,
          for example, http:</para>

          <screen><![CDATA[service http
{
 disable = no
 socket_type = stream
 user = root
 wait = no
 redirect = 127.0.0.1 8888
 log_type = FILE /tmp/somefile.log
}]]></screen>

          <para>Have a browse in <filename>/etc/services</filename> and it
          will all become clear.</para>
        </listitem>

        <listitem>
          <para>Logging might present certain security problems, so you might
          want to leave that out.</para>
        </listitem>
      </itemizedlist>

      <para><code>xinetd</code> is a hugely powerful and configurable system,
      so expect to do some reading.</para>
    </section>
  </section>

  <section xml:id="using-solaris10-user-rights-management-framework">
    <title>Using the Solaris 10 User Rights Management Framework</title>

    <para>Solaris 10 provides a User Rights Management framework that can
    permit users and processes superuser-like abilities:</para>

    <screen><![CDATA[usermod -K defaultpriv=basic,net_privaddr myself]]></screen>

    <para>Now the <code>myself</code> user can bind to port 80.</para>

    <para>Refer to the <link
    xl:href="http://docs.oracle.com/cd/E23823_01/html/816-4557/prbactm-1.html#scrolltoc">
    Solaris 10</link> and <link
    xl:href="http://docs.oracle.com/cd/E23824_01/html/821-1456/prbactm-1.html#scrolltoc">
    Solaris 11 Security Services documentation</link> for more
    information.</para>
  </section>
</section>
