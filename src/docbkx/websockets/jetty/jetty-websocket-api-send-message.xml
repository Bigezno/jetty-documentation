<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:id="jetty-websocket-api-send-message"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Send Messages to Remote Endpoint</title>

  <para>The most important feature of the Session is access to the <link
  xl:href="@JDURL@/org/eclipse/jetty/websocket/api/RemoteEndpoint.html"><classname>org.eclipse.jetty.websocket.api.RemoteEndpoint
  </classname></link>needed to send messages.</para>

  <para>With RemoteEndpoint you can choose to send TEXT or BINARY WebSocket
  messages, or the WebSocket PING and PONG control frames.</para>

  <section xml:id="blocking">
    <title>Blocking Send Message</title>

    <para>Most calls are blocking in nature, and will not return until the
    send has completed (or has thrown an exception).</para>

    <example>
      <title>Send Binary Message (Blocking)</title>

      <para><programlisting language="java"><![CDATA[RemoteEndpoint remote = session.getRemote();

// Blocking Send of a BINARY message to remote endpoint
ByteBuffer buf = ByteBuffer.wrap(new byte[] { 0x11, 0x22, 0x33, 0x44 });
try
{
    remote.sendBytes(buf);
}
catch (IOException e)
{
    e.printStackTrace(System.err);
}]]></programlisting></para>

      <para>How to send a simple Binary message using the RemoteEndpoint. This
      will block until the message is sent, possibly throwing an IOException
      if unable to send the message.</para>
    </example>

    <example>
      <title>Send Text Message (Blocking)</title>

      <para><programlisting language="java"><![CDATA[RemoteEndpoint remote = session.getRemote();

// Blocking Send of a TEXT message to remote endpoint
try
{
    remote.sendString("Hello World");
}
catch (IOException e)
{
    e.printStackTrace(System.err);
}]]></programlisting></para>

      <para>How to send a simple Text message using the RemoteEndpoint. This
      will block until the message is sent, possibly throwing an IOException
      if unable to send the message.</para>
    </example>
  </section>

  <section xml:id="partial">
    <title>Send Partial Message</title>

    <para>If you have a large message to send, and want to send it in pieces
    and parts, you can utilize the partial message sending methods of
    RemoteEndpoint. Just be sure you finish sending your message (<code>isLast
    == true</code>)</para>

    <example>
      <title>Send Partial Binary Message (Blocking)</title>

      <para><programlisting language="java"><![CDATA[RemoteEndpoint remote = session.getRemote();

// Blocking Send of a BINARY message to remote endpoint
// Part 1
ByteBuffer buf1 = ByteBuffer.wrap(new byte[] { 0x11, 0x22 });
// Part 2 (last part)
ByteBuffer buf2 = ByteBuffer.wrap(new byte[] { 0x33, 0x44 });
try
{
    remote.sendPartialBytes(buf1,false);
    remote.sendPartialBytes(buf2,true); // isLast is true
}
catch (IOException e)
{
    e.printStackTrace(System.err);
}]]></programlisting></para>

      <para>How to send a Binary message in 2 parts, using the partial message
      support in RemoteEndpoint. This will block until each part of the
      message is sent, possibly throwing an IOException if unable to send the
      partial message.</para>
    </example>

    <example>
      <title>Send Partial Text Message (Blocking)</title>

      <para><programlisting language="java"><![CDATA[RemoteEndpoint remote = session.getRemote();

// Blocking Send of a TEXT message to remote endpoint
String part1 = "Hello";
String part2 = " World";
try
{
    remote.sendPartialString(part1,false);
    remote.sendPartialString(part2,true); // last part
}
catch (IOException e)
{
    e.printStackTrace(System.err);
}]]></programlisting></para>

      <para>How to send a Text message in 2 parts, using the partial message
      support in RemoteEndpoint. This will block until each part of the
      message is sent, possibly throwing an IOException if unable to send the
      partial message.</para>
    </example>
  </section>

  <section xml:id="pingpong">
    <title>Send Ping / Pong Control Frame</title>

    <para>You can also send Ping and Pong control frames using the
    RemoteEndpoint.</para>

    <example>
      <title>Send Ping Control Frame (Blocking)</title>

      <para><programlisting language="java"><![CDATA[RemoteEndpoint remote = session.getRemote();

// Blocking Send of a PING to remote endpoint
String data = "You There?";
ByteBuffer payload = ByteBuffer.wrap(data.getBytes());
try
{
    remote.sendPing(payload);
}
catch (IOException e)
{
    e.printStackTrace(System.err);
}]]></programlisting></para>

      <para>How to send a Ping control frame, with a payload of <code>"You
      There?"</code> (arriving at Remote Endpoint as a byte array payload).
      This will block until the message is sent, possibly throwing an
      IOException if unable to send the ping frame.</para>
    </example>

    <example>
      <title>Send Pong Control Frame (Blocking)</title>

      <para><programlisting language="java"><![CDATA[RemoteEndpoint remote = session.getRemote();

// Blocking Send of a PONG to remote endpoint
String data = "Yup, I'm here";
ByteBuffer payload = ByteBuffer.wrap(data.getBytes());
try
{
    remote.sendPong(payload);
}
catch (IOException e)
{
    e.printStackTrace(System.err);
}]]></programlisting></para>

      <para>How to send a Pong control frame, with a payload of <code>"Yup I'm
      here"</code> (arriving at Remote Endpoint as a byte array payload). This
      will block until the message is sent, possibly throwing an IOException
      if unable to send the pong frame.</para>

      <para>To be correct in your usage of Pong frames, you should return the
      same byte array data that you received in the Ping frame</para>
    </example>
  </section>

  <section xml:id="async">
    <title>Async Send Message</title>

    <para>However there are also 2 Async send message methods
    available:</para>

    <itemizedlist>
      <listitem>
        <para><link
        xl:href="@JDURL@/org/eclipse/jetty/websocket/api/RemoteEndpoint.html#sendBytesByFuture(java.nio.ByteBuffer)"><code>RemoteEndpoint.sendBytesByFuture(ByteBuffer
        message)</code></link></para>
      </listitem>

      <listitem>
        <para><link
        xl:href="@JDURL@/org/eclipse/jetty/websocket/api/RemoteEndpoint.html#sendStringByFuture(java.lang.String)"><code>RemoteEndpoint.sendStringByFuture(String
        message)</code></link></para>
      </listitem>
    </itemizedlist>

    <para>Both return a <code>Future&lt;Void&gt;</code> that can be used to
    test for success and failure of the message send using standard <link
    xl:href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html"><classname>java.util.concurrent.Future</classname></link>
    behavior.</para>

    <example>
      <title>Send Binary Message (Async Simple)</title>

      <para><programlisting language="java"><![CDATA[RemoteEndpoint remote = session.getRemote();

// Async Send of a BINARY message to remote endpoint
ByteBuffer buf = ByteBuffer.wrap(new byte[] { 0x11, 0x22, 0x33, 0x44 });
remote.sendBytesByFuture(buf);]]></programlisting></para>

      <para>How to send a simple Binary message using the RemoteEndpoint. The
      message will be enqueued for outgoing write, but you will not know if it
      succeeded or failed.</para>
    </example>

    <example>
      <title>Send Binary Message (Async, Wait Till Success)</title>

      <para><programlisting language="java"><![CDATA[RemoteEndpoint remote = session.getRemote();

// Async Send of a BINARY message to remote endpoint
ByteBuffer buf = ByteBuffer.wrap(new byte[] { 0x11, 0x22, 0x33, 0x44 });
try
{
    Future<Void> fut = remote.sendBytesByFuture(buf);
    // wait for completion (forever)
    fut.get();
}
catch (ExecutionException | InterruptedException e)
{
    // Send failed
    e.printStackTrace();
}]]></programlisting></para>

      <para>How to send a simple Binary message using the RemoteEndpoint,
      tracking the <code>Future&lt;Void&gt;</code> to know if the send
      succeeded or failed.</para>
    </example>

    <example>
      <title>Send Binary Message (Async, timeout of send)</title>

      <para><programlisting language="java"><![CDATA[RemoteEndpoint remote = session.getRemote();

// Async Send of a BINARY message to remote endpoint
ByteBuffer buf = ByteBuffer.wrap(new byte[] { 0x11, 0x22, 0x33, 0x44 });
Future<Void> fut = null;
try
{
    fut = remote.sendBytesByFuture(buf);
    // wait for completion (timeout)
    fut.get(2,TimeUnit.SECONDS);
}
catch (ExecutionException | InterruptedException e)
{
    // Send failed
    e.printStackTrace();
}
catch (TimeoutException e)
{
    // timeout
    e.printStackTrace();
    if (fut != null)
    {
        // cancel the message
        fut.cancel(true);
    }
}]]></programlisting></para>

      <para>How to send a simple Binary message using the RemoteEndpoint,
      tracking the <code>Future&lt;Void&gt;</code> and waiting only prescribed
      amount of time for the send to complete, cancelling the message if the
      timeout occurs.</para>
    </example>

    <example>
      <title>Send Text Message (Async Simple)</title>

      <para><programlisting language="java"><![CDATA[RemoteEndpoint remote = session.getRemote();

// Async Send of a TEXT message to remote endpoint
remote.sendStringByFuture("Hello World");]]></programlisting></para>

      <para>How to send a simple Text message using the RemoteEndpoint. The
      message will be enqueued for outgoing write, but you will not know if it
      succeeded or failed.</para>
    </example>

    <example>
      <title>Send Text Message (Async, Wait Till Success)</title>

      <para><programlisting language="java"><![CDATA[RemoteEndpoint remote = session.getRemote();

// Async Send of a TEXT message to remote endpoint
try
{
    Future<Void> fut = remote.sendStringByFuture("Hello World");
    // wait for completion (forever)
    fut.get();
}
catch (ExecutionException | InterruptedException e)
{
    // Send failed
    e.printStackTrace();
}]]></programlisting></para>

      <para>How to send a simple Binary message using the RemoteEndpoint,
      tracking the <code>Future&lt;Void&gt;</code> to know if the send
      succeeded or failed.</para>
    </example>

    <example>
      <title>Send Text Message (Async, timeout of send)</title>

      <para><programlisting language="java"><![CDATA[RemoteEndpoint remote = session.getRemote();

// Async Send of a TEXT message to remote endpoint
Future<Void> fut = null;
try
{
    fut = remote.sendStringByFuture("Hello World");
    // wait for completion (timeout)
    fut.get(2,TimeUnit.SECONDS);
}
catch (ExecutionException | InterruptedException e)
{
    // Send failed
    e.printStackTrace();
}
catch (TimeoutException e)
{
    // timeout
    e.printStackTrace();
    if (fut != null)
    {
        // cancel the message
        fut.cancel(true);
    }
}]]></programlisting></para>

      <para>How to send a simple Binary message using the RemoteEndpoint,
      tracking the <code>Future&lt;Void&gt;</code> and waiting only prescribed
      amount of time for the send to complete, cancelling the message if the
      timeout occurs.</para>
    </example>
  </section>
</section>
