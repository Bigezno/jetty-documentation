<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0" xml:id="debugging-with-intellij"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
    <title>Debugging With IntelliJ</title>
    <para>
        There are a number of options available to debug your application in IntelliJ.
    </para>
    <para>If not done already prepare your application for remote debugging as described here:
        <xref linkend="enable-remote-debugging"/>
    </para>
    <section>
        <title>Linking with IntelliJ</title>
        <para>
            Next we need to link the IntelliJ project with the deployed webapp.
        </para>
        <orderedlist>
            <listitem>
                <para>
                    Within IntelliJ, open the project containing the webapp deployed into jetty that you want to
                    debug. Select<emphasis role="bold">Run -> Edit Configurations</emphasis>.
                    Add a new configuration by clicking the "+" icon. Choose <emphasis role="bold">Remote</emphasis>.
                    Make sure the port you choose is the same as the one you added
                    in <xref linkend="enable-remote-debugging"/>.
                </para>
                <mediaobject>
                    <info>
                        <othercredit>
                            <orgname>add remote debug configuration in IntelliJ</orgname>
                        </othercredit>
                    </info>
                    <imageobject>
                        <imagedata align="center" fileref="images/intellij_new_remote_config.png" format="PNG"
                                   width="800px"/>
                    </imageobject>
                </mediaobject>
            </listitem>
            <listitem>
                <para>
                    Next in your webapp you can set a breakpoint within a servlet which when it is tripped will halt the
                    remote jvm's processing thread to await for debugging commands from your IntelliJ instance. To
                    set a breakpoint, simply open the servlet or any other class you want to debug and click left to
                    the line you want to set the breakpoint at (where the red dot is on the next screenshot). The
                    red dot and red background on the line mark the breakpoint.
                </para>
                <mediaobject>
                    <info>
                        <othercredit>
                            <orgname>setting a breakpoint in IntelliJ</orgname>
                        </othercredit>
                    </info>
                    <imageobject>
                        <imagedata align="center" fileref="images/intellij_set_breakpoint.png" format="PNG"
                                   width="800px"/>
                    </imageobject>
                </mediaobject>
            </listitem>
            <listitem>
                <para>
                    Accessing that servlet within your browser, pointed at your remote debug configurated
                    jetty-distribution, should transition your IntelliJ instance to the standard debugger view.
                </para>
                <mediaobject>
                    <info>
                        <othercredit>
                            <orgname>standard debugger view against remote jetty distribution</orgname>
                        </othercredit>
                    </info>
                    <imageobject>
                        <imagedata align="center" fileref="images/intellij_debug_view.png" format="PNG" width="800px"/>
                    </imageobject>
                </mediaobject>
            </listitem>
        </orderedlist>
    </section>
    <section xml:id="intellij-within-intellij">
        <title>Within IntelliJ</title>
        <para>
            Since Jetty can be incredibly simple to embed, many people choose to create a small
            <code>main</code>
            method which they can launch directly within IntelliJ in order to more easily debug their entire
            application.
            The best place to get started on this approach is to look through
            <xref linkend="embedding-jetty"/>
            and the
            <xref linkend="embedded-examples"/>
            sections.
        </para>
        <para>
            Once you have a main method defined in order to launch your application, open the source file and
            right-click the main method. Select
            <emphasis role="bold">Debug</emphasis>
            or simply hit CTRL+SHIFT+D. In your
            <emphasis role="bold">Console</emphasis>
            tab within IntelliJ you should see your application startup and once it has completed startup you should be
            able to configure breakpoints and hit the Jetty instance as normal via your web browser. The same thing
            works for unit tests. Instead of the main method run debug on the test method you want to debug.
        </para>
        <mediaobject>
            <info>
                <othercredit>
                    <orgname>start debugging from an embedded jetty or unit test</orgname>
                </othercredit>
            </info>
            <imageobject>
                <imagedata align="center" fileref="images/intellij_select_debug.png" format="PNG" width="800px"/>
            </imageobject>
        </mediaobject>
        <para>Debugging in IntelliJ is extremely powerful. For example it's possible to have conditional
            breakpoints that only trigger a break if the configured conditions are met. Have a look at the
            various tutorials in the internet or the
            <link
                    xl:href="http://www.jetbrains.com/idea/webhelp/getting-help.html">IntelliJ documentation
            </link>
            for further details.
        </para>
        <tip>
            <title>Logging</title>
            <para>
                You can easily configure logging through a
                <filename>jetty-logging.properties</filename>
                file. If this file is on your classpath then Jetty will use it for configuring logging, we use this
                approach extensively throughout Jetty development and it makes life ever so much easier. You can see
                this in action in the
                <xref linkend="configuring-jetty-stderrlog"/>
                section.
            </para>
        </tip>
    </section>
</section>
