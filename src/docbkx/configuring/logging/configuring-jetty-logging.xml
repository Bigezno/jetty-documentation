<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="configuring-jetty-logging"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Configuring Jetty Logging</title>

  <para>Jetty provides logging via its own
  <code>org.eclipse.jetty.util.log.Logger</code> layer, and does not natively
  use any existing Java logging framework. The Jetty Logging framework may
  delegate logs to a 3rd party logging framework (eg SLF4J) or use its own
  StdErrLog. All logging events, produced via the Jetty logging layer, have a
  name, a level, and a message. The name is a FQCN (fully qualified class
  name) similar to how all existing Java logging frameworks operate.</para>

  <para>Jetty logging, however, has a slightly different set of levels that it
  uses internally:</para>

  <itemizedlist>
    <listitem>
      <para>WARN–For events serious enough to inform and log, but not
      fatal.</para>
    </listitem>

    <listitem>
      <para>INFO–Informational events.</para>
    </listitem>

    <listitem>
      <para>DEBUG–Debugging events (very noisy).</para>
    </listitem>

    <listitem>
      <para>IGNORE–Exception events that you can safely ignore, but useful for
      some people. You might see this level as DEBUG under some Java logging
      framework configurations, where its retain the
      <emphasis>ignore</emphasis> phrase somewhere in the logging).</para>
    </listitem>
  </itemizedlist>

  <note>
    <para>Jetty Logging produces no FATAL or SEVERE events.</para>
  </note>

  <section xml:id="selecting-log-framework">
    <title>Selecting the Log Framework</title>

    <para>Configure the Jetty logging layer via the
    <code>org.eclipse.jetty.util.log.Log</code> class, following <link
    xl:href="http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/tree/jetty-util/src/main/java/org/eclipse/jetty/util/log/Log.java">these
    rules</link>.</para>

    <orderedlist>
      <listitem>
        <para>Load Properties</para>

        <itemizedlist>
          <listitem>
            <para>First from a Classpath Resource called
            <code>jetty-logging.properties</code> (if found).</para>
          </listitem>

          <listitem>
            <para>Then from the <code>System.getProperties()</code>.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Determine the Log implementation.</para>

        <itemizedlist>
          <listitem>
            <para>If property <code>org.eclipse.jetty.util.log.class</code> is
            defined, load the class it defines as the Logger implementation
            from the server classpath.</para>
          </listitem>

          <listitem>
            <para>If the class <code>org.slf4j.Logger</code> exists in server
            classpath, the Jetty implementation becomes
            <code>org.eclipse.jetty.util.log.Slf4jLog</code>.</para>
          </listitem>

          <listitem>
            <para>If no logger implementation is specified, default to
            <code>org.eclipse.jetty.util.log.StdErrLog</code>.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </orderedlist>

    <note>
      <para>You can create your own custom logging by providing an
      implementation of the <link
      xl:href="http://download.eclipse.org/jetty/stable-7/apidocs/org/eclipse/jetty/util/log/Logger.html">Jetty
      Logger API</link>. For an example of a custom Logger, see <link
      xl:href="http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/tree/jetty-util/src/main/java/org/eclipse/jetty/util/log/JavaUtilLog.java">JavaUtilLog.java</link>.</para>
    </note>
  </section>

  <section xml:id="configuring-jetty-stderrlog">
    <title>Configuring Jetty StdErrLog</title>

    <para>If you select the default Jetty logger, you can use further System
    properties and <filename>jetty-logging.property</filename> entries to
    control event levels to log and the format of those logs:</para>

    <table>
      <title>Understanding JSP Parameters</title>

      <tgroup cols="2">
        <thead>
          <row>
            <entry align="left">Logging Property</entry>

            <entry align="left">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><code>&lt;name&gt;.LEVEL=&lt;level&gt;</code></entry>

            <entry>Sets the logging level for all loggers within the
            <code>name</code> specified to the level, which can be (in
            increasing order of restriction) ALL, DEBUG, INFO, WARN, OFF. The
            name (or hierarchy) can be a specific fully qualified class or a
            package namespace, for example,
            <code>-Dorg.eclipse.jetty.http.LEVEL=DEBUG</code> is a package
            namespace approach to turn all loggers in the jetty HTTP package
            to DEBUG level, and
            <code>-Dorg.eclipse.jetty.io.ChanelEndPoint.LEVEL=ALL</code> turns
            on all logging events for the specific class, including DEBUG,
            INFO, WARN (and even special internally ignored exception casses).
            If more than one system property specifies a logging level, the
            most specific one applies.</entry>
          </row>

          <row>
            <entry><code>&lt;name&gt;.SOURCE=&lt;boolean&gt;</code></entry>

            <entry>Logger specific, attempts to print the Java source file
            name and line number from where the logging event originated. Name
            must be a fully qualified class name (package name hierarchy is
            not supported by this configurable). Default is false. Be aware
            that this is a slow operation and has an impact on
            performance!</entry>
          </row>

          <row>
            <entry><code>&lt;name&gt;.STACKS=&lt;boolean&gt;</code></entry>

            <entry>Logger specific, controls the display of stacktraces. Name
            must be a fully qualified class name (package name hierarchy is
            not supported by this configurable). Default is true.</entry>
          </row>

          <row>
            <entry><code>org.eclipse.jetty.util.log.IGNORED=&lt;boolean&gt;</code></entry>

            <entry>If set to true, exceptions that have been recorded as
            ignored with the <code>LOG.ignore(throwable)</code> API are logged
            with a full stack trace. Otherwise ignored exceptions are either
            not logged, or logged in summary if the level is debug.</entry>
          </row>

          <row>
            <entry><code>org.eclipse.jetty.util.log.stderr.SOURCE=&lt;boolean&gt;</code></entry>

            <entry>Special Global Configuration. Attempts to print the Java
            source file name and line number from where the logging event
            originated. Default is false.</entry>
          </row>

          <row>
            <entry><code>org.eclipse.jetty.util.log.stderr.LONG=&lt;boolean&gt;</code></entry>

            <entry>Special Global Configuration. When true, outputs logging
            events to STDERR using long form, fully qualified class names.
            When false, uses abbreviated package names. Default is
            false.</entry>
          </row>

          <row>
            <entry><para><code>org.eclipse.jetty.util.log.DEBUG</code></para><para><code>org.eclipse.jetty.util.log.stderr.DEBUG</code></para><para><code>DEBUG</code></para></entry>

            <entry>DEPRECATED: These are deprecated properties that are
            ignored with a warning if used.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section xml:id="changing-log-level-system-properties">
      <title>Changing log level with System Properties</title>

      <informalexample>
        <programlisting language="robots">
java -Dorg.eclipse.jetty.LEVEL=INFO -Dorg.eclipse.jetty.websocket.LEVEL=DEBUG -jar start.jar
      </programlisting>
      </informalexample>
    </section>

    <section xml:id="changing-log-level-resources-jetty-logging-properties">
      <title>Changing log level in
      <code>resources/jetty-logging.properties</code></title>

      <informalexample>
        <programlisting language="robots">
&lt;!--Set up logging implementation --&gt;
org.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.StdErrLog
org.eclipse.jetty.LEVEL=INFO

&lt;!-- Make websocket more verbose for testing --&gt;
org.eclipse.jetty.websocket.LEVEL=DEBUG
      </programlisting>
      </informalexample>
    </section>

    <section xml:id="changing-log-level-etc-jetty.xml">
      <title>Changing log level in <code>etc/jetty.xml</code></title>

      <informalexample>
        <programlisting language="xml">
&lt;Call class="org.eclipse.jetty.util.log.Log" name="getRootLogger"&gt;
  &lt;Call name="setDebugEnabled"&gt;
    &lt;Arg type="boolean"&gt;true&lt;/Arg&gt;
  &lt;/Call&gt;
&lt;/Call&gt;
      </programlisting>
      </informalexample>
    </section>

    <section xml:id="using-etc-jetty-logging.xml">
      <title>Using <code>etc/jetty-logging.xml</code></title>

      <para>You can use <filename>etc/jetty-logging.xml</filename> to take all
      <code>System.out</code> and <code>System.err</code> output (from any
      source) and route it to a rolling log file. To do so, include
      <filename>etc/jetty-logging.xml</filename> on Jetty startup.</para>

      <informalexample>
        <programlisting language="bash">
java -jar start.jar etc/jetty-logging.xml
 </programlisting>
      </informalexample>
    </section>

    <section xml:id="request-logging">
      <title>Request Logging</title>

      <para>Request logging (also called access logging), refers to the
      logging of each request the server handles. This is a different logging
      mechanism, and in Jetty is provided with an implementation of the
      well-established NCSA log file format. This log file format is
      standardized so that other tooling can use the information for other
      reasons.</para>

      <para>To enable access logging with Jetty, include the
      <filename>etc/jetty-requestlog.xml</filename> on Jetty startup.</para>

      <para>See <xref linkend="configuring-jetty-request-logs"/> for more
      information.</para>
    </section>
  </section>
</section>
