<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="configuring-jetty-logging"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Configuring Jetty Logging</title>

  <para>Jetty provides logging via its own
  <code>org.eclipse.jetty.util.log.Logger</code> layer, and does not natively
  use any existing Java logging framework. All logging events, produced via
  the Jetty logging layer, have a name, a level, and a message. The name is a
  FQCN (fully qualified class name) similar to how all existing Java logging
  frameworks operate.</para>

  <para>Jetty logging, however, has a slightly different set of levels that it
  uses internally:</para>

  <variablelist>
    <varlistentry>
      <term>WARN</term>

      <listitem>
        <para>For events serious enough to inform and log, but not
        fatal.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>INFO</term>

      <listitem>
        <para>Informational events.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>DEBUG</term>

      <listitem>
        <para>Debugging events (very noisy)</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>IGNORE</term>

      <listitem>
        <para>Exception events that you can safely ignore, but useful for some
        people. You might see this level as DEBUG under some Java logging
        framework configurations, where its retain the
        <emphasis>ignore</emphasis> phrase somewhere in the logging).</para>
      </listitem>
    </varlistentry>
  </variablelist>

  <note>
    <para>Jetty Logging produces no FATAL or SEVERE events.</para>
  </note>

  <section xml:id="selecting-log-framework">
    <title>Selecting the Log Framework</title>

    <para>Configure the Jetty logging layer via the
    <code>org.eclipse.jetty.util.log.Log</code> class, following <link
    xl:href="http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/tree/jetty-util/src/main/java/org/eclipse/jetty/util/log/Log.java">these
    rules</link>.</para>

    <orderedlist>
      <listitem>
        <para>Load Properties</para>

        <itemizedlist>
          <listitem>
            <para>First from a Classpath Resource called
            <code>jetty-logging.properties</code> (if found).</para>
          </listitem>

          <listitem>
            <para>Then from the <code>System.getProperties()</code>.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Determine the Log implementation.</para>

        <itemizedlist>
          <listitem>
            <para>If property <code>org.eclipse.jetty.util.log.class</code> is
            defined, load the class it defines as the Logger implementation
            from the server classpath.</para>
          </listitem>

          <listitem>
            <para>If the class <code>org.slf4j.Logger</code> exists in server
            classpath, the Jetty implementation becomes
            <code>org.eclipse.jetty.util.log.Slf4jLog</code>.</para>
          </listitem>

          <listitem>
            <para>If no logger implementation is specified, default to
            <code>org.eclipse.jetty.util.log.StdErrLog</code>.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </orderedlist>

    <note>
      <para>You can create your own custom logging by providing an
      implementation of the <link
      xl:href="http://download.eclipse.org/jetty/stable-7/apidocs/org/eclipse/jetty/util/log/Logger.html">Jetty
      Logger API</link>. For an example of a custom Logger, see <link
      xl:href="http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/tree/jetty-util/src/main/java/org/eclipse/jetty/util/log/JavaUtilLog.java">JavaUtilLog.java</link>.</para>
    </note>
  </section>

  <section xml:id="configuring-jetty-stderrlog">
    <title>Configuring Jetty StdErrLog</title>

    <para>If you select the default Jetty logger (StdErrLog), you can then use
    further properties (either as System properties or in a
    jetty-logging.properties as outlined in <xref
    linkend="selecting-log-framework"/>) to control event levels to log and to
    adjust the format of those logs.</para>

    <para><variablelist>
        <varlistentry>
          <term><code>&lt;name&gt;.LEVEL=&lt;level&gt;</code></term>

          <listitem>
            <para>Sets the logging level for all loggers within the
            <literal>name</literal> specified to the level, which can be (in
            increasing order of restriction) ALL, DEBUG, INFO, WARN, OFF. The
            name (or hierarchy) can be a specific fully qualified class or a
            package namespace, for example,
            <code>-Dorg.eclipse.jetty.http.LEVEL=DEBUG</code> is a package
            namespace approach to turn all loggers in the jetty HTTP package
            to DEBUG level, and
            <code>-Dorg.eclipse.jetty.io.ChanelEndPoint.LEVEL=ALL</code> turns
            on all logging events for the specific class, including DEBUG,
            INFO, WARN (and even special internally ignored exception
            classes). If more than one system property specifies a logging
            level, the most specific one applies.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>&lt;name&gt;.SOURCE=&lt;boolean&gt;</code></term>

          <listitem>
            <para>Named Logger specific, attempts to print the Java source
            file name and line number from where the logging event originated.
            Name must be a fully qualified class name (package name hierarchy
            is not supported by this configurable). Default is false. Be aware
            that this is a slow operation and has an impact on
            performance!</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>&lt;name&gt;.STACKS=&lt;boolean&gt;</code></term>

          <listitem>
            <para>Named Logger specific, controls the display of stacktraces.
            Name must be a fully qualified class name (package name hierarchy
            is not supported by this configurable). Default is true.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>org.eclipse.jetty.util.log.stderr.SOURCE=&lt;boolean&gt;</code></term>

          <listitem>
            <para>Special Global Configuration. Attempts to print the Java
            source file name and line number from where the logging event
            originated. Default is false.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>org.eclipse.jetty.util.log.stderr.LONG=&lt;boolean&gt;</code></term>

          <listitem>
            <para>Special Global Configuration. When true, outputs logging
            events to STDERR using long form, fully qualified class names.
            When false, uses abbreviated package names. Default is
            false.</para>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <para>Deprecated Parameters:</para>

    <para><variablelist>
        <varlistentry>
          <term><code>org.eclipse.jetty.util.log.DEBUG</code></term>

          <listitem>
            <para>Formerly used to enable DEBUG level logging on any logger
            used within Jetty (not just Jetty's own logger).</para>

            <para>Replaced with using the logger implementation specific
            configuration and level filtering.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>org.eclipse.jetty.util.log.stderr.DEBUG</code></term>

          <listitem>
            <para>Formerly used to enable DEBUG level logging on the internal
            Jetty StdErrLog implementation.</para>

            <para>Replaced with
            <code>-Dorg.eclipse.jetty.LEVEL=DEBUG</code></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>DEBUG</code></term>

          <listitem>
            <para>Ancient debugging flag that turned on all debugging, even
            non-logging debugging. </para>

            <para>No longer used by jetty as this overly simplified property
            name is used by many 3rd party libraries and would generate far
            too much console output.</para>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <section xml:id="changing-log-level-resources-jetty-logging-properties">
      <title>Changing log level in
      <code>resources/jetty-logging.properties</code></title>

      <programlisting language="properties"><![CDATA[# Set up logging implementation
org.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.StdErrLog
org.eclipse.jetty.LEVEL=INFO
# Make websocket more verbose for testing
org.eclipse.jetty.websocket.LEVEL=DEBUG]]></programlisting>

      <para>This sets the Logging Implementation to StdErrLog.</para>

      <para>Configures the logging level for
      "<literal>org.eclipse.jetty</literal>" to be
      <literal>INFO</literal></para>

      <para>Configures the logging level for
      "<literal>org.eclipse.jetty.websocket</literal>" to be
      <literal>DEBUG</literal></para>
    </section>

    <section xml:id="changing-log-level-etc-jetty.xml">
      <title>Changing log level in <code>etc/jetty.xml</code></title>

      <informalexample>
        <programlisting language="xml"><![CDATA[<Call class="org.eclipse.jetty.util.log.Log" name="getRootLogger">
  <Call name="setDebugEnabled">
    <Arg type="boolean">true</Arg>
  </Call>
</Call>      ]]></programlisting>

        <para>This technique, from older versions of Jetty, is used to
        configure all of the StdErrLog loggers (no other implementations
        support this) to be logging at DEBUG level.</para>
      </informalexample>
    </section>

    <section xml:id="using-etc-jetty-logging.xml">
      <title>Using <code>etc/jetty-logging.xml</code></title>

      <para>You can use <filename>etc/jetty-logging.xml</filename> to take all
      <code>System.out</code> and <code>System.err</code> output (from any
      source) and route it to a rolling log file. To do so, include
      <filename>etc/jetty-logging.xml</filename> on Jetty startup.</para>

      <informalexample>
        <screen language="bash"><![CDATA[$ java -jar start.jar etc/jetty-logging.xml      ]]></screen>
      </informalexample>
    </section>
  </section>
</section>
