<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0" xml:id="embedded-secured-hello-handler"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Secured Hello Handler</title>
  <para>
    This example shows how to wrap one handler with another one that handles security.  We have a simple Hello Handler that just return a greeting but add on the restriction that to get this greeting you must authenticate.  Another thing to remember is that this example uses the ConstraintSecurityHandler which is what supports the security mappings inside of the servlet api, it could be easier to show just the SecurityHandler usage, but the constraint provides more configuration power.  If you don't need that you can drop the Constaint bits and use just the SecurityHandler.
  </para>
  <example>
    <title><link xl:href="@GITURL@/examples/embedded/src/main/java/org/eclipse/jetty/embedded/SecuredHelloHandler.java">SecuredHelloHandler.java</link></title> 
  <programlisting language="rjava">
    <filename>
      @GITURL@/examples/embedded/src/main/java/org/eclipse/jetty/embedded/SecuredHelloHandler.java
    </filename>
  </programlisting>
  </example>
  <section>
    <title>Walkthrough</title>
    <variablelist>
      <varlistentry>
        <term>Line 17: Create Server Object</term>
        <listitem>
          <para>
            Create a basic jetty server object that will listen on port 8080.  Note that if you set this to port 0 then a randomly available port will be assigned that you can either look in the logs for the port, or programmatically obtain it for use in test cases.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Lines 18, 19: Login Service</term>
        <listitem>
          <para>
            Since this example is for our test webapp, we need to setup a LoginService so this shows how to create a very simple hashmap based one.  The name of the LoginService needs to correspond to what is configured a webapp's <filename>web.xml</filename> and since it has a lifecycle of its own we register it as a bean with the Jetty server object so it can be started and stopped according to the lifecycle of the server itself.  In this example the name can be whatever you like since we are not dealing with webapp realms.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Lines 20 - 21: Configure ConstraintSecurityHandler</term>
        <listitem>
          <para>
            A security handler is a jetty handler that secures content behind a particular portion of a url space.  The ConstraintSecurityHandler is a more specialized handler that allows matching of urls to different constraints.  The server sets this as the first handler in the chain, effectively applying these constraints to all subsequent handlers in the chain.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Lines 22 - 25: Configure a Constraint</term>
        <listitem>
          <para>
            This constraint requires authentication and in addition that an authenticated user be a member of a given set of roles for authorization purposes.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Lines 26 - 28: Configure a ConstraintMapping</term>
        <listitem>
          <para>
            Binds a url pattern with the previously created constraint.  The roles for this constraing mapping are mined from the Constraint itself although methods exist to declare and bind roles separately as well.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Lines 29 - 32: Configure the ConstraintSecurityManager</term>
        <listitem>
          <para>
            First you see the constraint mapping being applied to the handler as a singleton list, however you can passing in as many security constraint mappings as you like so long as they follow the mapping requirements of the servlet api.  Next we set a BasicAuthenticator instance which is the object that actually checks the credentials followed by the LoginService which is the store of known users, etc.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Lines 33, 34: Create Happy Hello Handler</term>
        <listitem>
          <para>
            The Hello Handler is the handler we are securing so we create one, and then set it as the handler on the <emphasis>security</emphasis> handler to complain the simple handler chain.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Lines 35 - 36: Start Server</term>
        <listitem>
          <para>
            Start things up!  By using the server.join() the server thread will join with the current thread.  See
            <link xl:href="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Thread.html#join()">Thread.join()</link>
          for more details.
        </para>
      </listitem>
    </varlistentry>
    </variablelist>
    <para>
      After you have started things up you should be able to navigate to http://localhost:8080/index.html (assuming one is in the resource base directory) and you are good to go.
    </para>
  </section>
  <section>
    <title>The Realm Properties File</title>
    <informalexample>
      <programlisting language="rproperties">
        <filename>
          @GITURL@/examples/embedded/src/test/resources/realm.properties
        </filename>
      </programlisting>
    </informalexample>
  </section>
  <section>
    <title>Maven Coordinates</title>
    <para>
      To use this example in your project you will need the following maven dependencies declared.
    </para>
    <informalexample>
      <programlisting language="xml">
<![CDATA[
<dependency>
  <groupId>org.eclipse.jetty</groupId>
  <artifactId>jetty-server</artifactId>
  <version>${project.version}</version>
</dependency>
]]>
      </programlisting>
    </informalexample>
  </section>
</section>
