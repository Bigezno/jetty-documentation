<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="using-jetty-jndi" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
    <title>Working with Jetty JNDI</title>

    <section>
      <title>Defining in the web.xml</title>
    <para>You can configure naming resources to reference in a
    <code>web.xml</code> file and access from within the
    <code>java:comp/env</code> naming environment of the webapp during
    execution. Specifically, you can configure support for the following
    <code>web.xml</code> elements:</para>

    <informalexample>
      <programlisting language="xml">
<![CDATA[
<env-entry/>
<resource-ref/>
<resource-env-ref/>
]]>
      </programlisting>
    </informalexample>

    <para><link linkend="configuring-jndi-env-entries">Configuring
    env-entries</link> shows you how to set up overrides for <code>
    env-entry</code> elements in <filename>web.xml</filename>, while <link
    linkend="configuring-resource-refs-and-resource-env-refs">Configuring
    resource-refs and resource-env-refs</link> discusses how to configure
    support resources such as <code>javax.sql.DataSource</code>.</para>

    <para>You can also plug a JTA
    <code>javax.transaction.UserTransaction</code> implementation into Jetty
    so that webapps can look up <code>java:comp/UserTransaction</code> to
    obtain a distributed transaction manager: see <link
    linkend="configuring-jndi-xa-transactions">Configuring XA
    Transactions</link>.</para>
  </section>
  
  <section xml:id="defining-jndi-naming-entries">
    <title>Declaring Resources</title>

      <para>You must declare the objects you want bound into the Jetty
      environment so that you can then hook into your webapp via env-entry,
      resource-ref and resource-env-refs in web.xml. You create these bindings
      by using declarations of the following types:</para>

      <variablelist>
        <varlistentry>
          <term><code>org.eclipse.jetty.plus.jndi.EnvEntry</code></term>
          <listitem>
            <para>for <code>env-entry</code> type of entries</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>org.eclipse.jetty.plus.jndi.Resource</code></term>
          <listitem>
            <para>for all other type of resources</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>org.eclipse.jetty.plus.jndi.Transaction</code></term>
          <listitem>
            <para>for a JTA manager</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code>org.eclipse.jetty.plus.jndi.Link</code></term>
          <listitem>
            <para>for link between a <filename>web.xml</filename> resource name and a naming entry</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Declarations of each of these types follow the same general pattern:</para>

      <informalexample>
        <programlisting language="xml">
<![CDATA[
<New class="org.eclipse.jetty.plus.jndi.xxxx">
  <Arg><!-- scope --></Arg>
  <Arg><!-- name --></Arg>
  <Arg><!-- value --></Arg>
</New>
]]>
        </programlisting>
      </informalexample>

      <para>These declarations can generally be placed into three different
      files, depending on your needs and the <link
      linkend="jndi-name-scope">scope</link> of the resources being
      declared.</para>
    </section>
      <section xml:id="jndi-where-to-declare">
        <title>Where to Declare Resources?</title>

        <para>You can define naming resources in three places:</para>

        <variablelist>
          <varlistentry>
            <term>jetty.xml</term>

            <listitem>
              <para>Naming resources defined in a
              <filename>jetty.xml</filename> file are <link
              linkend="jndi-name-scope">scoped</link> at either the JVM level
              or the Server level. Note that the classes for the resource must
              be visible at the Jetty container level. If the classes for the
              resource only exist inside your webapp, it must be declared in a
              WEB-INF/jetty-env.xml file.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>WEB-INF/jetty-env.xml</term>

            <listitem>
              <para>Naming resources in a
              <filename>WEB-INF/jetty-env.xml</filename> file are <link
              linkend="jndi-name-scope">scoped</link> to the web app in which
              the file resides. While you can enter JVM or Server scopes if
              you choose, we do not recommend doing so. The resources defined
              here may use classes from inside your webapp.  Note that this is
              a Jetty specific mechanism.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>context xml file</term>

            <listitem>
              <para>Entries in a context xml file should be <link
              linkend="jndi-name-scope">scoped</link> at the level of the
              webapp to which they apply, although you can supply a less
              strict scoping level of Server or JVM if you choose. As with
              resources declared in a jetty.xml file, classes associated with
              the resource must be visible on the container's classpath.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="jndi-name-scope">
        <title>Scope of Resource Names</title>

        <para>Naming resources within Jetty belong to one of three different
        scopes, in increasing order of restrictiveness:</para>

        <variablelist>
          <varlistentry>
            <term>JVM scope</term>

            <listitem>
              <para>the name will be unique across the JVM instance, and is
              visible to all application code. This scope is represented by a
              <code>null</code> first parameter to the resource declaration. 
              For Example:</para>

              <informalexample>
                <programlisting language="xml">
<![CDATA[
<New id="cf" class="org.eclipse.jetty.plus.jndi.Resource">
  <Arg></Arg>  <!-- empty arg -->
  <Arg>jms/connectionFactory</Arg>
  <Arg>
    <New class="org.apache.activemq.ActiveMQConnectionFactory">
       <Arg>vm://localhost?broker.persistent=false</Arg>
    </New>
  </Arg>
</New>
]]>
                </programlisting>
              </informalexample>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Server scope</term>

            <listitem>
              <para>the name will be unique to a Server instance, and is only
              visible to code associated with that instance. This scope is
              represented by referencing the Server instance as the first
              parameter to the resource declaration. For example:</para>

              <informalexample>
                <programlisting language="xml">
<![CDATA[
<Configure id="Server" class="org.eclipse.jetty.Server">
  <New id="cf" class="org.eclipse.jetty.plus.jndi.Resource">
    <Arg><Ref refid="Server"/></Arg>  <!-- reference to Server instance -->
    <Arg>jms/connectionFactory</Arg>
    <Arg>
      <New class="org.apache.activemq.ActiveMQConnectionFactory">
        <Arg>vm://localhost?broker.persistent=false</Arg>
      </New>
    </Arg>
  </New>
</Configure>
]]>
                </programlisting>
              </informalexample>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Webapp scope</term>

            <listitem>
              <para>the name will be unique to the WebAppContext instance, and
              is only visible to code associated with that instance. This
              scope is represented by referencing the WebAppContext instance
              as the first parameter to the resource declaration. 
              For example:</para>

              <informalexample>
                <programlisting language="xml">
<![CDATA[
<Configure id='wac' class="org.eclipse.jetty.webapp.WebAppContext">
  <New id="cf" class="org.eclipse.jetty.plus.jndi.Resource">
    <Arg><Ref refid='wac'/></Arg> <!-- reference to WebAppContext -->
    <Arg>jms/connectionFactory</Arg>
    <Arg>
      <New class="org.apache.activemq.ActiveMQConnectionFactory">
        <Arg>vm://localhost?broker.persistent=false</Arg>
      </New>
    </Arg>
  </New>
</Configure>
]]>
                </programlisting>
              </informalexample>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section xml:id="binding-objects-into-jetty-jndi">
        <title>What Can Be Bound as a Resource?</title>

        <para>You can bind four types of objects into a Jetty JNDI reference:</para>

        <itemizedlist>
          <listitem>
            <para>An ordinary POJO instance.</para>
          </listitem>

          <listitem>
            <para>A <link
            xl:href="http://docs.oracle.com/javase/1.5.0/docs/api/javax/naming/Reference.html">
            javax.naming.Reference</link> instance.</para>
          </listitem>

          <listitem>
            <para>An object instance that implements the <link
            xl:href="http://docs.oracle.com/javase/1.5.0/docs/api/javax/naming/Referenceable.html">
            javax.naming.Referenceable</link> interface.</para>
          </listitem>

          <listitem>
            <para>A link between a name as referenced in
            <filename>web.xml</filename> and as referenced in the Jetty
            environment.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>