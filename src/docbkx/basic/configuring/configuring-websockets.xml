<?xml version="1.0" encoding="utf-8"?>
<section xml:id="configuring-websockets" version="5.0" xmlns="http://docbook.org/ns/docbook"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xl="http://www.w3.org/1999/xlink"
xmlns:xi="http://www.w3.org/2001/XInclude"
xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">
  <title>Configuring WebSockets</title>
  <para>The <link xl:href="http://en.wikipedia.org/wiki/WebSockets">WebSockets</link>  protocol and API is an
  emerging standard that seeks to provide high-quality, bidirectional communication between a browser (or other web
  client) and a server. The goal is to eventually replace Comet techniques like long polling. Jetty has supported the
  various WebSocket drafts in the 7.x and 8.x releases.</para>
  <section xml:id="you-do-not-want-to-do-this">
    <title>You don&#8217;t want to do this!</title>
    <para>This document shows you how to use WebSockets from the levels closest to the machine; it targets framework
    developers who want to use WebSockets, and application developers who can't stand not knowing what is under the
    hood. However, application programmers should not follow these examples to build an application. WebSockets is not
    a silver bullet, and on its own will never be simple to use for nontrivial applications (see <link
    xl:href="http://webtide.intalio.com/2011/04/is-websocket-chat-simpler">Is WebSocket Chat Simpler?</link> ). We
    recommend that you look toward frameworks like <link xl:href="http://cometd.org">Cometd</link>, that provide a
    higher level of abstraction, hide the technicalities, and allow you to use either Comet long polling or WebSockets
    transparently.</para>
  </section>
  <section xml:id="test-client-and-server">
    <title>Test Client and Server</title>
    <para>The simplest way to get started is to download three Jars: The Jetty aggregate Jar that contains all of
    Jetty; the jetty-websocket test Jar that contains a client and server; and the servlet Jar. You can do this using a
    browser or with the following command line <code>wgets:</code></para>
    <informalexample>
      <programlisting language="bash">
<![CDATA[

wget -O jetty-all.jar --user-agent=demo \
  http://repo2.maven.org/maven2/org/eclipse/jetty/aggregate/jetty-all/7.6.2.v20120308/jetty-all-7.6.2.v20120308.jar
wget -O jetty-websocket-tests.jar --user-agent=demo \
  http://repo2.maven.org/maven2/org/eclipse/jetty/jetty-websocket/7.6.2.v20120308/jetty-websocket-7.6.2.v20120308-tests.jar
wget --user-agent=demo \
    http://repo2.maven.org/maven2/javax/servlet/servlet-api/2.5/servlet-api-2.5.jar
]]>
      </programlisting>
    </informalexample>
    <para>To run a simple test server (use <code>&#8211;help</code> to see more options):</para>
    <informalexample>
      <programlisting language="java">
<![CDATA[

 java -cp jetty-websocket-tests.jar:jetty-all.jar:servlet-api-2.5.jar \
   org.eclipse.jetty.websocket.TestServer \
   --port 8080 \
   --docroot . \
   --verbose
]]>
      </programlisting>
    </informalexample>
    <para>You can test the server with the test client (use <code>&#8211;help</code> to see more options):</para>
    <informalexample>
      <programlisting language="java">
<![CDATA[
 java -cp jetty-websocket-tests.jar:jetty-all.jar:servlet-api-2.5.jar \
   org.eclipse.jetty.websocket.TestClient \
   --port 8080 \
   --protocol echo

]]>
      </programlisting>
    </informalexample>
    <para>The output from the test client is similar to ping. You can use the options you discover by using <code>
    &#8211;help</code> to try out different types of tests, including fragmentation and aggregation of WebSocket
    frames.</para>
  </section>
  <section xml:id="using-browser">
    <title>Using a Browser</title>
    <para>Using a Java client is not compelling unless you want to write a desktop application that uses WebSocket (a
    viable idea). But most WebSocket users want to use the browser as a client. So point your browser at the TestServer
    at http://localhost:8080.</para>
    <para>The WebSocket TestServer also runs an HTTP file server at the directory given by <code>&#8211;docroot</code>,
    so in this case you should see in the browser a listing of the directory in which you ran the test server.</para>
    <para>To turn the browser into a WebSocket client, you need to serve some HTML and Javascript that executes in the
    browser and talks back to the server using Websockets.</para>
    <itemizedlist>
      <listitem>
        <para>Create the file <filename>index.html</filename> in the same directory you ran the server from.</para>
      </listitem>
      <listitem>
        <para>Put into it the following contents which you can download from <link
        xl:href="http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/plain/jetty-websocket/src/test/webapp/index.html">jetty-websocket/src/test/webapp/index.html.</link> &gt;This
        index file contains the HTML, CSS and Javascript for a basic chat room.</para>
      </listitem>
    </itemizedlist>
    <para>You should now be able to point your browser(s) at the test server, see a chat room, and join it. If your
    browser does not support WebSockets, you&#8217;ll receive a warning.</para>
  </section>
  <section xml:id="understanding-how-client-works">
    <title>Understanding How the Client Works</title>
    <para>The initial HTML view has a prompt for a user name. When a you enter a name, the system calls the <code>
    join</code> method, which creates the WebSocket to the server. The URI for the WebSocket derives from the
    document's location. Call back functions are registered for open, message and close events. The <code>
    org.ietf.websocket.test-echo-broadcast</code> subprotocol is specified as this echoes all received messages to all
    other broadcast connections, providing the semantic a chat room requires:</para>
    <informalexample>
      <programlisting language="java">
<![CDATA[
 java -cp je
join: function(name) {
  this._username=name;
  var location = document.location.toString().replace('http://','ws://').replace('https://','wss://');
  this._ws=new WebSocket(location,"org.ietf.websocket.test-echo-broadcast");
  this._ws.onopen=this._onopen;
  this._ws.onmessage=this._onmessage;
  this._ws.onclose=this._onclose;
},
]]>
      </programlisting>
    </informalexample>
    <para>When the WebSocket successfully connects to the server, it calls the <code>onopen</code> callback, which
    changes the appearance of the chat room to prompt for a chat message. It also sends a message saying the user has
    joined the room:</para>
    <informalexample>
      <programlisting language="java">
<![CDATA[
_onopen: function(){
  $('join').className='hidden';
  $('joined').className='';
  $('phrase').focus();
  room._send(room._username,'has joined!');
},
]]>
      </programlisting>
    </informalexample>
    <para>To send a message, you format a string as <code>username:chat text</code> and then call the WebSocket <code>
    send</code> method:</para>
    <informalexample>
      <programlisting language="java">
<![CDATA[

_send: function(user,message){
  user=user.replace(':','_');
  if (this._ws)
    this._ws.send(user+':'+message);
},
 
chat: function(text) {
  if (text != null &amp;&amp; text.length&gt;0 )
     room._send(room._username,text);
},
]]>
      </programlisting>
    </informalexample>
    <para>When the browser receives a WebSocket message over the connection, the system calls the <code>
    onmessage</code> callback with a message object. The Jetty implementation looks for the username and colon, strips
    out any markup, and then appends the message to the chat room:</para>
    <informalexample>
      <programlisting language="java">
<![CDATA[
_onmessage: function(m) {
  if (m.data){
    var c=m.data.indexOf(':');
    var from=m.data.substring(0,c).replace('&lt;','&lt;').replace('&gt;','&gt;');
    var text=m.data.substring(c+1).replace('&lt;','&lt;').replace('&gt;','&gt;');
    var chat=$('chat');
    var spanFrom = document.createElement('span');
    spanFrom.className='from';
    spanFrom.innerHTML=from+': ';
    var spanText = document.createElement('span');
    spanText.className='text';
    spanText.innerHTML=text;
    var lineBreak = document.createElement('br');
    chat.appendChild(spanFrom);
    chat.appendChild(spanText);
    chat.appendChild(lineBreak);
    chat.scrollTop = chat.scrollHeight - chat.clientHeight;
  }
},
]]>
      </programlisting>
    </informalexample>
    <para>If the server closes the connection, or if the browser times it out, then the <code>onclose</code> callback
    is called. This nulls out the chat room and reverts to the starting position:</para>
    <informalexample>
      <programlisting language="java">
<![CDATA[
 onclose: function(m) {
  this._ws=null;
  $('join').className='';
  $('joined').className='hidden';
  $('username').focus();
  $('chat').innerHTML='';
}
]]>
      </programlisting>
    </informalexample>
  </section>
  <section xml:id="understanding-how-server-works">
    <title>Understanding How the Server Works</title>
    <para>The <link
    xl:href="http://dev.eclipse.org/svnroot/rt/org.eclipse.jetty/jetty/tags/jetty-7.4.0.v20110414/jetty-websocket/src/main/java/org/eclipse/jetty/websocket/">TestServer.java
    server side code</link> for this chat room uses an embedded Jetty server and is written against the Jetty
    WebSocket APIs that are not part of the WebSocket standard. There is not yet even a proposed standard for
    serverside WebSocket APIs, but it is a topic for consideration with the servlet 3.1 JSR.</para>
    <para>The test server is an extension of an <link xl:href="http://wiki.eclipse.org/Jetty/Tutorial/Embedding_Jetty">
    embedded Jetty server</link>, and the constructor adds a <link
    xl:href="http://download.eclipse.org/jetty/7.4.0.v20110414/xref/org/eclipse/jetty/server/nio/SelectChannelConnector.html">connector</link> at
    the required port, creates a <link
    xl:href="http://download.eclipse.org/jetty/7.4.0.v20110414/xref/org/eclipse/jetty/websocket/WebSocketHandler.html">
    WebSocketHandler</link> and a <link
    xl:href="http://download.eclipse.org/jetty/7.4.0.v20110414/xref/org/eclipse/jetty/server/handler/ResourceHandler.html">ResourceHandler"</link> and
    chains them together:</para>
    <informalexample>
      <programlisting language="java">
<![CDATA[
 public TestServer(int port)
{
    _connector = new SelectChannelConnector();
    _connector.setPort(port);
    addConnector(_connector);
 
    _wsHandler = new WebSocketHandler()
    {
        public WebSocket doWebSocketConnect(HttpServletRequest request, String protocol)
        {
            ...
            return _websocket;
        }
    };
    setHandler(_wsHandler);
 
    _rHandler=new ResourceHandler();
    _rHandler.setDirectoriesListed(true);
    _rHandler.setResourceBase(_docroot);
    _wsHandler.setHandler(_rHandler);
}

]]>
      </programlisting>
    </informalexample>
    <para>The resource handler is responsible for serving the static content like HTML and Javascript. The
    WebSocketHandler looks for WebSocket handshake requests and handles them by calling the <code>
    doWebSocketConnect</code> method, which we have extended to create a WebSocket depending on the sub protocol
    passed:</para>
    <informalexample>
      <programlisting language="java">
<![CDATA[

_wsHandler = new WebSocketHandler()
{
    public WebSocket doWebSocketConnect(HttpServletRequest request, String protocol)
    {
        if ("org.ietf.websocket.test-echo".equals(protocol) || "echo".equals(protocol) || "lws-mirror-protocol".equals(protocol))
            _websocket = new TestEchoWebSocket();
        else if ("org.ietf.websocket.test-echo-broadcast".equals(protocol))
            _websocket = new TestEchoBroadcastWebSocket();
        else if ("org.ietf.websocket.test-echo-assemble".equals(protocol))
            _websocket = new TestEchoAssembleWebSocket();
        else if ("org.ietf.websocket.test-echo-fragment".equals(protocol))
            _websocket = new TestEchoFragmentWebSocket();
        else if (protocol==null)
            _websocket = new TestWebSocket();
        return _websocket;
    }
};

]]>
      </programlisting>
    </informalexample>
    <para>A simplification of the test <link
    xl:href="http://download.eclipse.org/jetty/7.4.0.v20110414/xref/org/eclipse/jetty/websocket/WebSocket.html">
    WebSocket</link> from the test server follows. It excludes the shared code for the other protocols supported.
    Like the Javascript API, there is an <code>onOpen, onClose</code> and <code>onMessage</code> callback. The <code>
    onOpen</code> callback is passed in a <link
    xl:href="http://download.eclipse.org/jetty/7.4.0.v20110414/xref/org/eclipse/jetty/websocket/WebSocket.html#107">
    Connection</link> instance that sends messages. The implementation of <code>onOpen</code> adds the WebSocket
    to a collection of all known WebSockets, and <code>onClose</code> removes the WebSocket. The implementation of
    <code>onMessage</code> is to simply iterate through that collection and to send the received message to each
    WebSocket:</para>
    <informalexample>
      <programlisting language="java">
<![CDATA[
ConcurrentLinkedQueue _broadcast =
    new ConcurrentLinkedQueue();
class TestEchoBroadcastWebSocket implements WebSocket.OnTextMessage
{
    protected Connection _connection;
 
    public void onOpen(Connection connection)
    {
        _connection=connection;
        _broadcast.add(this);
    }
    public void onClose(int code,String message)
    {
        _broadcast.remove(this);
    }
    public void onMessage(final String data)
    {
        for (TestEchoBroadcastWebSocket ws : _broadcast)
        {
            try
            {
                ws._connection.sendMessage(data);
            }
            catch (IOException e)
            {
                _broadcast.remove(ws);
                e.printStackTrace();
            }
        }
    }
}
]]>
      </programlisting>
    </informalexample>
  </section>
  <section xml:id="Don't-do-it">
    <title>Don&#8217;t do it this way!</title>
    <para>Now you know the basics of how WebSockets work, we repeat the warning that you should not do it this
    way&#8211;unless you are a framework developer. Even then, you probably want to use the <link
    xl:href="@JDURL@/org/eclipse/jetty/websocket/WebSocketServlet.html">WebSocketServlet</link> and a non
    embedded Jetty, but the basic concepts are the same. The strength of the Jetty solution is that it terminates both
    WebSocket connections and HTTP requests in the same environment, so that mixed frameworks and applications are easy
    to create.</para>
    <para>Application developers should really look to a framework like <link xl:href="http://cometd.org">
    Cometd</link> rather than directly coding to WebSockets themselves. It is not that the mechanics of
    WebSockets are hard, just that they don&#8217;t solve all of the problems that you encounter in a real world Comet
    application.</para>
  </section>
  <section xml:id="additional-resources">
    <title>Additional Resources</title>
    <para>
      <link xl:href="http://wiki.eclipse.org/Jetty_WTP_Plugin/Jetty_WTP_Websocket_Wizard">Using the WTP WebSocket
      Wizard</link>
    </para>
  </section>
</section>
