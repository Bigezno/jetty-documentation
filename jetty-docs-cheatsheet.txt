<?xml version="1.0" encoding="utf-8"?>
<section xml:id="jetty-docs-cheatsheet" version="5.0"
xmlns="http://docbook.org/ns/docbook"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:xl="http://www.w3.org/1999/xlink"
xmlns:xi="http://www.w3.org/2001/XInclude"
xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">
<title>Jetty Docs Cheatsheet</title>
<para> This cheatsheet provides information about tags and other elements to use when creating Jetty documentation with DocBook.</para>
<section xml:id="making-links">
<title>Making Links</title>
<para>There are several kinds of links:</para>
<itemizedlist>
<listitem>Links to external docs: <link xl:href="http://google.com">Google</link></listitem>
<listitem>Cross references to docs within the project, and to sections of docs within the same document: <xref linkend="id_of_another_element" /></listitem>
<listitem>Cross references to Jetty API and xrefs:
<para> Using @JDURL@ to make a link to the <code>ContextProvider</code> API:</para>
<link
    xl:href="@JDURL@/org/eclipse/jetty/deploy/providers/ContextProvider.html">
      <code>ContextProvider API</code>
    </link>
<para> Using @JXURL@ to make a link to the <code>ContextProvider</code> xref:</para>
<link
    xl:href="@JXURL@/org/eclipse/jetty/deploy/providers/ContextProvider.html">
      <code>ContextProvider xref</code>
    </link>
    </listitem>
    <para>Notice that you can embed paragraphs and other elements, even tables and code samples, within list items.</para>
<section xml:id="creating-ids-to-use-in-links">
<title><Creating IDs to Use in Links</title>
<para> Create section ids like this: <section xml:id="name-of-section"</para>
<para> Assign an id to each section in the doc, beginning with the second line at the very top of the document, where you are pulling in all of the CSS info. The convention is to use the title of the section; use lower case, with dashes between words, and eliminate articles. For examples, look at the xml:ids in this doc.</para>
</section>
</section>
<section xml:id="using-comments-in-docs">
<title>Using Comments in the Docs</title>
<para>Use the examples that follow when you want to comment out a section of a doc. In general, you need to comment out each section or element you want to suppress, for example, see the itemized list, section, and CDATA elements in the examples.</para>

<!--itemizedlist>
      <listitem>
        <para>Create the server</para>
      </listitem>
      <listitem>
        <para>Add and configure Connectors</para>
      </listitem>
      <listitem>
        <para>Add and configure Handlers</para>
      </listitem>
      <listitem>
        <para>Add and configure Servlets then add to Handlers</para>
      </listitem>
      <listitem>
        <para>Start the server</para>
      </listitem>
      <listitem>
        <para>Wait (or join the server to prevent main exiting)</para>
      </listitem>
    </itemizedlist--> 
<!--section>
    <title>Creating the Server</title>
    <para>The following code from SimplestServer.java instantiates and runs the
    simplest possible Jetty server:</para>
    <informalexample>
      <programlisting language="java">
<![CDATA[
   public class SimplestServer
   {
     public static void main(String[] args) throws Exception
     {
       Server server = new Server(8080);
       server.start();
       server.join();
     }
   }
]]>
      </programlisting>
    </informalexample>
    <para>This runs an HTTP server on port 8080. It is not a very useful server
    as it has no handlers and thus returns a 404 error for every
    request.</para>
  </section-->
<!--section>
    <title>Writing Handlers</title>
    <para>To produce a response to a request, Jetty requires a Handler to be
    set on the server. A handler may:</para>
    <itemizedlist>
      <listitem>
        <para>Examine/modify the HTTP request.</para>
      </listitem>
      <listitem>
        <para>Generate the complete HTTP response.</para>
      </listitem>
      <listitem>
        <para>Call another Handler (see HandlerWrapper).</para>
      </listitem>
      <listitem>
        <para>Select one or many Handlers to call (see
        HandlerCollection).</para>
      </listitem>
    </itemizedlist>
    <section>
      <title>Hello World Handler</title>
      <para>The following code based on HelloHandler.java shows a simple hello
      world handler:</para>
      <informalexample>
        <programlisting language="java">
<![CDATA[
  public class HelloHandler extends AbstractHandler
  {
    public void handle(String target,Request baseRequest,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException
    {
      response.setContentType("text/html;charset=utf-8");
      response.setStatus(HttpServletResponse.SC_OK);
      baseRequest.setHandled(true);
      response.getWriter().println("&lt;h1&gt;Hello World&lt;/h1&gt;");
    }
  }
        ]]>
        </programlisting>
      </informalexample>
      <para>The parameters passed to the handle method are:</para>
      <itemizedlist>
        <listitem>
          <para>target - the target of the request, which is either a URI or a
          name from a named dispatcher.</para>
        </listitem>
        <listitem>
          <para>baseRequest - the Jetty mutable request object, which is always
          unwrapped.</para>
        </listitem>
        <listitem>
          <para>request - the immutable request object, which might have been
          wrapped.</para>
        </listitem>
        <listitem>
          <para>response - the response, which might have been wrapped.</para>
        </listitem>
      </itemizedlist>
      <para>The handler sets the response status, content-type and marks the
      request as handled before it generates the body of the response using a
      writer.</para>
      <para>The following code from OneHandler.java shows how a Jetty server
      can use this handler:</para>
      <informalexample>
        <programlisting language="java">
<![CDATA[
  public static void main(String[] args) throws Exception
  {
    Server server = new Server(8080);
    server.setHandler(new HelloHandler());
    server.start();
    server.join();
  }
  ]]>
        </programlisting>
      </informalexample>
      <para>You now know everything you need to know to write an HTTP server
      based on Jetty. However, complex request handling is typically built from
      multiple Handlers. We will look in later sections at how you can combine
      handlers like aspects. You can see some of the handlers available in
      Jetty in the
      <link
      xl:href="@JXURL@/org/eclipse/jetty/server/handler/package-summary.html">
      org.eclipse.jetty.server.handler</link>package.</para>
    </section>
  </section-->
<section xml:id="making-lists">
  <title>Making Lists</title>
  <para>You make bulleted lists and numbered lists as follows.</para>
  <section xml:id="bulleted-lists"> 
  <title>Bulleted Lists</title>
  <para> Use the <itemizedlist> and <listitem> tags to make bulleted lists. See the lists in sections above for examples.</para>
  </section>
  <section xml:id="numbered-lists"> 
  <title>Numbered Lists>
  <para>One way to make a numbered list is to use the <orderedlist> and <listitem> tags. Here is an example:</para>
  <orderedlist>
  <listitem>First item</listitem>&#8211;Appears as 1. First item.</listitem>
  <listitem>Second item&#8211;Appears as 2. Second item.</listitem>
  </orderedlist>
  <note>Use an n-dash to connect an item and explanatory text. Enter "&#8211;" without the quotation marks to create an n-dash. Do you think we should put a space before and after the dash?</note>
  <para>You can also make a numbered list by using the procedure and step tags:</para>
    <procedure>
      <step>
        <title>Creating the Server</title>
        <para>The following code from <code>SimplestServer.java</code>&nbsp; instantiates and runs
        the simplest possible Jetty server:</para>
        <informalexample>
          <programlisting language="java">
<![CDATA[
   public class SimplestServer
   {
     public static void main(String[] args) throws Exception
     {
       Server server = new Server(8080);
       server.start();
       server.join();
     }
   }
]]>
   <section xml:id="variable-lists">
    <title>Variable Lists</title>
    <para>An example of a variable list follows:</para>
    <variablelist>
      <varlistentry>
        <term>chapters</term>
        <listitem>
          <para>defined in jetty.xml</para>
        </listitem>
        <listitem>
          <para>use xi:include to bring in individual chapters</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para> To see how this looks when published, see //TODO xref//
  </section>
  <section>
  <title>Making Tables</title>
  <para>TBD</para>
  </section>
  <section>
  <title>Code Samples</title>
  <para>TBD</para>
  </section>
  <section>
  <title>Code Inline</title>
  <para> Here are examples of how you can represent code inline:</para>
  <itemizedlist>
  <listitem><classname>java.util.List</classname></listitem>
  <listitem><code>List.add</code></listitem>
  <listitem><varname>cometd</varname></listitem>
  <listitem><filename>/a/path</filename></listitem>
  <listitem><application>mvn</application></listitem>
  <listitem><productname>Jetty</productname>
  
  <note>When you use these tags within a paragraph, to have a space between the inline code and the next word, type "&nbsp;" without the quotation marks. You don't have to do this if a punctuation mark immediately follows the inline code.</note>
  </section>
  <section>
 <title>Admonitions</title>
  <listitem><para>Admonitions available include:</para>
  <listitem><tip></listitem>
  <listitem><note></listitem>
  <listitem><important></listitem>
  <listitem><caution></listitem>
  <listitem><warning></listitem>
  <para>See the note immediately above this section for an example.</para>
  </section>
