<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="jndi-detailed-setup" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
    <title>Detailed Setup</title>

    <para>The following sections describe the finer points of configuring JNDI in Jetty.</para>

    <section xml:id="jndi-setting-up-list-of-configurations">
      <title>Setting Up the List of Configurations</title>

      <para>When deploying a webapp, Jetty has an extensible list of <link
      xl:href="@JDURL@/org/eclipse/jetty/webapp/Configuration.html">configurations</link>
      that it applies to the webapp in a specific order. These configurations
      do things like parse the <filename>web.xml</filename>, set up the classpath
      for the webapp, and parse jetty specific <filename>WEB-INF/jetty-web.xml</filename> files.</para>

      <para>To use JNDI with Jetty, you need additional attributes that do
      things like read <filename> WEB-INF/jetty-env.xml</filename>, set up a
      <code>java:comp/env context</code>, and hook up JNDI entries from the
      environment into your webapp. The list below shows the two extra
      elements and the order you must use when you add them:</para>

      <informalexample>
        <programlisting language="xml">
<![CDATA[
<Array id="plusConfig" type="java.lang.String">
  <Item>org.eclipse.jetty.webapp.WebInfConfiguration</Item>
  <Item>org.eclipse.jetty.webapp.WebXmlConfiguration</Item>
  <Item>org.eclipse.jetty.webapp.MetaInfConfiguration</Item>
  <Item>org.eclipse.jetty.webapp.FragmentConfiguration</Item>
  <Item>org.eclipse.jetty.plus.webapp.EnvConfiguration</Item>     <!-- add for jndi -->
  <Item>org.eclipse.jetty.plus.webapp.PlusConfiguration</Item>    <!-- add for jndi -->
  <Item>org.eclipse.jetty.webapp.JettyWebXmlConfiguration</Item>
</Array>
]]>
        </programlisting>
      </informalexample>

      <para>This augmented list of Configurations for JNDI is predefined for
      you in the <code> etc/jetty-plus.xml</code> file. The <link
      linkend="jndi-quick-setup">Quick Setup</link> section shows you how to enable
      it. Note: the <code>etc/jetty-plus.xml</code> file will enable it for
      <emphasis role="bold">all</emphasis> webapps. The file also contains
      other (commented out) alternatives for enabling JNDI with webapps, such
      as creating a separate deployer just for deploying JNDI-enabled
      webapps.</para>

      <para>Now skip down to <link
      linkend="adding-jndi-implementation-jars-to-jetty-classpath">Adding JNDI
      Implementation Jars to the Jetty Classpath</link> if you want to use
      JNDI with all webapps. If you only want to use JNDI with specific
      webapps, read on.</para>
    </section>

    <section xml:id="applying-jndi-to-single-webapp">
      <title>Enabling JNDI for a Single WebApp</title>

      <para>If you have only a few webapps that you want to use with JNDI, you
      can apply the augmented list of configurations specifically to those
      webapps. To do that, create a context xml file for each webapp, and set
      up the configuration classes. Here's an example of how that should
      look:</para>

      <informalexample>
        <programlisting language="xml">
<![CDATA[
<Configure id='wac' class="org.eclipse.jetty.webapp.WebAppContext">
  <Array id="plusConfig" type="java.lang.String">
    <Item>org.eclipse.jetty.webapp.WebInfConfiguration</Item>
    <Item>org.eclipse.jetty.webapp.WebXmlConfiguration</Item>
    <Item>org.eclipse.jetty.webapp.MetaInfConfiguration</Item>
    <Item>org.eclipse.jetty.webapp.FragmentConfiguration</Item>
    <Item>org.eclipse.jetty.plus.webapp.EnvConfiguration</Item>     <!-- add for JNDI -->
    <Item>org.eclipse.jetty.plus.webapp.PlusConfiguration</Item>    <!-- add for JNDI -->
    <Item>org.eclipse.jetty.webapp.JettyWebXmlConfiguration</Item>
  </Array>

  <Set name="war"><SystemProperty name="jetty.home" default="."/>/webapps/my-cool-webapp</Set>
  <Set name="configurationClasses"><Ref refid="plusConfig"/></Set>
</Configure>
]]>
        </programlisting>
      </informalexample>
    </section>
        <section>
      <title>Enabling JNDI for a Deployer</title>

      <para>Another alternative to enabling JNDI for all webapps (see <link
      linkend="jetty-quick-start">Quick Start</link>), or just individual webapps
      (see <link linkend="applying-jndi-to-single-webapp">Enabling JNDI for a
      Single WebApp</link>) is to create a specific Deployer instance that
      will enable JNDI for all weabpps it deploys. That way, you can <link
      linkend="jndi-setting-up-list-of-configurations">setup</link> the
      configurations once, and they will be applied to every webapp you drop
      into the nominated directory - that way you keep your JNDI enabled
      webapps separate from the non-JNDI enabled webapps. The
      <code>etc/jetty-plus.xml</code> file has an example of this (commented
      out):</para>

      <informalexample>
        <programlisting language="xml">
<![CDATA[  
  <!-- =========================================================== -->
  <!-- Apply plusConfig to all webapps in webapps-plus             -->
  <!-- =========================================================== -->
  <!-- Uncomment the following to set up a deployer that will      -->
  <!-- deploy webapps from a directory called webapps-plus. Note   -->
  <!-- that you will need to create this directory first!          -->
  <Ref refid="DeploymentManager">
      <Call name="addAppProvider">
        <Arg>
          <New class="org.eclipse.jetty.deploy.providers.WebAppProvider">
            <Set name="monitoredDirName"><Property name="jetty.home" default="." />/webapps-plus</Set>
            <Set name="defaultsDescriptor"><Property name="jetty.home" default="."/>/etc/webdefault.xml</Set>
            <Set name="scanInterval">5</Set>
            <Set name="parentLoaderPriority">false</Set>
            <Set name="extractWars">true</Set>
            <Set name="configurationClasses"><Ref refid="plusConfig"/></Set>
          </New>
        </Arg>
      </Call>
  </Ref>
]]>
        </programlisting>
      </informalexample>

      <para>The above creates a new deployer that looks for things to deploy
      in the <code>webapps-plus</code> directory and sets up the JNDI
      configurations for them.</para>

      <note>
        <para>If you do this, you will need to either supply the
        <code>etc/jetty-plus.xml</code> file last on the runline, or move it
        to after the <code>etc/jetty-deploy.xml</code> file reference in
        start.ini. This is because this section of the
        <code>etc/jetty-plus.xml</code> file refers to the DeploymentManager,
        which is created in the <code>etc/jetty-deploy.xm</code> file.</para>
      </note>
    </section>

    <section xml:id="adding-jndi-implementation-jars-to-jetty-classpath">
      <title>Adding JNDI Implementation Jars to the Jetty Classpath</title>

      <para>Now that you have the JNDI configuration for the webapp/s set up,
      you need to ensure that the JNDI implementation jars are on the Jetty
      classpath. These jars are optional, so are not there by default. You add
      these into the classpath by using startup time OPTIONS.</para>

      <para>In the <link linkend="jndi-quick-start">Quick Start</link> section, we
      showed you how to use start.ini to accomplish this in a permanent
      fashion.</para>

      <para>Instead, you can supply the "plus" OPTION on the command line so
      it is valid for that run only. Here's how you would do it:</para>

      <informalexample>
        <screen>
<![CDATA[
$ java -jar start.jar OPTIONS=plus
]]>
        </screen>
      </informalexample>

      <para>Note: if you haven't set up the Configurations that enable JNDI
      for individual webapps, you will need to use the
      <code>etc/jetty-plus.xml</code> file, which you can also do on the
      runline:</para>

      <informalexample>
        <screen>
<![CDATA[
$ java -jar start.jar OPTIONS=plus etc/jetty-plus.xml
]]>
        </screen>
      </informalexample>
    </section>
  </section>