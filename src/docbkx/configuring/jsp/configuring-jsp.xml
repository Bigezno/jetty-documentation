<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="jsp-support" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Configuring JSP</title>

  <para>This document provides information about configuring Java Server Pages
  for Jetty.</para>

  <section>
    <title>Which JSP Implementation</title>

    <para>From jetty-9.2 onwards, we are using Jasper from <link
    xl:href="http://tomcat.apache.org/tomcat-8.0-doc/jasper-howto.html">Apache</link>
    as the default JSP container implementation. In previous versions we used
    Jasper from <link xl:href="http://jsp.java.net">Glassfish</link>, and if
    you wish to, you can continue to do so. </para>

    <para>The jetty-distribution by default enables the jsp <link
    linkend="startup-modules">module</link>, and by default, this <link
    linkend="startup-modules">module</link> is set to Apache Jasper. To change
    to use Glassfish Jasper instead, edit the
    <filename>$JETTY_HOME/start.d/jsp.mod</filename> file and change the line
    indicated:</para>

    <programlisting language="text"><![CDATA[#
# Jetty JSP Module
#

[depend]
servlet
jsp-impl/${jsp-impl}-jsp

[ini-template]
# JSP Configuration

# Select JSP implementation, choices are
#   glassfish : The reference implementation 
#               default in jetty <= 9.1
#   apache    : The apache version 
#               default jetty >= 9.2
jsp-impl=apache

# To use a non-jdk compiler for JSP compilation when using glassfish uncomment next line
# -Dorg.apache.jasper.compiler.disablejsr199=true
]]></programlisting>

    <para>Note that the availability of some JSP features may depend on which
    JSP container implementation you are using. Note also that it may not be
    possible to precompile your jsps with one container and deploy to the
    other. </para>
  </section>

  <section>
    <title>Precompiling JSPs</title>

    <para>You can either follow the instructions on precompilation provided by
    the JSP container of your choice (either <link
    xl:href="http://jsp.java.net">Glassfish</link> or <link
    xl:href="http://tomcat.apache.org/tomcat-8.0-doc/jasper-howto.html">Apache</link>),
    or if you are using maven for your builds, you can use the <link
    linkend="jetty-jspc-maven-plugin">jetty-jspc-maven</link> plugin to do it
    for you.</para>

    <para>If you have precompiled your jsps, and have customized the output
    package prefix (which is <literal>org.apache.jsp</literal> by default),
    you should configure your webapp context to tell Jetty about this custom
    package name. You can do this using a servlet context init-param called
    <literal>org.eclipse.jetty.servlet.jspPackagePrefix</literal>. </para>

    <para>For example, suppose you have precompiled your jsps with the custom
    package prefix of <literal>com.acme</literal>, then you would add the
    following lines to your web.xml file:</para>

    <para><informalexample>
        <para><programlisting language="xml"><![CDATA[  <context-param>
    <param-name>org.eclipse.jetty.servlet.jspPackagePrefix</param-name>
    <param-value>com.acme</param-value>
  </context-param>
]]></programlisting></para>
      </informalexample></para>

    <note>
      <para>both jetty maven plugins - <link
      linkend="jetty-jspc-maven-plugin">jetty-jspc-maven-plugin</link> and the
      <link linkend="jetty-maven-plugin">jetty-maven-plugin</link> - will only
      use Apache Jasper</para>
    </note>

    <para/>
  </section>

  <section xml:id="compiling-jsps">
    <title>Runtime Compiling JSPs</title>

    <para>Depending on which JSP container you elect to use, the configuration
    and compilation characteristics will be different.</para>

    <section>
      <title>Apache JSP Container</title>

      <para>By default, the Apache JSP container will look for the Eclipse
      Java Compiler (jdt). The jetty distribution ships a copy of this in
      $JETTY_HOME/lib/apache-jsp. If you wish to use a different compiler, you
      will need to configure the <literal>compilerClassName</literal>
      init-param on the <literal>JspServlet</literal> with the name of the
      class.<table>
          <title>Understanding Apache JspServlet Parameters</title>

          <tgroup cols="4">
            <thead>
              <row>
                <entry align="left">init param</entry>

                <entry align="left">Description</entry>

                <entry align="left">Default</entry>

                <entry
                align="left"><filename>webdefault.xml</filename></entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>classpath</entry>

                <entry><code>Classpath used for jsp compilation. Only used if
                org.apache.catalina.jsp_classpath context attribute is not
                set, which it is in Jetty.</code></entry>

                <entry>-</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>classdebuginfo</entry>

                <entry>Include debugging info in class file.</entry>

                <entry>TRUE</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>checkInterval</entry>

                <entry>Interval in seconds between background recompile
                checks. Only relevant if <code>
                development=false</code>.</entry>

                <entry>0</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>development</entry>

                <entry><code>development=true</code>, recompilation checks
                occur on each request. See also <code>
                modificationTestInterval</code>.</entry>

                <entry>TRUE</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>displaySourceFragment</entry>

                <entry>Should a source fragment be included in exception
                messages</entry>

                <entry>TRUE</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>errorOnUseBeanInvalidClassAttribute</entry>

                <entry>Should Jasper issue an error when the value of the
                class attribute in an useBean action is not a valid bean
                class</entry>

                <entry>TRUE</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>fork</entry>

                <entry>Should Ant fork its Java compiles of JSP pages?</entry>

                <entry>TRUE</entry>

                <entry>FALSE</entry>
              </row>

              <row>
                <entry>keepgenerated</entry>

                <entry>Do you want to keep the generated Java files
                around?</entry>

                <entry>TRUE</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>trimSpaces</entry>

                <entry>Should white spaces between directives or actions be
                trimmed?</entry>

                <entry>FALSE</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>enablePooling</entry>

                <entry>Determines whether tag handler pooling is
                enabled.</entry>

                <entry>TRUE</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>engineOptionsClass</entry>

                <entry> Allows specifying the Options class used to configure
                Jasper. If not present, the default EmbeddedServletOptions
                will be used. </entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>mappedFile</entry>

                <entry>Support for mapped Files. Generates a servlet that has
                a print statement per line of the JSP file </entry>

                <entry>TRUE</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>suppressSmap</entry>

                <entry>Generation of SMAP info for JSR45 debugging.</entry>

                <entry>FALSE</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>dumpSmap</entry>

                <entry>Dump SMAP JSR45 info to a file.</entry>

                <entry>FALSE</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>genStrAsCharArray</entry>

                <entry>Option for generating Strings.</entry>

                <entry>FALSE</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>ieClassId</entry>

                <entry>The class-id value to be sent to Internet Explorer when
                using &lt;jsp:plugin&gt; tags.</entry>

                <entry>clsid:8AD9C840-044E-11D1-B3E9-00805F499D93</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>maxLoadedJsps</entry>

                <entry>The maximum number of JSPs that will be loaded for a
                web application. If more than this number of JSPs are loaded,
                the least recently used JSPs will be unloaded so that the
                number of JSPs loaded at any one time does not exceed this
                limit. A value of zero or less indicates no limit.</entry>

                <entry>-1</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>jspIdleTimeout</entry>

                <entry>The amount of time in seconds a JSP can be idle before
                it is unloaded. A value of zero or less indicates never
                unload. </entry>

                <entry>-1</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>scratchDir</entry>

                <entry>Directory where servlets are generated. See </entry>

                <entry>–</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>compilerClassName</entry>

                <entry>If not set, defaults to the Eclipse jdt
                compiler.</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>compiler</entry>

                <entry>Used if the Eclipse jdt compiler cannot be found on the
                classpath. It is the classname of a compiler that Ant should
                invoke.</entry>

                <entry>–</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>compilerTargetVM</entry>

                <entry>Target vm to compile for.</entry>

                <entry>1.7</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>compilerSourceVM</entry>

                <entry>Sets source compliance level for the jdt
                compiler.</entry>

                <entry>1.7</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>javaEncoding</entry>

                <entry>Pass through the encoding to use for the
                compilation.</entry>

                <entry>UTF8</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>modificationTestInterval</entry>

                <entry>If <code>development=true</code>, interval between
                recompilation checks, triggered by a request.</entry>

                <entry>4</entry>

                <entry>–</entry>
              </row>

              <row>
                <entry>xpoweredBy</entry>

                <entry>Generate an X-Powered-By response header.</entry>

                <entry>FALSE</entry>

                <entry>FALSE</entry>
              </row>

              <row>
                <entry>recompileOnFail</entry>

                <entry>If a JSP compilation fails should the
                modificationTestInterval be ignored and the next access
                trigger a re-compilation attempt? Used in development mode
                only and is disabled by default as compilation may be
                expensive and could lead to excessive resource usage.</entry>

                <entry>-</entry>

                <entry>–</entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>
    </section>

    <section>
      <title>Glassfish JSP Container</title>

      <section>
        <para>To compile <filename>.jsp</filename> files into Java classes,
        you need a Java compiler. You can acquire a Java compiler from the JVM
        if you are using a full JDK, or from a third party Jar.</para>

        <para>By default, the Glassfish JSP container tries to use the
        compiler that is part of the JDK. <emphasis
        role="bold">NOTE:</emphasis> when using the JDK compiler, the system
        does <emphasis>not</emphasis> save your class files to disk unless you
        use the <code>saveBytecode</code> init-param as described
        below.</para>

        <para>If you do not have a full JDK, you can configure the Eclipse
        Java Compiler that Jetty ships in the distro in
        <filename>$JETTY_HOME/lib/jsp/.</filename>You need to define a
        SystemProperty that prevents the Glassfish JSP engine from defaulting
        to the in-JVM compiler.</para>

        <para>This is best done when using the standalone distro by
        uncommenting the System property
        <literal>org.apache.jasper.compiler.disablejsr199</literal> in the jsp
        <link linkend="startup-modules">module</link>:</para>

        <informalexample>
          <programlisting language="text"><![CDATA[

 -Dorg.apache.jasper.compiler.disablejsr199=true

      ]]></programlisting>
        </informalexample>

        <para>Or for embedded usages, simply define this as a normal System
        property.</para>
      </section>
    </section>

    <section xml:id="configuring-jsp-for-jetty">
      <title>Configuration</title>

      <para>The JSP engine has many configuration parameters. Some parameters
      affect only precompilation, and some affect runtime recompilation
      checking. Parameters also differ among the various versions of the JSP
      engine. This page lists the configuration parameters, their meanings,
      and their default settings. Set all parameters on the
      <code>org.apache.jasper.JspServlet</code> instance defined in the <link
      linkend="webdefault-xml"><filename>webdefault.xml</filename></link>
      file.</para>

      <note>
        <para>Be careful: for all of these parameters, if the value you set
        doesn't take effect, try using all lower case instead of camel case,
        or capitalizing only some of the words in the name, as JSP is
        inconsistent in its parameter naming strategy.</para>
      </note>

      <table>
        <title>Understanding Glassfish JSP Parameters</title>

        <tgroup cols="4">
          <thead>
            <row>
              <entry align="left">init param</entry>

              <entry align="left">Description</entry>

              <entry align="left">Default</entry>

              <entry align="left"><filename>webdefault.xml</filename></entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>development</entry>

              <entry><code>development=true</code>, recompilation checks occur
              on each request. See also <code>
              modificationTestInterval</code>.</entry>

              <entry>TRUE</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>fork</entry>

              <entry>Should Ant fork its Java compiles of JSP pages?</entry>

              <entry>TRUE</entry>

              <entry>FALSE</entry>
            </row>

            <row>
              <entry>keepgenerated</entry>

              <entry>Do you want to keep the generated Java files
              around?</entry>

              <entry>FALSE</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>saveBytecode</entry>

              <entry>If class files are generated as byte arrays, should they
              be saved to disk at the end of compilations?</entry>

              <entry>FALSE</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>trimSpaces</entry>

              <entry>Should white spaces between directives or actions be
              trimmed?</entry>

              <entry>FALSE</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>enablePooling</entry>

              <entry>Determines whether tag handler pooling is
              enabled.</entry>

              <entry>TRUE</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>mappedFile</entry>

              <entry>Support for mapped Files. Generates a servlet that has a
              print statement per line of the JSP file./</entry>

              <entry>TRUE</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>sendErrorToClient</entry>

              <entry>If false, stack traces, etc., are sent to std error
              instead of the client's browser.</entry>

              <entry>FALSE</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>classdebuginfo</entry>

              <entry>Include debugging info in class file.</entry>

              <entry>TRUE</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>checkInterval</entry>

              <entry>Interval in seconds between background recompile checks.
              Only relevant if <code> development=false</code>.</entry>

              <entry>0</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>suppressSmap</entry>

              <entry>Generation of SMAP info for JSR45 debugging.</entry>

              <entry>FALSE</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>dumpSmap</entry>

              <entry>Dump SMAP JSR45 info to a file.</entry>

              <entry>FALSE</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>genStrAsCharArray</entry>

              <entry>Option for generating Strings.</entry>

              <entry>FALSE</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>genStrAsByteArray</entry>

              <entry>Option for generating Strings.</entry>

              <entry>TRUE</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>defaultBufferNone</entry>

              <entry/>

              <entry>FALSE</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>errorOnUseBeanInvalidClassAttribute</entry>

              <entry/>

              <entry>FALSE</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>scratchDir</entry>

              <entry>Directory where servlets are generated. Jetty sets this
              value according to the [/display/JETTY/Temporary+Directories
              work dir] settings for the webapp.</entry>

              <entry>–</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>compiler</entry>

              <entry>Determined at runtime. For Jetty this is the Eclipse jdt
              compiler.</entry>

              <entry>–</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>compilerTargetVM</entry>

              <entry>Target vm to compile for.</entry>

              <entry>1.5</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>compilerSourceVM</entry>

              <entry>Sets source compliance level for the jdt
              compiler.</entry>

              <entry>1.5</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>javaEncoding</entry>

              <entry>Pass through the encoding to use for the
              compilation.</entry>

              <entry>UTF8</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>modificationTestInterval</entry>

              <entry>If <code>development=true</code>, interval between
              recompilation checks, triggered by a request.</entry>

              <entry>0</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>xpoweredBy</entry>

              <entry>Generate an X-Powered-By response header.</entry>

              <entry>FALSE</entry>

              <entry>FALSE</entry>
            </row>

            <row>
              <entry>usePrecompiled/use-precompiled</entry>

              <entry/>

              <entry>FALSE</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>validating/enableTldValidation</entry>

              <entry>Whether or not to validate tag files against the
              schema.</entry>

              <entry>FALSE</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>reload-interval</entry>

              <entry>If <code>reload-interval=0</code>, then no runtime
              checking of JSP, otherwise sets the checking interval for both
              <code>development=true</code> and
              <code>development=false</code>.</entry>

              <entry>–</entry>

              <entry>–</entry>
            </row>

            <row>
              <entry>initial-capacity/initialCapacity</entry>

              <entry>The initial capacity of the hash maps mapping the name of
              the JSP to class and JSP file.</entry>

              <entry>–</entry>

              <entry>–</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Much confusion generally ensues about the
      <code>development</code>, <code>checkInterval</code> and <code>
      modificationTestInterval</code> parameters and JSP runtime
      recompilation. Here is a factoring out of the various options:</para>

      <itemizedlist>
        <listitem>
          <para>Check the JSP files for possible recompilation on every
          request: <informalexample>
              <programlisting language="xml"><![CDATA[

<init-param>
        <param-name>development></param-name>
        <param-value>true></param-value>
</init-param>

        ]]></programlisting>
            </informalexample></para>
        </listitem>

        <listitem>
          <para>Only check approximately every N seconds, where a request
          triggers the time-lapse calculation. This example checks every 60
          seconds: <informalexample>
              <programlisting language="xml"><![CDATA[

<init-param>
        <param-name>development></param-name>
        <param-value>true></param-value>
</init-param>
<init-param>
        <param-name>modificationTestInterval></param-name>
        <param-value>60></param-value>
</init-param>

        ]]></programlisting>
            </informalexample></para>
        </listitem>

        <listitem>
          <para>Do no checking whatsoever, but still compile the JSP on the
          very first hit. (Be aware that this ''reload-interval'' parameter is
          shorthand for a ''development=false'' and ''checkInterval=0''
          combination.): <informalexample>
              <programlisting language="xml"><![CDATA[

<init-param>
        <param-name>reload-interval></param-name>
        <param-value>-1></param-value>
</init-param>

        ]]></programlisting>
            </informalexample></para>
        </listitem>

        <listitem>
          <para>Don't do any request-time checking, but instead start a
          background thread to do checks every N seconds. This example checks
          every 60 seconds: <informalexample>
              <programlisting language="xml"><![CDATA[

<init-param>
        <param-name>development></param-name>
        <param-value>false></param-value>
 </init-param>
 <init-param>
         <param-name>checkInterval></param-name>
         <param-value>60></param-value>
</init-param>
 
        ]]></programlisting>
            </informalexample></para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="modifying-configuration">
    <title>Modifying Configuration</title>

    <para>Regardless of which JSP container you are using, there are several
    options for modifying the JspServlet configuration.</para>

    <section xml:id="overriding-webdefault.xml">
      <title>Overriding <filename>webdefault.xml</filename></title>

      <para>You can make a copy of the <link
      linkend="webdefault-xml">$JETTY_HOME/etc/webdefault.xml</link> that
      ships with Jetty, apply your changes, and use it instead of the shipped
      version. The example below shows how to do this when using the Jetty
      Maven plugin.</para>

      <informalexample>
        <programlisting language="xml"><![CDATA[

  <plugin>
    <groupId>org.eclipse.jetty</groupId>
    <artifactId>jetty-maven-plugin</artifactId>
    <configuration>
      <webApp>
        <defaultsDescriptor>src/main/resources/webdefault.xml</defaultsDescriptor>
      </webApp>
  </plugin>
        ]]></programlisting>
      </informalexample>

      <para>If you are using the Jetty distro, and you want to change the JSP
      settings for just one or a few of your webapps, copy the
      <filename>$<link
      linkend="webdefault-xml">JETTY_HOME/etc/webdefault.xml</link></filename>
      file somewhere, modify it, and then use a <link
      linkend="intro-jetty-configuration-contexts">context xml</link> file to
      set this file as the defaultsDescriptor for your webapp. Here's a
      snippet:</para>

      <informalexample>
        <programlisting language="xml"><![CDATA[

 <Configure class=>"org.eclipse.jetty.webapp.WebAppContext">
 
   <Set name=>"contextPath">/foo</Set>
   <Set name=>"war"><SystemProperty name=>"jetty.home" >default=>"."/>/webapps/foobar.war</Set>
   <Set name=>"defaultsDescriptor">/home/smith/dev/webdefault.xml</Set>
  
 </Configure>

        ]]></programlisting>
      </informalexample>

      <para>If you want to change the JSP settings for all webapps, edit
      the<filename> $JETTY_HOME/etc/webdefaults.xml</filename> file directly
      instead.</para>
    </section>

    <section xml:id="configuring-jsp-servlet-in-web.xml">
      <title>Configuring the JSP Servlet in
      <filename>web.xml</filename></title>

      <para>Another option is to add an entry for the JSPServlet to the
      <filename>WEB-INF/web.xml</filename> file of your webapp and change or
      add init-params. You may also add (but not remove) servlet-mappings. You
      can use the entry in <link
      linkend="webdefault-xml">$JETTY_HOME/etc/webdefault.xml</link> as a
      starting point.</para>

      <informalexample>
        <programlisting language="xml"><![CDATA[

 <servlet id=>"jsp">
     <servlet-name>jsp</servlet-name>
     <servlet-class>org.apache.jasper.servlet.JspServlet</servlet-class>
     <init-param>
         <param-name>logVerbosityLevel</param-name>
         <param-value>DEBUG</param-value>
     </init-param>
     <init-param>
         <param-name>fork</param-name>
         <param-value>>false</param-value>
     </init-param>
     <init-param>
         <param-name>keepgenerated</param-name>
         <param-value>>true</param-value>
     </init-param>
     ...
     
     <load-on-startup>0</load-on-startup>
   </servlet>
 
   <servlet-mapping>
     <servlet-name>jsp</servlet-name>
     <url-pattern>*.jsp</url-pattern>
     <url-pattern>*.jspf</url-pattern>
     <url-pattern>*.jspx</url-pattern>
     <url-pattern>*.xsp</url-pattern>
     <url-pattern>*.JSP</url-pattern>
     <url-pattern>*.JSPF</url-pattern>
     <url-pattern>*.JSPX</url-pattern>
     <url-pattern>*.XSP</url-pattern>
   </servlet-mapping>
   
   <servlet id=>"my-servlet">
     <servlet-name>myServlet</servlet-name>
     <servlet-class>com.acme.servlet.MyServlet</servlet-class>
      ...


        ]]></programlisting>
      </informalexample>
    </section>
  </section>

  <section xml:id="using-jstl-taglibs-for-jetty7-jetty8">
    <title>Using JSTL Taglibs</title>

    <para>The JavaServer Pages Standlard Tag Library (JSTL) is part of the
    Jetty distribution (in <code>$JETTY_HOME/lib/jsp</code>) and is
    automatically on the classpath.</para>
  </section>

  <section xml:id="using-jsf-taglibs">
    <title>Using JSF Taglibs</title>

    <para>The following sections provide information about using JSF taglibs
    with Jetty Standalone and the Jetty Maven Plugin.</para>

    <section xml:id="using-jsf-taglibs-with-jetty-standalone">
      <title>Using JSF Taglibs with Jetty Distribution</title>

      <para>If you want to use JSF with your webapp, you need to copy the JSF
      implementation Jar (whichever Jar contains the
      <filename>META-INF/*.tld</filename> files from your chosen JSF
      implementation) into Jetty's shared container lib directory. You can
      either put them into the lib directory matching your JSP container of
      choice (either $JETTY_HOME/lib/jsp for Glassfish JSP, or
      $JETTY_HOME/lib/apache-jsp for Apache JSP), or put them into
      $JETTY_HOME/lib/ext.<filename/> </para>
    </section>

    <section xml:id="using-jsf-taglibs-with-jetty-maven-plugin">
      <title>Using JSF Taglibs with Jetty Maven Plugin</title>

      <para>You should make your JSF jars dependencies of the plugin and
      <emphasis>not</emphasis> the webapp itself. For example:</para>

      <informalexample>
        <programlisting language="xml"><![CDATA[

   <plugin>
    <groupId>org.eclipse.jetty</groupId>
    <artifactId>jetty-maven-plugin</artifactId>
    <configuration>
       <webApp>
         <contextPath>/${artifactId}</contextPath>
       </webApp>
       <scanIntervalSeconds>5</scanIntervalSeconds>
    </configuration>
    <dependencies>
      <dependency>
        <groupId>com.sun.faces</groupId>
        <artifactId>jsf-api</artifactId>
        <version>2.0.8</version>
      </dependency>
      <dependency>
        <groupId>com.sun.faces</groupId>
        <artifactId>jsf-impl</artifactId>
        <version>2.0.8</version>
     </dependency>
    </dependencies>
  </plugin>

        ]]></programlisting>
      </informalexample>
    </section>
  </section>
</section>
