<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xml:id="configuring-ssl" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
        >
  <title>Configuring SSL/TLS</title>

  <para>This document provides an overview of how to configure SSL and TLS
  for Jetty.</para>

  <section xml:id="tls-and-ssl-versions">
    <title>TLS and SSL versions</title>
    <para>Which browser/OS supports which protocols can be
      <link xl:href="https://en.wikipedia.org/wiki/Transport_Layer_Security#Web_browsers">found on Wikipedia</link></para>
    <itemizedlist>
      <listitem>TLS v1.1 and v1.2: The protocols which should be used wherever possible. All CBC based ciphers are
        supported since Java 7, the new GCM modes are supported since Java 8.</listitem>
      <listitem>TLS v1.0: still ok but affected by the POODLE attack too. To support oder browsers this protocol
        version is still needed.</listitem>
      <listitem>SSL v3: is now deprecated and should only be enabled if you still need to
        support very old browsers like Internet Explorer 6 on Windows XP which does not support TLS 1.0 (or is disabled by default).</listitem>
    </itemizedlist>
  </section>

  <section xml:id="understanding-certificates-and-keys">
    <title>Understanding Certificates and Keys</title>

    <para>Configuring SSL can be a confusing experience of keys, certificates,
    protocols and formats, thus it helps to have a reasonable understanding of
    the basics. The following links provide some good starting points:</para>

    <itemizedlist>
      <listitem>
        <para>Certificates: </para>

        <itemizedlist>
          <listitem>
            <para><link
            xl:href="http://en.tldp.org/HOWTO/SSL Certificates HOWTO">SSL
            Certificates HOWTO</link></para>
          </listitem>

          <listitem>
            <para><link
            xl:href="http://mindprod.com/jgloss/certificate.html">Mindprod
            Java Glossary: Certificates</link></para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Keytool: </para>

        <itemizedlist>
          <listitem>
            <para><link
            xl:href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html">Keytool
            for Unix</link></para>
          </listitem>

          <listitem>
            <para><link
            xl:href="http://docs.oracle.com/javase/8/docs/technotes/tools/windows/keytool.html">Keytool
            for Windows</link></para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Other tools: </para>

        <itemizedlist>
          <listitem>
            <para><link
            xl:href="https://www.ibm.com/developerworks/mydeveloperworks/groups/service/html/communityview?communityUuid=6fb00498-f6ea-4f65-bf0c-adc5bd0c5fcc">IBM
            Keyman</link></para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>OpenSSL: </para>

        <itemizedlist>
          <listitem>
            <para><link xl:href="http://www.openssl.org/docs/HOWTO/">OpenSSL
            HOWTO</link></para>
          </listitem>

          <listitem>
            <para><link
            xl:href="http://www.openssl.org/support/faq.html">OpenSSL
            FAQ</link></para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <section xml:id="openssl-vs-keytool">
      <title>OpenSSL vs. Keytool</title>

      <para>For testing, the <code>keytool</code> utility bundled with the JDK provides the simplest way to
      generate the key and certificate you need.</para>

      <para>You can also use the OpenSSL tools to generate keys and
      certificates, or to convert those that you have used with Apache or
      other servers. Since Apache and other servers commonly use the OpenSSL
      tool suite to generate and manipulate keys and certificates, you might
      already have some keys and certificates created by OpenSSL, or
      you might also prefer the formats OpenSSL produces.</para>

      <para>If you want the option of using the same certificate with Jetty or
      a web server such as Apache not written in Java, you might prefer to
      generate your private key and certificate with OpenSSL.</para>
    </section>

    <section xml:id="configuring-jetty-for-ssl">
      <title>Configuring Jetty for SSL</title>

      <para>To configure Jetty for SSL, complete the tasks in the following
      sections:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="generating-key-pairs-and-certificates"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="requesting-trusted-certificate"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="loading-keys-and-certificates"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="configuring-sslcontextfactory"/></para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="generating-key-pairs-and-certificates">
      <title>Generating Key Pairs and Certificates</title>

      <para>The simplest way to generate keys and certificates is to use the
      <code>keytool</code> application that comes with the JDK, as it generates keys and
      certificates directly into the keystore. See <xref
      linkend="generating-key-pairs-and-certificates-JDK-keytool"/>.</para>

      <para>If you already have keys and certificates, see <xref
      linkend="loading-keys-and-certificates"/> to load them into a JSSE keystore.
      This section also applies if you have a renewal certificate to
      replace one that is expiring.</para>

      <para>The examples below generate only basic keys and certificates. You
      should read the full manuals of the tools you are using if you want to
      specify:</para>

      <itemizedlist>
        <listitem>
          <para>the key size</para>
        </listitem>

        <listitem>
          <para>the certificate expiration date</para>
        </listitem>

        <listitem>
          <para>alternate security providers</para>
        </listitem>
      </itemizedlist>

      <section xml:id="generating-key-pairs-and-certificates-JDK-keytool">
        <title>Generating Keys and Certificates with JDK's keytool</title>

        <para>The following command generates a key pair and certificate
        directly into file <filename>keystore</filename>:</para>

        <screen><![CDATA[$ keytool -keystore keystore -alias jetty -genkey -keyalg RSA]]></screen>

        <note>
          <para>The DSA key algorithm certificate produces an error after
          loading several pages. In a browser, it displays a message "Could
          not establish an encrypted connection because certificate presented
          by localhost has an invalid signature." The solution is to use RSA
          for the key algorithm.</para>
        </note>

        <para>This command prompts for information about the certificate and
        for passwords to protect both the keystore and the keys within it. The
        only mandatory response is to provide the fully qualified host name of
        the server at the "first and last name" prompt. For example:</para>

        <screen><![CDATA[$ keytool -keystore keystore -alias jetty -genkey -keyalg RSA -sigalg SHA256withRSA
 Enter keystore password:  password
 What is your first and last name?
   [Unknown]:  jetty.eclipse.org
 What is the name of your organizational unit?
   [Unknown]:  Jetty
 What is the name of your organization?
   [Unknown]:  Mort Bay Consulting Pty. Ltd.
 What is the name of your City or Locality?
   [Unknown]:
 What is the name of your State or Province?
   [Unknown]:
 What is the two-letter country code for this unit?
   [Unknown]:
 Is CN=jetty.eclipse.org, OU=Jetty, O=Mort Bay Consulting Pty. Ltd.,
 L=Unknown, ST=Unknown, C=Unknown correct?
   [no]:  yes

 Enter key password for <jetty>
         (RETURN if same as keystore password):
 $]]></screen>

        <para>You now have the minimal requirements to run an SSL connection
        and could proceed directly to <link
        linkend="configuring-sslcontextfactory">configure an SSL
        connector</link>. However the browser will not trust the certificate
        you have generated, and prompts the user to this effect. While what
        you have at this point is often sufficient for testing, most public
        sites need a trusted certificate, as shown in the section <link
        linkend="generating-csr-from-keytool">generating a CSR with
        keytool</link>.</para>
        <para>If you want to use only a self signed certificate for some kind of
        internal admin panel add -validity &lt;days&gt; to the keytool call
        above, otherwise your certificate is only valid for one month.</para>
      </section>

      <section xml:id="generating-keys-and-certificates-openssl">
        <title>Generating Keys and Certificates with OpenSSL</title>

        <para>The following command generates a key pair in the file
        <filename>jetty.key</filename>:</para>

        <screen><![CDATA[$ openssl genrsa -aes128 -out jetty.key]]></screen>

        <para>You might also want to use the <filename>-rand</filename> file
        argument to provide an arbitrary file that helps seed the random
        number generator.</para>

        <para>The following command generates a certificate for the key into
        the file <filename> jetty.crt</filename>:</para>

        <screen><![CDATA[$ openssl req -new -x509 -b2048 -sha256 -key jetty.key -out jetty.crt]]></screen>

        <para>Adding -sha256 ensures to get a certificate with the now recommended SHA-256 signature algorithm.
          For the paranoid ones add -b4096 to get a 4069bits long key.</para>

        <para>The next command prompts for information about the certificate
        and for passwords to protect both the keystore and the keys within it.
        The only mandatory response is to provide the fully qualified host
        name of the server at the "Common Name" prompt. For example:</para>

        <screen><![CDATA[$ openssl genrsa -aes128 -out jetty.key
Generating RSA private key, 2048 bit long modulus
..............+++
......................................................................+++
e is 65537 (0x10001)
Enter pass phrase for jetty.key:
Verifying - Enter pass phrase for jetty.key:

$ openssl req -new -x509 -newkey rsa:2048 -sha256 -key jetty.key -out jetty.crt
Enter pass phrase for jetty.key:
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:
State or Province Name (full name) [Some-State]:
Locality Name (eg, city) []:
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Mort Bay Consulting Pty. Ltd.
Organizational Unit Name (eg, section) []:Jetty
Common Name (e.g. server FQDN or YOUR name) []:jetty.eclipse.org
Email Address []:

$]]></screen>

        <para>You now have the minimal requirements to run an SSL connection
        and could proceed directly to <xref
        linkend="loading-keys-and-certificates"/> to load these keys and
        certificates into a JSSE keystore. However the browser will not trust
        the certificate you have generated, and prompts the user to this
        effect. While what you have at this point is often sufficient for
        testing, most public sites need a trusted certificate, as shown in the
        section, <xref linkend="generating-csr-from-openssl"/> to obtain a
        certificate.</para>
      </section>

      <section xml:id="using-keys-and-certificates-from-other-sources">
        <title>Using Keys and Certificates from Other Sources</title>

        <para>If you have keys and certificates from other sources, you can
        proceed directly to <xref
        linkend="loading-keys-and-certificates"/>.</para>
      </section>
    </section>

    <section xml:id="requesting-trusted-certificate">
      <title>Requesting a Trusted Certificate</title>

      <para>The keys and certificates generated with JDK's <code>keytool</code> and
      OpenSSL are sufficient to run an SSL connector. However the browser will
      not trust the certificate you have generated, and it will prompt the
      user to this effect.</para>

      <para>To obtain a certificate that most common browsers will trust, you
      need to request a well-known certificate authority (CA) to sign your
      key/certificate. Such trusted CAs include: AddTrust, Entrust, GeoTrust,
      RSA Data Security, Thawte, VISA, ValiCert, Verisign, and beTRUSTed,
      among others. Each CA has its own instructions (look for JSSE or OpenSSL
      sections), but all involve a step that generates a certificate signing
      request (CSR).</para>

      <section xml:id="generating-csr-from-keytool">
        <title>Generating a CSR with keytool</title>

        <para>The following command generates the file
        <filename>jetty.csr</filename> using <code>keytool</code> for a key/cert already in
        the keystore:</para>

        <screen><![CDATA[$ keytool -certreq -alias jetty -keystore keystore -file jetty.csr]]></screen>
      </section>

      <section xml:id="generating-csr-from-openssl">
        <title>Generating a CSR from OpenSSL</title>

        <para>The following command generates the file
        <filename>jetty.csr</filename> using OpenSSL for a key in the file
        <filename>jetty.key</filename>:</para>

        <screen><![CDATA[$ openssl req -new -key jetty.key -out jetty.csr]]></screen>

        <para>Notice that this command uses only the existing key from
        <filename>jetty.key</filename> file, and not a certificate in
        <filename>jetty.crt</filename> as generated with OpenSSL. You need to
        enter the details for the certificate again.</para>
      </section>
    </section>

    <section xml:id="loading-keys-and-certificates">
      <title>Loading Keys and Certificates</title>

      <para>Once a CA has sent you a certificate, or if you generated your own
      certificate without <code>keytool</code>, you need to load it into a JSSE
      keystore.</para>

      <note>
        <para>You need both the private key and the certificate in the JSSE
        keystore. You should load the certificate into the keystore used to
        generate the CSR with <code>keytool</code>. If your key pair is not already in a keystore
        (for example, because it has been generated with OpenSSL), you need to use the PKCS12 format to load
        both key and certificate (see <link
        linkend="loading-keys-and-certificates-via-pkcks12">PKCKS12 Keys &amp;
        Certificates</link>).</para>
      </note>

      <section xml:id="loading-certificates-with-keytool">
        <title>Loading Certificates with keytool</title>

        <para>You can use <code>keytool</code> to load a certificate in PEM form directly
        into a keystore. The PEM format is a text encoding of certificates; it
        is produced by OpenSSL, and is returned by some CAs. An example PEM
        file is:</para>

        <screen><![CDATA[jetty.crt
-----BEGIN CERTIFICATE-----
MIICSDCCAfKgAwIBAgIBADANBgkqhkiG9w0BAQQFADBUMSYwJAYDVQQKEx1Nb3J0
IEJheSBDb25zdWx0aW5nIFB0eS4gTHRkLjEOMAwGA1UECxMFSmV0dHkxGjAYBgNV
BAMTEWpldHR5Lm1vcnRiYXkub3JnMB4XDTAzMDQwNjEzMTk1MFoXDTAzMDUwNjEz
MTk1MFowVDEmMCQGA1UEChMdTW9ydCBCYXkgQ29uc3VsdGluZyBQdHkuIEx0ZC4x
DjAMBgNVBAsTBUpldHR5MRowGAYDVQQDExFqZXR0eS5tb3J0YmF5Lm9yZzBcMA0G
CSqGSIb3DQEBAQUAA0sAMEgCQQC5V4oZeVdhdhHqa9L2/ZnKySPWUqqy81riNfAJ
7uALW0kEv/LtlG34dOOcVVt/PK8/bU4dlolnJx1SpiMZbKsFAgMBAAGjga4wgasw
HQYDVR0OBBYEFFV1gbB1XRvUx1UofmifQJS/MCYwMHwGA1UdIwR1MHOAFFV1gbB1
XRvUx1UofmifQJS/MCYwoVikVjBUMSYwJAYDVQQKEx1Nb3J0IEJheSBDb25zdWx0
aW5nIFB0eS4gTHRkLjEOMAwGA1UECxMFSmV0dHkxGjAYBgNVBAMTEWpldHR5Lm1v
cnRiYXkub3JnggEAMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEEBQADQQA6NkaV
OtXzP4ayzBcgK/qSCmF44jdcARmrXhiXUcXzjxsLjSJeYPJojhUdC2LQKy+p4ki8
Rcz6oCRvCGCe5kDB
-----END CERTIFICATE-----]]></screen>

        <para>The following command loads a PEM encoded certificate in the
        <filename>jetty.crt</filename> file into a JSSE keystore:</para>

        <screen><![CDATA[$ keytool -keystore keystore -import -alias jetty -file jetty.crt -trustcacerts]]></screen>

        <para>If the certificate you receive from the CA is not in a format
        that <code>keytool</code> understands, you can use the <code>openssl</code> command
        to convert formats:</para>

        <screen><![CDATA[$ openssl x509 -in jetty.der -inform DER -outform PEM -out jetty.crt]]></screen>
      </section>

      <section xml:id="loading-keys-and-certificates-via-pkcks12">
        <title>Loading Keys and Certificates via PKCS12</title>

        <para>If you have a key and certificate in separate files, you need to
        combine them into a PKCS12 format file to load into a new keystore.
        The certificate can be one you generated yourself or one returned from
        a CA in response to your CSR.</para>

        <para>The following OpenSSL command combines the keys in
        <filename>jetty.key</filename> and the certificate in the
        <filename>jetty.crt</filename> file into the
        <filename>jetty.pkcs12</filename> file:</para>

        <screen><![CDATA[$ openssl pkcs12 -inkey jetty.key -in jetty.crt -export -out jetty.pkcs12]]></screen>

        <para>If you have a chain of certificates, because your CA is an
        intermediary, build the PKCS12 file as follows:</para>

        <screen><![CDATA[$ cat example.crt intermediate.crt [intermediate2.crt] ... rootCA.crt > cert-chain.txt
$ openssl pkcs12 -export -inkey example.key -in cert-chain.txt -out example.pkcs12]]></screen>

        <para>The order of certificates must be from server to rootCA, as per
        RFC2246 section 7.4.2.</para>

        <para>OpenSSL asks for an <emphasis>export password</emphasis>. A
        non-empty password is required to make the next step work.
        Then load the resulting PKCS12 file into a JSSE keystore with <code>keytool</code>:</para>

        <screen><![CDATA[$ keytool -importkeystore -srckeystore jetty.pkcs12 -srcstoretype PKCS12 -destkeystore keystore]]></screen>

      </section>
    </section>

    <section xml:id="configuring-sslcontextfactory">
      <title>Configuring SslContextFactory</title>

      <para>The generated SSL certificates held in the key store are
      configured on Jetty by injection an instance of <link
      xl:href="@JDURL@/org/eclipse/jetty/util/ssl/SslContextFactory.html">
      SslContextFactory</link> object and passing it to the connector's
      SslConnectionFactory, which is done in the jetty distribution by both in
      <link
      xl:href="@GITURL@/jetty-server/src/main/config/etc/jetty-https.xml">jetty-https.xml</link>
      and <link
      xl:href="@GITURL@/jetty-spdy/spdy-example-webapp/src/main/config/etc/jetty-spdy.xml">jetty-spdy.xml</link>.
      Since SPDY is able to handle HTTPS also, typically you will configure
      jetty to use one of these configuration files or the other, which can be
      done other on the command line or by editing the start.ini file.</para>

      <para>These configuration files create an SslContextFactory instance
      with the ID "sslContextFactory":</para>

      <informalexample>
        <programlisting language="xml"><![CDATA[<New id="sslContextFactory" class="org.eclipse.jetty.util.ssl.SslContextFactory">
  <Set name="KeyStorePath"><Property name="jetty.home" default="." />/etc/keystore</Set>
  <Set name="KeyStorePassword">OBF:1vny1zlo1x8e1vnw1vn61x8g1zlu1vn4</Set>
  <Set name="KeyManagerPassword">OBF:1u2u1wml1z7s1z7a1wnl1u2g</Set>
  <Set name="TrustStorePath"><Property name="jetty.home" default="." />/etc/keystore</Set>
  <Set name="TrustStorePassword">OBF:1vny1zlo1x8e1vnw1vn61x8g1zlu1vn4</Set>
</New>]]></programlisting>
      </informalexample>

      <para>This example uses the keystore distributed with jetty. To use your
      own keystore you need to update at least the following settings:</para>

      <variablelist>
        <varlistentry>
          <term>KeyStorePath</term>

          <listitem>
            <para>You can either replace the provided keystore with your own,
            or change the configuration to point to a different file. Note
            that as a keystore is vital security information, it can be
            desirable to locate the file in a directory with very restricted
            access.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>KeyStorePassword</term>

          <listitem>
            <para>The keystore password may be set here in plain text, or as
            some protection from casual observation, it may be obfuscated
            using the <link
            xl:href="@JDURL@/org/eclipse/jetty/util/security/Password.html">
            Password</link> class.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The Truststore is used if validating client certificates and is
      typically set to the same keystore.</para>

      <para>The keyManagerPassword is passed as the password arg to KeyManagerFactory.init(...). If there is no
          keymanagerpassword, then the keystorepassword is used instead. If there is no trustmanager set, then the
          keystore is used as the trust store and the keystorepassword is used as the truststore password</para>

      <para>The key and store passwords may also be set using the system properties: "org.eclipse.jetty.ssl.keypassword" 
      "org.eclipse.jetty.ssl.password".  This is not a recommended usage.</para>

      <para>There is no need to create a new instance of SslContextFactory using the xml above as one exists in jetty-ssl.xml.
          Edit the paths and passwords in jetty-ssl.xml and ensure you add following lines to start.ini after
          the line jetty.dump.stop=:</para>

      <informalexample>
        <programlisting language="plain"><![CDATA[
          etc/jetty-ssl.xml
		  etc/jetty-https.xml]]></programlisting></informalexample>

	  <para>Optionally, configure the https port either in jetty-https.xml like this:
		  <informalexample>
        <programlisting language="xml"><![CDATA[<Set name="port">8443</Set>]]></programlisting>
      </informalexample>
		  or via the commandline e.g.
		  <screen><![CDATA[$ java -jar start.jar https.port=8443]]></screen>
		  </para>
    </section>

      <section xml:id="configuring-sslcontextfactory-cipherSuites">
          <title>Disabling/Enabling specific cipher suites</title>
          <para>For example to avoid the BEAST attack it is necessary to configure a specific set of cipher suites.
              This can either be done via
              <link
                      xl:href="@JDURL@/org/eclipse/jetty/util/ssl/SslContextFactory.html#setIncludeCipherSuites(java.lang.String...)">
                  SslContext.setIncludeCipherSuites(java.lang.String...)
              </link>
              or via<link
                      xl:href="@JDURL@/org/eclipse/jetty/util/ssl/SslContextFactory.html#setExcludeCipherSuites(java.lang.String...)">
                  SslContext.setExcludeCipherSuites(java.lang.String...)</link>.
          </para>

          <note><para>It's crucial that you use the exact names of the cipher suites as used/known by the JDK.
              You can get them by obtaining an instance of SSLEngine and call getSupportedCipherSuites().
              Tools like ssllabs.com might report slightly different names which will be ignored.</para></note>

          <note><para>It's recommended to install the Java Cryptography Extension (JCE) Unlimited Strength policy files
            in your JRE to get full strength ciphers like AES-256. They can be found on the
            <link xl:href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java download page</link>.
              Just overwrite the two present JAR files in <code>&lt;JRE_HOME&gt;/lib/security/</code>
          </para></note>

          <para>Both setIncludeCipherSuites and setExcludeCipherSuites can be feed by the exact cipher suite
              name used in the JDK or by using regular expressions.
          </para>

          <para>
              Here's an example of how to include all safe cipher suites and disable old insecure ones.
          </para>

          <para>Include all ciphers which support <link xl:href="https://en.wikipedia.org/wiki/Forward_secrecy">Forward Secrecy</link> using regex:</para>
          <informalexample>
              <programlisting language="xml"><![CDATA[
              <Set name="IncludeCipherSuites">
                <Array type="String">
                    <Item>TLS_DHE_RSA.*</Item>
                    <Item>TLS_ECDHE.*</Item>
                </Array>
              </Set>]]>
              </programlisting>
          </informalexample>

          <para>Exclude all old, insecure or anonymous cipher suites:</para>
          <informalexample>
            <programlisting language="xml"><![CDATA[
            <Set name="ExcludeCipherSuites">
              <Array type="String">
                <Item>.*NULL.*</Item>
                <Item>.*RC4.*</Item>
                <Item>.*MD5.*</Item>
                <Item>.*DES.*</Item>
                <Item>.*DSS.*</Item>
              </Array>
            </Set>]]>
            </programlisting>
          </informalexample>

          <note>
              <para>It is recommended to use the IncludeCipherSuites with the regex unless you've reasons you
                  need to specify specific cipher suites. This configuration will adapt to any
                  additions/removals of cipher suites to new versions of the JDK.</para>
          </note>

          <para>
            Since 2014 SSLv3 is considered insecure and should be disabled.
          </para>
          <informalexample>
            <programlisting language="xml"><![CDATA[
              <Set name="ExcludeProtocols">
                   <Array type="java.lang.String">
                       <Item>SSLv3</Item>
                   </Array>
              </Set>
              ]]>
            </programlisting>
          </informalexample>
          <note>
            <para>
              Note that disabling SSLv3 prevents very old browsers like Internet Explorer 6 on Windows XP from connecting.
            </para>
          </note>

          <para>
            TLS renegotiation should be disabled too to prevent an attack based on this feature.
          </para>
          <informalexample>
            <programlisting language="xml"><![CDATA[
              <Set name="renegotiationAllowed">FALSE</Set>
              ]]>
            </programlisting>
          </informalexample>

      </section>

      <section>
      <title>Configuring SSL Connector and Port</title>

      <para>This <code>SslContextFactory</code> instance created above is injected into a
      <code>SslConnectionFactory</code> instance to be used when accepting network
      connections, which in turn is injected into an instance of
      <code>ServerConnector</code>. For example from <link
      xl:href="@GITURL@/jetty-server/src/main/config/etc/jetty-https.xml">jetty-https.xml</link>:</para>

      <informalexample>
        <programlisting language="xml"><![CDATA[<Call id="sslConnector" name="addConnector">
  <Arg>
    <New class="org.eclipse.jetty.server.ServerConnector">
      <Arg name="server"><Ref refid="Server" /></Arg>
        <Arg name="factories">
          <Array type="org.eclipse.jetty.server.ConnectionFactory">
            <Item>
              <New class="org.eclipse.jetty.server.SslConnectionFactory">
                <Arg name="next">http/1.1</Arg>
                <Arg name="sslContextFactory"><Ref refid="sslContextFactory"/></Arg>
              </New>
            </Item>
            <Item>
              <New class="org.eclipse.jetty.server.HttpConnectionFactory">
                <Arg name="config"><Ref refid="tlsHttpConfig"/></Arg>
              </New>
            </Item>
          </Array>
        </Arg>
        <Set name="host"><Property name="jetty.host" /></Set>
        <Set name="port"><Property name="jetty.tls.port" default="8443" /></Set>
        <Set name="idleTimeout">30000</Set>
      </New>
  </Arg>
</Call>]]></programlisting>
      </informalexample>

      <para>Note also that the SSL connector port is set directly on the
      ServerConnector instance.</para>
    </section>

    <section xml:id="renewing-certificates">
      <title>Renewing Certificates</title>

      <para>If you are updating your configuration to use a newer certificate,
      as when the old one is expiring, just load the newer certificate as
      described in the section, <xref
      linkend="loading-keys-and-certificates"/>. If you imported the key and
      certificate originally using the PKCS12 method, use an alias of "1"
      rather than "jetty", because that is the alias the PKCS12 process enters
      into the keystore.</para>
    </section>
  </section>
</section>
