<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="startup-modules" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Managing Startup Modules</title>

  <para>Starting with Jetty 9.1, a new Module system was introduced. (It
  replaced the old <filename>start.config</filename> +
  <literal>OPTIONS</literal> techniques from past Jetty Distributions).</para>

  <para>The standard Jetty Distribution ships with several modules defined in
  <filename>${jetty.home}/modules/</filename></para>

  <para>What a Jetty Startup Module Defines:</para>

  <variablelist>
    <varlistentry>
      <term>A Module Name</term>

      <listitem>
        <para>The name of the module is the keyword used by the
        <literal>--module=&lt;name&gt;</literal> command line argument to
        activate/enable modules, and also find dependant modules.</para>

        <para>The filename of the module defines its name. (eg: server.mod
        becomes the module named "server")</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>List of Dependant Modules</term>

      <listitem>
        <para>All modules can declare that they depend on other modules with
        the <code>[depend]</code> section.</para>

        <para>The list of dependencies is used to transitively resolve other
        modules that are deemed to be required based on the modules that you
        activate.</para>

        <para>The order of modules defined in the graph of active modules is
        used to determine various execution order for configuration, such as
        Jetty IoC XML configurations, and to resolve conflicting property
        declarations.</para>

        <para>Of note: there is a special section <code>[optional]</code> used
        to describe structurally dependant modules that are not technically
        required, but might be of use to your specific configuration.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>List of Libraries</term>

      <listitem>
        <para>Module can optionally declare that they have libraries that they
        need to function properly.</para>

        <para>The <code>[lib]</code> section declares a set of pathnames that
        follow the <link linkend="base-vs-home-resolution">Jetty Base and
        Jetty Home path resolution rules</link>.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>List of Jetty IoC XML Configurations</term>

      <listitem>
        <para>A Module can optionally declare a list of Jetty IoC XML
        configurations used to wire up the functionality that this module
        defines.</para>

        <para>The <code>[xml]</code> section declares a set of pathnames that
        follow the <link linkend="base-vs-home-resolution">Jetty Base and
        Jetty Home path resolution rules</link>.</para>

        <para>Ideally, all XML files are parameterized to accept properties to
        configure the various elements of the standard configuration. Allowing
        for a simplified configuration of Jetty for the vast majority of
        deployments.</para>

        <para>The execution order of the Jetty IoC XML configurations is
        determined by the graph of active module dependencies resolved via the
        <code>[depend]</code> sections.</para>

        <para>If the default XML is not sufficient to satisfy your needs, you
        can override this XML by making your own in the ${jetty.base}/etc/
        directory, with the same name. The resolution steps for Jetty Base and
        Jetty Home will ensure that your copy from ${jetty.base} will be
        picked up over the default one in ${jetty.home}.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Jetty INI Template</term>

      <listitem>
        <para>Each module can optionally declare a startup ini template that
        is used to insert/append/inject sample configuration elements into the
        <filename>start.ini</filename> or <filename>start.d/*.ini</filename>
        files when using the <literal>--add-to-start=&lt;name&gt;</literal> or
        <literal>--add-to-startd=&lt;name&gt;</literal> command line arguments
        in <filename>start.jar</filename>.</para>

        <para>Commonly used to present some of the parameterized property
        options from the Jetty IoC XML configuration files also referenced in
        the same module.</para>

        <para>The <code>[ini-template]</code> section declares this section of
        sample configuration.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Required Files and Directories</term>

      <listitem>
        <para>If the activation of a module requires some paths to exist, the
        <code>[files]</code> section defines them.</para>

        <para>There are 2 modes of operation of the entries in this
        section.</para>

        <variablelist>
          <varlistentry>
            <term>Ensure Directory Exists</term>

            <listitem>
              <para>If you add a pathname that ends in
              <filename>"/"</filename> (slash), such as
              <filename>"webapps/"</filename>, then that directory will be
              created if it does not yet exist in
              <filename>${jetty.base}/&lt;pathname&gt;</filename> (eg:
              <filename>"webapps/"</filename> will result in
              <filename>${jetty.base}/webapps/</filename> being
              created)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Download File</term>

            <listitem>
              <para>There is a special syntax to allow you to download a file
              into a specific location if it doesn't exist yet.</para>

              <para><code>&lt;url&gt;:&lt;pathname&gt;</code></para>

              <para>Currently, the <filename>&lt;url&gt;</filename> must be a
              <literal>http://</literal> scheme URL (<link linkend="bugs">file
              a bug</link> if you want more schemes supported). The
              <filename>&lt;pathname&gt;</filename> portion follows the <link
              linkend="base-vs-home-resolution">Jetty Base and Jetty Home path
              resolution rules</link>.</para>

              <para>Example:</para>

              <para><filename>http://repo.corp.com/maven/corp-security-policy-1.0.jar:lib/corp-security-policy.jar</filename></para>

              <para>This will check for the existence of
              <filename>lib/corp-security-policy.jar</filename>, and if it
              doesn't exist, it will download the jar file from
              <filename>http://repo.corp.com/maven/corp-security-policy-1.0.jar</filename></para>
            </listitem>
          </varlistentry>
        </variablelist>
      </listitem>
    </varlistentry>
  </variablelist>

  <section xml:id="enabling-modules">
    <title>Enabling Modules</title>

    <para>Jetty ships with many modules defined, and a small subset predefined
    in the <filename>start.ini</filename> found in the jetty
    distribution.</para>

    <tip>
      <para>The default distribution has a co-mingled
      <filename>${jetty.home}</filename> and
      <filename>${jetty.base}</filename>. Where the directories for
      <filename>${jetty.home}</filename> and
      <filename>${jetty.base}</filename> point to the same location.</para>

      <para>It is highly encouraged that you learn about the differences in
      <link linkend="startup-base-and-home">Jetty Base vs Jetty Home</link>
      and take full advantage of this setup.</para>
    </tip>

    <para>When you want enable a module, you can use the
    <literal>--module=&lt;modulename&gt;</literal> syntax on the command line
    (or start.ini) to enable that module and all of its dependant
    modules.</para>

    <para>An example of this, with a new, empty, base directory.</para>

    <xi:include href="screen-empty-base.xml"/>

    <para>We can see from this output, that the directory is new (it is empty
    after all).</para>

    <para>Lets see what the configuration looks like so far</para>

    <xi:include href="screen-empty-base-listconfig.xml"/>

    <para>Lets try adding some basic support for webapps, with automatic
    deploy (hot deploy), and a single basic HTTP/1.1 connector.</para>

    <xi:include href="screen-http-webapp-deploy.xml"/>

    <para>That just created what we need in the
    <literal>${jetty.base}</literal> directory. Lets see what it looks like
    configuration wise.</para>

    <xi:include href="screen-http-webapp-deploy-listconfig.xml"/>

    <para>You now have a configured and functional server, albiet with no
    webapps deployed. At this point you can toss a webapp (war file) into
    <filename>mybase/webapps/</filename> directory and and start Jetty</para>
  </section>

  <section xml:id="startup-listing-modules">
    <title>Listing Available and Active Modules</title>

    <para>To see which modules are <emphasis>available</emphasis>, use the
    <literal>--list-modules</literal> command line argument. This command will
    also show you which modules are <emphasis>enabled</emphasis>. Here's an
    example</para>

    <xi:include href="screen-list-modules.xml"/>

    <para>Wow, are there really that many modules available?</para>

    <para>Yes, the module system has grown a fair bit since it was introduced
    in Jetty 9</para>

    <mediaobject>
      <info>
        <title>Jetty Module Tree</title>
      </info>

      <imageobject>
        <imagedata align="center" fileref="images/modules-9.3-simplified.png"
                   format="PNG" width="8in"/>
      </imageobject>
    </mediaobject>

    <para/>

    <para/>
  </section>
</section>
