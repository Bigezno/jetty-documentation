<?xml version="1.0" encoding="utf-8"?>
<section version="5.0" xml:id="jetty-xml-syntax"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1999/xhtml"
         xmlns:ns3="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Jetty XML Syntax</title>

  <para>The Jetty XML syntax is a straightforward mapping of XML elements to a
  Java API so that POJOs can be instantiated and getters, setters, and methods
  called. It is very similar to Inversion Of Control (IOC) or Dependency
  Injection (DI) frameworks like Spring or Plexus (but it predates all of
  them). Typically Jetty XML is used by <filename>jetty.xml</filename> to
  configure a Jetty server or by a <filename>context.xml</filename> file to
  configure a ContextHandler or subclass, but you can also use the mechanism
  to configure arbitrary POJOs.</para>

  <para>This page describes the basic syntax of Jetty XML configuration. See
  <link linkend="jetty-xml-usage">Jetty XML Usage</link> for information on
  how you can use and combine Jetty XML. See configuration files for specific
  examples.</para>

  <section xml:id="basic-xml-configuration-file-eaxmple">
    <title>Basic XML Configuration File Example</title>

    <para>The following XML configuration file creates some Java objects and
    sets some attributes:</para>

    <informalexample>
      <programlisting language="xml">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure.dtd"&gt;
&lt;Configure id="foo" class="com.acme.Foo"&gt;
  &lt;Set name="name"&gt;demo&lt;/Set&gt;
  &lt;Set name="nested"&gt;
    &lt;New id="bar" class="com.acme.Bar"&gt;
      &lt;Arg&gt;true&lt;/Arg&gt;
      &lt;Set name="wibble"&gt;10&lt;/Set&gt;
      &lt;Set name="wobble"&gt;xyz&lt;/Set&gt;
      &lt;Set name="parent"&gt;&lt;Ref refid="foo"/&gt;&lt;/Set&gt;
      &lt;Call name="init"&gt;
         &lt;Arg&gt;false&lt;/Arg&gt;
      &lt;/Call&gt;
    &lt;/New&gt;
  &lt;/Set&gt;

  &lt;Ref refid="bar"&gt;
    &lt;Set name="wibble"&gt;20&lt;/Set&gt;
    &lt;Get name="parent"&gt;
      &lt;Set name="name"&gt;demo2&lt;/Set&gt;
    &lt;/Get&gt;
  &lt;/Ref&gt;
&lt;/Configure&gt;      </programlisting>
    </informalexample>

    <para>The XML above is equivalent to the following Java code:</para>

    <informalexample>
      <programlisting language="java">com.acme.Foo foo = new com.acme.Foo();
foo.setName("demo");

com.acme.Bar bar = new com.acme.Bar(true);
bar.setWibble(10);
bar.setWobble("xyz");
bar.setParent(foo);
bar.init(false);

foo.setNested(bar);

bar.setWibble(20);
bar.getParent().setName("demo2");      </programlisting>
    </informalexample>
  </section>

  <section>
    <title>Overview</title>

    <section>
      <title>Understanding DTD and Parsing</title>

      <para>The document type descriptor (<link
      xl:href="http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/tree/jetty-xml/src/main/resources/org/eclipse/jetty/xml/configure_9_0.dtd?h=release-9">configure.dtd</link>)
      describes all valid elements in a Jetty XML configuration file using the
      Jetty IoC format. The first two lines of an XML must reference the DTD
      to be used to validate the XML like:</para>

      <programlisting language="xml">

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE Configure PUBLIC "-//Mort Bay Consulting//DTD Configure//EN" "http://www.eclipse.org/jetty/configure_9_0.dtd"&gt;
...

      </programlisting>

      <para>Typcically a good XML editor will fetch the DTD from the URL and
      use it to give syntax highlighting and validation while a configuration
      file is being edited. Some editors also allows DTD files to be locally
      cached. The URL may point to configure.dtd if you want the latest
      current version, or to a specific version like configure_9_0.dtd if you
      want a particular validation feature set.</para>

      <para>Files that conform to the configure.dtd format are processed in
      Jetty by the <code><link
      xl:href="@JDURL@/org/eclipse/jetty/xml/XmlConfiguration.html">XmlConfiguration</link></code>
      class which may also validate the XML (using a version of the DTD from
      the classes jar file), but is by default run in a forgiving mode that
      tries to work around validation failures.</para>
    </section>

    <section>
      <title>Jetty XML Configuration Scope</title>

      <para>The configuration of object instances with Jetty IoC XML is done
      on a scoped basis, so that for any given XML element there is a
      corresponding Object in scope and the nested XML elements apply to that.
      The outer most scope is given by a Configure element and elements like
      Call, New and Get establish new scopes. The following example uses the
      name fields to explain the scope</para>

      <programlisting language="xml">
&lt;Configure class="com.example.Foo"&gt;
  &lt;Set name="fieldOnFoo"&gt;value&lt;/Set&gt;
  &lt;Set name="fieldOnFoo"&gt;
    &lt;New class="com.example.Bar"&gt;
      &lt;Set name=fieldOnBar&gt;value&lt;/Set&gt;
      &lt;Call name="methodOnBarWithNoArgs"/&gt;
    &lt;/New&gt;
  &lt;/Set&gt;

  &lt;Call name="methodOnFoo"&gt;
    &lt;Arg&gt;value for first arg of methodOnFoo&lt;/Arg&gt;
    &lt;Arg&gt;&lt;New class="com.example.Bar"/&gt;&lt;/Arg&gt;
    &lt;Set name="fieldOnObjectReturnedByMethodOnFoo"&gt;value&lt;/Set&gt;
    &lt;Call name="methodOnObjectReturnedByMethodOnFooWithNoArgs"/&gt;
  &lt;/Call&gt;
&lt;/Configure&gt;
      </programlisting>
    </section>

    <section>
      <title>Coercing Arguments to a Type</title>

      <para>When trying to match XML elements to java elements, Jetty
      XmlConfiguration may need to coerces values to match method arguments.
      By default it does so on a best effort basis, but you can also specify
      explicit types with the <literal>type</literal> attribute. Supported
      values for type are: String, Character, Short, Byte, Integer, Long,
      Boolean, Float, Double, char, short, byte, int, long, boolean, float,
      double, URL, InetAddress, InetAddrPort, void</para>
    </section>

    <section>
      <title>Referring to a Class</title>

      <para>If you do not specify the classname, Jetty assumes you are calling
      the method on the object that is current in scope (eg the object of the
      surrounding Configure, New or Get clause). If the class attribute is
      specified to a fully-qualified class name, then it is either used to
      create a new instance (Configure and New elements) or is used to access
      a static (Call, Set or Get elements).</para>
    </section>

    <section>
      <title>Referring to an Object</title>

      <para>You can use the id attribute to store a reference to the current
      object when first creating or referring to this object. You can then use
      the <link linkend="jetty-xml-ref">Ref element</link> to reference the
      object later. The id must be unique for each object you create.</para>
    </section>

    <section>
      <title>Attribute vs Element Style</title>

      <para>For XML elements that contain only other XML Elements, there is a
      choice of using attributes or elements style. The following is an
      example of attribute style:</para>

      <programlisting>  &lt;Call id="result" class="org.example.SomeClass" name="someMethod" arg="value0,value1"/&gt;</programlisting>

      <para>Attribute style has the benefit of brevity, but is limited by:
      values can only be Strings; multivalued items can not contain ',';
      values may not be subject to property expansion or other elements that
      return values. Thus the more verbose element style is available and the
      following is semantically equivalent to the attribute style
      above:</para>

      <programlisting>  &lt;Call&gt;
    &lt;Id&gt;result&lt;/Id&gt;
    &lt;Class&gt;org.example.SomeClass&lt;/Class&gt;
    &lt;Name&gt;someMethod&lt;/Name&gt;
    &lt;Arg&gt;value0&lt;/Arg&gt;
    &lt;Arg&gt;value1&lt;/Arg&gt;
  &lt;/Call&gt;</programlisting>

      <para>Note that multivalued elements like Arg, must be repeated and may
      not be comma separated like they are when provided as attributes. It is
      possible to use a mix of styles and the following example shows a more
      typical example that uses property expansion as the reason for element
      style:</para>

      <programlisting>  &lt;Call id="result" name="someMethod"&gt;
    &lt;Class&gt;&lt;Property name="which.class"&gt;
      &lt;Default&gt;&lt;Property name="default.class" default="org.example.SomeClass"/&gt;
    &lt;/Property&gt;&lt;/Class&gt;
    &lt;Arg&gt;value0&lt;/Arg&gt;
    &lt;Arg&gt;value1&lt;/Arg&gt;
  &lt;/Call&gt;</programlisting>

      <para>Attributes may not be expressed as elements when their parent
      element is one that contains data. Thus Arg, Item, Set, Put and Get
      elements may not have their attributes expressed as elements.</para>
    </section>
  </section>

  <section xml:id="jetty-xml-configure">
    <title>&lt;Configure&gt;</title>

    <para>This is the root element that specifies the class of object that is
    to be configured. It is usually either the Server, in
    <code>jetty.xml</code>, or a WebAppContext in
    <code>jetty-web.xml</code>.</para>

    <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="left">Attribute</entry>

            <entry align="center">Required</entry>

            <entry align="left">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>id</entry>

            <entry>no</entry>

            <entry><para>A reference to the object that was created. If you
            define multiple <link linkend="jetty-xml-configure">Configure
            element</link>s with the same id, they will be treated as one
            object, even if they're in different files. You can use this to
            break up configuration of an object (such as the Server) across
            multiple files.</para></entry>
          </row>

          <row>
            <entry>class</entry>

            <entry>no</entry>

            <entry>The fully qualified classname of the object to be
            configured. Could be org.eclipse.jetty.server.Server,
            org.eclipse.jetty.webapp.WebAppContext, a handler, etc.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <section>
      <title>Can Contain</title>

      <para><link linkend="jetty-xml-set">Set element</link>, <link
      linkend="jetty-xml-get">Get element</link>, <link
      linkend="jetty-xml-put">Put element</link>, <link
      linkend="jetty-xml-call">Call element</link>, <link
      linkend="jetty-xml-new">New element</link>, <link
      linkend="jetty-xml-ref">Ref element</link>, <link
      linkend="jetty-xml-array">Array element</link>, <link
      linkend="jetty-xml-map">Map element</link>, <link
      linkend="jetty-xml-property">Property element</link></para>
    </section>

    <!--
<Set>,<Get>, <Put>, <Call>, <New>, <Ref>, <Array>, <Map>, <Property>
-->

    <section>
      <title>Examples</title>

      <section>
        <title>Basic Example</title>

        <informalexample>
          <programlisting language="xml">&lt;Configure class="org.eclipse.jetty.server.Server"&gt;
  &lt;Set name="port"&gt;8080&lt;/Set&gt;
&lt;/Configure&gt;          </programlisting>
        </informalexample>

        <para>This is equivalent to:</para>

        <informalexample>
          <programlisting language="java">org.eclipse.jetty.server.Server server = new org.eclipse.jetty.server.Server();
server.setPort(8080);          </programlisting>
        </informalexample>
      </section>

      <section>
        <title>Using id to break up configuration of one object across
        multiple files</title>

        <para>(etc/jetty.xml)</para>

        <informalexample>
          <programlisting language="xml">&lt;Configure id="Server" class="org.eclipse.jetty.server.Server"&gt;
  &lt;!-- basic configuration here --&gt;
&lt;/Configure&gt;          </programlisting>
        </informalexample>

        <para>(etc/jetty-logging.xml)</para>

        <informalexample>
          <programlisting language="xml">&lt;Configure id="Server" class="org.eclipse.jetty.server.Server"&gt;
  &lt;!-- assumes that you have the basic server configuration set up; this file only contains additional configuration for logging --&gt;
&lt;/Configure&gt;         </programlisting>
        </informalexample>

        <para>Then run the combined configuration using:</para>

        <screen linenumbering="numbered">java -jar start.jar etc/jetty.xml jetty-logging.xml        </screen>
      </section>
    </section>
  </section>

  <section xml:id="jetty-xml-set">
    <title>&lt;Set&gt;</title>

    <para>A Set element maps to a call to a setter method or field on the
    current object. It can contain text and/or elements such as Call, New,
    SystemProperty, etc., as values. The name and optional type attributes are
    used to select the setter method. If you do not specify a value type,
    white space is trimmed out of the value. If it contains multiple elements
    as values, they are added as strings before being converted to any
    specified type.</para>

    <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="left">Attribute</entry>

            <entry align="center">Required</entry>

            <entry align="left">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>name</entry>

            <entry>yes</entry>

            <entry>the name of the setter method to call, or the field to set.
            If the name given is xxx, then a setXxx method is used. If the
            setXxx method cannot be found, then the xxx field is used.</entry>
          </row>

          <row>
            <entry>type</entry>

            <entry>no</entry>

            <entry>the declared type of the argument. See also discussion of
            type for Arg for how to define null and empty string
            values.</entry>
          </row>

          <row>
            <entry>class</entry>

            <entry>no</entry>

            <entry>if present, then this Set is treated as a static set method
            invocation</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <section>
      <title>Can Contain</title>

      <para>value text, <link linkend="jetty-xml-get">Get element</link>,
      <link linkend="jetty-xml-call">Call element</link>, <link
      linkend="jetty-xml-new">New element</link>, <link
      linkend="jetty-xml-ref">Ref element</link>, <link
      linkend="jetty-xml-array">Array element</link>, <link
      linkend="jetty-xml-map">Map element</link>, <link
      linkend="jetty-xml-system-property">System Property element</link>,
      <link linkend="jetty-xml-property">Property element</link></para>
    </section>

    <!--
value text, <Get>, <Call>, <New>, <Ref>, <Array>, <Map>, <SystemProperty>, <Property>
-->

    <section>
      <title>Examples</title>

      <section>
        <title>Basic Example</title>

        <informalexample>
          <programlisting language="xml">&lt;Configure id="server" class="org.eclipse.jetty.server.Server"&gt;
  &lt;Set name="port"&gt;8080&lt;/Set&gt;
&lt;/Configure&gt;          </programlisting>
        </informalexample>
      </section>

      <section>
        <title>Set via a System Property</title>

        <informalexample>
          <programlisting language="xml">&lt;Configure id="server" class="org.eclipse.jetty.server.Server"&gt;
  &lt;Set name="port"&gt;&lt;SystemProperty name="jetty.http.port" /&gt;&lt;/Set&gt;
&lt;/Configure&gt;          </programlisting>
        </informalexample>
      </section>

      <section>
        <title>Creating a NewObject and Setting It on the Server</title>

        <informalexample>
          <programlisting language="xml">&lt;Configure id="server" class="org.eclipse.jetty.server.Server"&gt;
  &lt;Set name="threadPool"&gt;
    &lt;New class="org.eclipse.jetty.util.thread.QueuedThreadPool"&gt;
      &lt;Set name="minThreads"&gt;10&lt;/Set&gt;
      &lt;Set name="maxThreads"&gt;1000&lt;/Set&gt;
    &lt;/New&gt;
  &lt;/Set&gt;
&lt;/Configure&gt;          </programlisting>
        </informalexample>

        <para>This is equivalent to:</para>

        <informalexample>
          <programlisting language="java">org.eclipse.jetty.server.Server server = new org.eclipse.jetty.server.Server();

org.eclipse.jetty.util.thread.QueuedThreadPool threadPool = new org.eclipse.jetty.util.thread.QueuedThreadPool();
threadPool.setMinThreads(10);
threadPool.setMaxThreads(1000);

server.setThreadPool(threadPool);          </programlisting>
        </informalexample>
      </section>

      <section>
        <title>Invoking a Static Setter</title>

        <informalexample>
          <programlisting language="xml">&lt;Configure id="server" class="org.eclipse.jetty.server.Server"&gt;
  &lt;Set class="org.eclipse.jetty.util.log.Log" name="logToParent"&gt;loggerName&lt;/Set&gt;
&lt;/Configure"&gt;          </programlisting>
        </informalexample>
      </section>
    </section>
  </section>

  <section xml:id="jetty-xml-get">
    <title>&lt;Get&gt;</title>

    <para>A Get element maps to a call to a getter method or field on the
    current object. It can contain nested elements such as Set, Put, Call,
    etc.; these act on the object returned by the Get call.</para>

    <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="left">Attribute</entry>

            <entry align="center">Required</entry>

            <entry align="left">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>name</entry>

            <entry>yes</entry>

            <entry>the name of the getter method to call, or the field to get.
            If the name given is xxx, then a getXxx method is used. If the
            getXxx method cannot be found, then the xxx field is used.</entry>
          </row>

          <row>
            <entry>class</entry>

            <entry>no</entry>

            <entry>f present, then this Get is treated as a static getter or
            field.</entry>
          </row>

          <row>
            <entry>id</entry>

            <entry>no</entry>

            <entry>if present, then you can use this id to refer to the
            returned object later.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <section>
      <title>Can Contain</title>

      <para><link linkend="jetty-xml-set">Set element</link>, <link
      linkend="jetty-xml-get">Get element</link>, <link
      linkend="jetty-xml-put">Put element</link>, <link
      linkend="jetty-xml-call">Call element</link>, <link
      linkend="jetty-xml-new">New element</link>, <link
      linkend="jetty-xml-ref">Ref element</link>, <link
      linkend="jetty-xml-array">Array element</link>, <link
      linkend="jetty-xml-map">Map element</link>, <link
      linkend="jetty-xml-property">Property element</link></para>
    </section>

    <!--
<Set>,<Get>, <Put>, <Call>, <New>, <Ref>, <Array>, <Map>, <Property>
-->

    <section>
      <title>Examples</title>

      <section>
        <title>Basic Example</title>

        <para>This simple example doesn't do much on its own. You would
        normally use this in conjunction with a &lt;Ref id="Logger"
        /&gt;.</para>

        <informalexample>
          <programlisting language="xml">&lt;Configure id="server" class="org.eclipse.jetty.server.Server"&gt;
  &lt;Get id="Logger" class="org.eclipse.jetty.util.log.Log" name="log"/&gt;
&lt;/Configure&gt;          </programlisting>
        </informalexample>
      </section>

      <section>
        <title>Invoking a Static Getter and Call Methods on the Returned
        Object</title>

        <informalexample>
          <programlisting language="xml">&lt;Configure id="server" class="org.eclipse.jetty.server.Server"&gt;
    &lt;Get class="java.lang.System" name="out"&gt;
      &lt;Call name="println"&gt;
        &lt;Arg&gt;Server version is: &lt;Get class="org.eclipse.jetty.server.Server" name="version"/&gt;&lt;/Arg&gt;
      &lt;/Call&gt;
    &lt;/Get&gt;
&lt;/Configure&gt;          </programlisting>
        </informalexample>
      </section>
    </section>
  </section>

  <section xml:id="jetty-xml-put">
    <title>&lt;Put&gt;</title>

    <para>A Put element maps to a call to a put method on the current object,
    which must implement the Map interface. It can contain text and/or
    elements such as Call, New, SystemProperty, etc. as values. If you do not
    specify a no value type, white space is trimmed out of the value. If it
    contains multiple elements as values, they are added as strings before
    being converted to any specified type.</para>

    <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="left">Attribute</entry>

            <entry align="center">Required</entry>

            <entry align="left">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>name</entry>

            <entry>yes</entry>

            <entry>used as the put key</entry>
          </row>

          <row>
            <entry>type</entry>

            <entry>no</entry>

            <entry>forces the type of the value. See also discussion of type
            for Arg for how to define null and empty string values.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <section>
      <title>Can Contain</title>

      <para>value text , <link linkend="jetty-xml-get">Get element</link>,
      <link linkend="jetty-xml-call">Call element</link>, <link
      linkend="jetty-xml-new">New element</link>, <link
      linkend="jetty-xml-ref">Ref element</link>, <link
      linkend="jetty-xml-array">Array element</link>, <link
      linkend="jetty-xml-map">Map element</link>, <link
      linkend="jetty-xml-system-property">System Property element</link>,
      <link linkend="jetty-xml-property">Property element</link></para>
    </section>

    <!--
value text, <Get>, <Call>, <New>, <Ref>, <Array>, <Map>, <SystemProperty>, <Property>
-->

    <section>
      <title>Example</title>

      <informalexample>
        <programlisting language="xml">&lt;Get name="someKindOfMap"&gt;
   &lt;Put name="keyName"&gt;objectValue&lt;/Put&gt;
&lt;/Get&gt;        </programlisting>
      </informalexample>
    </section>
  </section>

  <section xml:id="jetty-xml-call">
    <title>&lt;Call&gt;</title>

    <para>A Call element maps to an arbitrary call to a method on the current
    object. It can contain a sequence of Arg elements followed by a sequence
    of configuration elements, such as Set, Put, Call. The &lt;Arg&gt;s are
    passed as arguments to the method; the sequence of configuration elements
    act on the object returned by the original call.</para>

    <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="left">Attribute</entry>

            <entry align="center">Required</entry>

            <entry align="left">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>name</entry>

            <entry>yes</entry>

            <entry>the name of the arbitrary method to call. The method called
            will use the exact name you provide it.</entry>
          </row>

          <row>
            <entry>class</entry>

            <entry>no</entry>

            <entry>if present, then this Call is treated as a static
            method.</entry>
          </row>

          <row>
            <entry>id</entry>

            <entry>no</entry>

            <entry>if present, you can use this id to refer to any object
            returned by the call, for later use.</entry>
          </row>

          <row>
            <entry>arg</entry>

            <entry>no</entry>

            <entry>comma separated list of arguments may be used for simple
            string values rather than Arg elements</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <section>
      <title>Can Contain</title>

      <para>Attributes as elements (Id, Name, Class) plus <link
      linkend="jetty-xml-arg">Arg element</link>, <link
      linkend="jetty-xml-set">Set element</link>, <link
      linkend="jetty-xml-get">Get element</link>, <link
      linkend="jetty-xml-put">Put element</link>, <link
      linkend="jetty-xml-call">Call element</link>, <link
      linkend="jetty-xml-new">New element</link>, <link
      linkend="jetty-xml-ref">Ref element</link>, <link
      linkend="jetty-xml-array">Array element</link>, <link
      linkend="jetty-xml-map">Map element</link>, <link
      linkend="jetty-xml-property">Property element</link></para>
    </section>

    <!--<Arg>, <Set>,<Get>, <Put>, <Call>, <New>, <Ref>, <Array>, <Map>, <Property>-->

    <section>
      <title>Examples</title>

      <section>
        <title>Basic example</title>

        <informalexample>
          <programlisting language="xml">&lt;Call name="doFoo"&gt;
  &lt;Arg&gt;bar&lt;/Arg&gt;
  &lt;Set name="test"&gt;1, 2, 3&lt;/Set&gt;
&lt;/Call&gt;          </programlisting>
        </informalexample>

        <para>This is equivalent to:</para>

        <informalexample>
          <programlisting language="java">Object o2 = o1.doFoo("bar");
o2.setTest("1, 2, 3");          </programlisting>
        </informalexample>
      </section>

      <section>
        <title>Invoking a static method</title>

        <informalexample>
          <programlisting language="xml">&lt;Call class="com.acme.Foo" name="setString"&gt;
  &lt;Arg&gt;somestring&lt;/Arg&gt;
&lt;/Call&gt;          </programlisting>
        </informalexample>

        <para>which is equivalent to:</para>

        <informalexample>
          <programlisting language="java">com.acme.Foo.setString("somestring");          </programlisting>
        </informalexample>
      </section>

      <section>
        <title>Invoking the Actual MethodInstead of Relying on Getter/Setter
        Magic</title>

        <informalexample>
          <programlisting language="xml">&lt;Configure id="Server" class="org.eclipse.jetty.server.Server"&gt;
  &lt;Call name="getPort" id="port" /&gt;
  &lt;Call class="com.acme.Environment" name="setPort"&gt;
    &lt;Arg&gt;
      &lt;Ref refid="port"/&gt;
    &lt;/Arg&gt;
  &lt;/Call&gt;
&lt;/Configure&gt;          </programlisting>
        </informalexample>

        <para>which is equivalent to:</para>

        <informalexample>
          <programlisting language="java">org.mortbay.jetty.Server server = new org.mortbay.jetty.Server();
com.acme.Environment.setPort( server.getPort() );          </programlisting>
        </informalexample>
      </section>
    </section>
  </section>

  <section xml:id="jetty-xml-arg">
    <title>&lt;Arg&gt;</title>

    <para>An Arg element can be an argument of either a method or a
    constructor. Use it within <xref linkend="jetty-syntax-call"/> and <xref
    linkend="jetty-syntax-new"/>.</para>

    <para>It can contain text and/or elements, such as Call, New,
    SystemProperty, etc., as values. The optional type attribute can force the
    type of the value. If you don't specify a type, white space is trimmed out
    of the value. If it contains multiple elements as values, they are added
    as strings before being converted to any specified type. Simple String
    arguments can also be specified as a string separated arg attribute on the
    parent element.</para>

    <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="left">Attribute</entry>

            <entry align="center">Required</entry>

            <entry align="left">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>type</entry>

            <entry>no</entry>

            <entry>force the type of the argument. If you do not provide a
            value for the element, if you use type of "String", the value will
            be the empty string (""), otherwise it is null.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <section>
      <title>Can Contain</title>

      <para>value text, <link linkend="jetty-xml-get">Get element</link>,
      <link linkend="jetty-xml-call">Call element</link>, <link
      linkend="jetty-xml-new">New element</link>, <link
      linkend="jetty-xml-ref">Ref element</link>, <link
      linkend="jetty-xml-array">Array element</link>, <link
      linkend="jetty-xml-map">Map element</link>, <link
      linkend="jetty-xml-system-property">System Property element</link>,
      <link linkend="jetty-xml-property">Property element</link></para>
    </section>

    <!--
value text, <Get>, <Call>, <New>, <Ref>, <Array>, <Map>, <SystemProperty>, <Property>
-->

    <section>
      <title>Examples</title>

      <section>
        <title>Basic examples</title>

        <informalexample>
          <programlisting language="xml">&lt;Arg&gt;foo&lt;/Arg&gt; &lt;!-- String --&gt;
&lt;Arg&gt;true&lt;/Arg&gt; &lt;!-- Boolean --&gt;
&lt;Arg&gt;1&lt;/Arg&gt; &lt;!-- int, long, short, float, double --&gt;
&lt;Arg&gt;&lt;Ref refid="foo" /&gt;&lt;/Arg&gt;  &lt;!-- any object; reference a previously created object with id "foo", and pass it as a parameter --&gt;
&lt;Arg&gt;&lt;/Arg&gt; &lt;!-- null value --&gt;
&lt;Arg type="String"&gt;&lt;/Arg&gt; &lt;!-- empty string "" -&gt;          </programlisting>
        </informalexample>
      </section>

      <section>
        <title>Coercing Type</title>

        <para>This explicitly coerces the type to a boolean:</para>

        <informalexample>
          <programlisting language="xml">&lt;Arg type="boolean"&gt;False&lt;/Arg&gt;          </programlisting>
        </informalexample>
      </section>

      <section>
        <title>As a Parameter</title>

        <para>Here are a couple of examples of <link
        linkend="jetty-xml-arg">Arg element</link> being used as a parameter
        to methods and to constructors:</para>

        <informalexample>
          <programlisting language="xml">&lt;Call class="com.acme.Environment" name="setFoo"&gt;
  &lt;Arg&gt;
    &lt;New class="com.acme.Foo"&gt;
      &lt;Arg&gt;bar&lt;/Arg&gt;
    &lt;/New&gt;
  &lt;/Arg&gt;
&lt;/Call&gt;          </programlisting>
        </informalexample>

        <para>This is equivalent to:</para>

        <informalexample>
          <programlisting language="java">com.acme.Environment.setFoo(new com.acme.Foo("bar"));          </programlisting>
        </informalexample>

        <informalexample>
          <programlisting language="xml">&lt;New class="com.acme.Baz"&gt;
  &lt;Arg&gt;
    &lt;Call id="bar" class="com.acme.MyStaticObjectFactory" name="createObject"&gt;
      &lt;Arg&gt;2&lt;/Arg&gt;
    &lt;/Call&gt;
  &lt;/Arg&gt;
&lt;/New&gt;          </programlisting>
        </informalexample>

        <para>This is equivalent to:</para>

        <informalexample>
          <programlisting language="java">new com.acme.Baz(com.acme.MyStaticObjectFactory.createObject(2));          </programlisting>
        </informalexample>
      </section>
    </section>
  </section>

  <section xml:id="jetty-xml-new">
    <title>&lt;New&gt;</title>

    <para>Instantiates an object. Equivalent to new in Java, and allows the
    creation of a new object. A New element can contain a sequence of <link
    linkend="jetty-xml-arg">Arg element</link>'s, followed by a sequence of
    configuration elements (Set, Put, etc). <link linkend="jetty-xml-arg">Arg
    element</link>'s are used to select a constructor for the object to be
    created. The sequence of configuration elements then acts on the
    newly-created object.</para>

    <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="left">Attribute</entry>

            <entry align="center">Required</entry>

            <entry align="left">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>class</entry>

            <entry>yes</entry>

            <entry>fully qualified classname, which determines the type of the
            new object that is instantiated.</entry>
          </row>

          <row>
            <entry>id</entry>

            <entry>no</entry>

            <entry>gives a unique name to the object which can be referenced
            later by Ref elements.</entry>
          </row>

          <row>
            <entry>arg</entry>

            <entry>no</entry>

            <entry>comma separated list of arguments may be used for simple
            string values rather than Arg elements</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <section>
      <title>Can Contain</title>

      <para>Attributes as elements (Id, Class) plus <link
      linkend="jetty-xml-arg">Arg element</link>, <link
      linkend="jetty-xml-set">Set element</link>, <link
      linkend="jetty-xml-get">Get element</link>, <link
      linkend="jetty-xml-put">Put element</link>, <link
      linkend="jetty-xml-call">Call element</link>, <link
      linkend="jetty-xml-new">New element</link>, <link
      linkend="jetty-xml-ref">Ref element</link>, <link
      linkend="jetty-xml-array">Array element</link>, <link
      linkend="jetty-xml-map">Map element</link>, <link
      linkend="jetty-xml-property">Property element</link></para>
    </section>

    <!-- <Arg>, <Set>,<Get>, <Put>, <Call>, <New>, <Ref>, <Array>, <Map>, <Property> 
-->

    <section>
      <title>Examples</title>

      <section>
        <title>Basic example</title>

        <informalexample>
          <programlisting language="xml">&lt;New class="com.acme.Foo"&gt;
  &lt;Arg&gt;bar&lt;/Arg&gt;
&lt;/New&gt;          </programlisting>
        </informalexample>

        <para>which is equivalent to:</para>

        <informalexample>
          <programlisting language="java">com.acme.Foo foo = new com.acme.Foo("bar");          </programlisting>
        </informalexample>
      </section>

      <section>
        <title>Instantiate with the Default Constructor</title>

        <informalexample>
          <programlisting language="xml">&lt;New class="com.acme.Foo" /&gt;          </programlisting>
        </informalexample>

        <para>which is equivalent to:</para>

        <informalexample>
          <programlisting language="java">com.acme.Foo foo = new com.acme.Foo();        </programlisting>
        </informalexample>
      </section>

      <section>
        <title>Instantiate with Multiple Arguments, Then Configuring
        Further</title>

        <informalexample>
          <programlisting language="xml">&lt;New id="foo" class="com.acme.Foo"&gt;
   &lt;Arg&gt;bar&lt;/Arg&gt;
   &lt;Arg&gt;baz&lt;/Arg&gt;
   &lt;Set name="test"&gt;1, 2, 3&lt;/Set&gt;
 &lt;/New&gt;          </programlisting>
        </informalexample>

        <para>which is equivalent to:</para>

        <informalexample>
          <programlisting language="java">Object foo = new com.acme.Foo("bar", "baz");
foo.setTest("1, 2, 3");</programlisting>
        </informalexample>
      </section>
    </section>
  </section>

  <section xml:id="jetty-xml-ref">
    <title>&lt;Ref&gt;</title>

    <para>A Ref element allows a previously created object to be referenced by
    a unique id. It can contain a sequence of elements, such as Set or Put
    which then act on the referenced object. You can also use a Ref element as
    a value for other elements such as Set and Arg.</para>

    <para>The Ref element provides convenience and eases readability. You can
    usually achieve the effect of the Ref by nesting elements (method calls),
    but this can get complicated very easily. The Ref element makes it
    possible to refer to the same object if you're using it multiple times, or
    passing it into multiple methods. It also makes it possible to split up
    configuration across multiple files.</para>

    <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="left">Attribute</entry>

            <entry align="center">Required</entry>

            <entry align="left">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>refid</entry>

            <entry>yes</entry>

            <entry>the unique identifier used to name a previously created
            object.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <section>
      <title>Can Contain</title>

      <para><link linkend="jetty-xml-set">Set element</link>, <link
      linkend="jetty-xml-get">Get element</link>, <link
      linkend="jetty-xml-put">Put element</link>, <link
      linkend="jetty-xml-call">Call element</link>, <link
      linkend="jetty-xml-new">New element</link>, <link
      linkend="jetty-xml-ref">Ref element</link>, <link
      linkend="jetty-xml-array">Array element</link>, <link
      linkend="jetty-xml-map">Map element</link>, <link
      linkend="jetty-xml-property">Property element</link></para>
    </section>

    <!--<Set>,<Get>, <Put>, <Call>, <New>, <Ref>, <Array>, <Map>, <Property> -->

    <section>
      <title>Examples</title>

      <section>
        <title>Basic example</title>

        <para>Use the referenced object as an argument to a method call or
        constructor:</para>

        <informalexample>
          <programlisting language="xml">&lt;Get id="foo" name="xFoo" /&gt;
&lt;Set name="test"&gt;&lt;Ref refid="foo"/&gt;&lt;/Set&gt;            </programlisting>
        </informalexample>

        <para>This is equivalent to:</para>

        <informalexample>
          <programlisting language="java">foo = getXFoo();
setSomeMethod(foo);            </programlisting>
        </informalexample>
      </section>

      <section>
        <title>Manipulating the Object Returned by Ref</title>

        <informalexample>
          <programlisting language="xml">&lt;Get id="foo" name="xFoo" /&gt;
&lt;Ref refid="foo"&gt;
  &lt;Set name="test"&gt;1, 2, 3&lt;/Set&gt;
&lt;/Ref&gt;            </programlisting>
        </informalexample>

        <para>This is equivalent to:</para>

        <informalexample>
          <programlisting language="java">foo = getXFoo();
foo.setTest("1, 2, 3");            </programlisting>
        </informalexample>
      </section>

      <section>
        <title>Ref vs. Nested Elements</title>

        <para>Here is an example of the difference in syntax between using the
        Ref element, and nesting method calls. They are exactly
        equivalent:</para>

        <informalexample>
          <programlisting language="xml">&lt;!-- using Ref in conjunction with Get --&gt;
&lt;Configure id="Server" class="org.eclipse.jetty.server.Server"&gt;
  &lt;Get id="Logger" class="org.eclipse.jetty.util.log.Log" name="log"/&gt;
  &lt;Ref refid="Logger"&gt;
    &lt;Set name="debugEnabled"&gt;true&lt;/Set&gt;
  &lt;/Ref&gt;
&lt;/Configure&gt;
&lt;!-- calling the setter directly on the object returned by Get --&gt;
&lt;Configure id="Server" class="org.eclipse.jetty.server.Server"&gt;
  &lt;Get class="org.eclipse.jetty.util.log.Log" name="log"&gt;
    &lt;Set name="debugEnabled"&gt;true&lt;/Set&gt;
  &lt;/Get&gt;
&lt;/Configure&gt;            </programlisting>
        </informalexample>

        <para>Here is a more practical example, taken from the handler
        configuration section in <code> etc/jetty.xml</code>:</para>

        <informalexample>
          <programlisting language="xml">&lt;Set name="handler"&gt;
  &lt;New id="Handlers" class="org.eclipse.jetty.server.handler.HandlerCollection"&gt;
    &lt;Set name="handlers"&gt;
      &lt;Array type="org.eclipse.jetty.server.Handler"&gt;
        &lt;Item&gt;
          &lt;!-- create a new instance of a ContextHandlerCollection named "Contexts" --&gt;
          &lt;New id="Contexts" class="org.eclipse.jetty.server.handler.ContextHandlerCollection"/&gt;
        &lt;/Item&gt;
        &lt;Item&gt;
          &lt;New id="DefaultHandler" class="org.eclipse.jetty.server.handler.DefaultHandler"/&gt;
        &lt;/Item&gt;
        &lt;Item&gt;
          &lt;!-- create a new instance of a RequestLogHandler named "RequestLog" --&gt;
          &lt;New id="RequestLog" class="org.eclipse.jetty.server.handler.RequestLogHandler"/&gt;
        &lt;/Item&gt;
      &lt;/Array&gt;
    &lt;/Set&gt;
  &lt;/New&gt;
&lt;/Set&gt;

&lt;Call name="addBean"&gt;
  &lt;Arg&gt;
    &lt;New class="org.eclipse.jetty.deploy.ContextDeployer"&gt;
      &lt;!-- pass in the ContextHandlerCollection object ("Contexts") that was created earlier, as an argument --&gt;
      &lt;Set name="contexts"&gt;&lt;Ref refid="Contexts"/&gt;&lt;/Set&gt;
    &lt;/New&gt;
  &lt;/Arg&gt;
&lt;/Call&gt;

&lt;!-- configure the RequestLogHandler object ("RequestLog") that we created earlier --&gt;
&lt;Ref refid="RequestLog"&gt;
  ....
&lt;/Ref&gt;            </programlisting>
        </informalexample>
      </section>
    </section>
  </section>

  <section xml:id="jetty-xml-array">
    <title>&lt;Array&gt;</title>

    <para>An Array element allows the creation of a new array.</para>

    <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="left">Attribute</entry>

            <entry align="center">Required</entry>

            <entry align="left">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>type</entry>

            <entry>no</entry>

            <entry>specify what types of items the array can contain.</entry>
          </row>

          <row>
            <entry>id</entry>

            <entry>no</entry>

            <entry>unique identifier you can use to refer to the array
            later.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <section>
      <title>Can Contain</title>

      <para><link linkend="jetty-xml-item">Item element</link></para>
    </section>

    <!-- <Item> -->

    <section>
      <title>Example</title>

      <informalexample>
        <programlisting language="xml">&lt;Array type="java.lang.String"&gt;
   &lt;Item&gt;value0&lt;/Item&gt;
   &lt;Item&gt;&lt;New class="java.lang.String"&gt;&lt;Arg&gt;value1&lt;/Arg&gt;&lt;/New&gt;&lt;/Item&gt;
&lt;/Array&gt;</programlisting>
      </informalexample>

      <para>This is equivalent to:</para>

      <informalexample>
        <programlisting language="java">String[] a = new String[] { "value0", new String("value1") };              </programlisting>
      </informalexample>
    </section>
  </section>

  <section xml:id="jetty-xml-item">
    <title>&lt;Item&gt;</title>

    <para>An Item element defines an entry for Array and Map elements.</para>

    <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="left">Attribute</entry>

            <entry align="center">Required</entry>

            <entry align="left">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>type</entry>

            <entry>no</entry>

            <entry>force the types of value.</entry>
          </row>

          <row>
            <entry>id</entry>

            <entry>no</entry>

            <entry>unique identifier that you can use to refer to the array
            later.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <section>
      <title>Can Contain</title>

      <para><link linkend="jetty-xml-get">Get element</link>, <link
      linkend="jetty-xml-call">Call element</link>, <link
      linkend="jetty-xml-new">New element</link>, <link
      linkend="jetty-xml-ref">Ref element</link>, <link
      linkend="jetty-xml-array">Array element</link>, <link
      linkend="jetty-xml-map">Map element</link>, <link
      linkend="jetty-xml-system-property">System Property element</link>,
      <link linkend="jetty-xml-property">Property element</link></para>
    </section>

    <!--value text, <Get>, <Call>, <New>, <Ref>, <Array>, <Map>, <SystemProperty>, <Property>-->
  </section>

  <section xml:id="jetty-xml-map">
    <title>&lt;Map&gt;</title>

    <para>A Map element allows the creation of a new HashMap and to populate
    it with (key, value) pairs.</para>

    <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="left">Attribute</entry>

            <entry align="center">Required</entry>

            <entry align="left">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>id</entry>

            <entry>no</entry>

            <entry>unique identifier you can use to refer to the map
            later.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <section>
      <title>Can Contain</title>

      <para><link linkend="jetty-xml-entry">Entry element</link></para>
    </section>

    <section>
      <title>Example</title>

      <informalexample>
        <programlisting language="xml">&lt;Map&gt;
  &lt;Entry&gt;
    &lt;Item&gt;keyName&lt;/Item&gt;
    &lt;Item&gt;&lt;New class="java.lang.String"&gt;&lt;Arg&gt;value1&lt;/Arg&gt;&lt;/New&gt;&lt;/Item&gt;
  &lt;/Entry&gt;
&lt;/Map&gt;                </programlisting>
      </informalexample>

      <para>This is equivalent to:</para>

      <informalexample>
        <programlisting language="java">Map m = new HashMap();
m.put("keyName", new String("value1"));                </programlisting>
      </informalexample>
    </section>
  </section>

  <section xml:id="jetty-xml-entry">
    <title>&lt;Entry&gt;</title>

    <para>An Entry element contains a key-value <link
    linkend="jetty-xml-item">Item element</link> pair for a Map.</para>

    <section>
      <title>Can Contain</title>

      <para><link linkend="jetty-xml-item">Item element</link></para>
    </section>
  </section>

  <section xml:id="jetty-xml-system-property">
    <title>&lt;SystemProperty&gt;</title>

    <para>A SystemProperty element gets the value of a JVM system property. It
    can be used within elements that accept values, such as Set, Put,
    Arg.</para>

    <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="left">Attribute</entry>

            <entry align="center">Required</entry>

            <entry align="left">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>name</entry>

            <entry>yes</entry>

            <entry>property name</entry>
          </row>

          <row>
            <entry>default</entry>

            <entry>no</entry>

            <entry>a default value as a fallback</entry>
          </row>

          <row>
            <entry>id</entry>

            <entry>no</entry>

            <entry>unique identifier which you can use to refer to the array
            later.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <section>
      <title>Can Contain</title>

      <para>Only attributes as Elements (Id, Name, Default).</para>
    </section>

    <section>
      <title>Example</title>

      <informalexample>
        <programlisting language="xml">&lt;SystemProperty name="jetty.http.port" default="8080"/&gt;                </programlisting>
      </informalexample>

      <para>That is equivalent to:</para>

      <informalexample>
        <programlisting language="java">System.getProperty("jetty.http.port", "8080");                </programlisting>
      </informalexample>

      <para>Both try to retrieve the value of jetty.http.port. If jetty.http.port is not
      set, then 8080 is used.</para>
    </section>
  </section>

  <section xml:id="jetty-xml-property">
    <title>&lt;Property&gt;</title>

    <para>A Property element allows arbitrary properties to be retrieved by
    name. It can contain a sequence of elements, such as Set, Put, Call that
    act on the retrieved object.</para>

    <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="left">Attribute</entry>

            <entry align="center">Required</entry>

            <entry align="left">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>name</entry>

            <entry>yes</entry>

            <entry>property name</entry>
          </row>

          <row>
            <entry>default</entry>

            <entry>no</entry>

            <entry>a default value as a fallback</entry>
          </row>

          <row>
            <entry>id</entry>

            <entry>no</entry>

            <entry>unique identifier which you can use to refer to the array
            later.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The <code>name</code> attribute may be a comma separated list of
    property names, with the first property name being the "official" name,
    and the others names being old, deprecated property names that are kept
    for backward compatibility. A warning log is issued when deprecated
    property names are used. The <code>default</code> attribute contains the
    value to use in case none of the property names is found.</para>

    <section>
      <title>Can Contain</title>

      <para>The attributes may be expressed as contained Elements (Id, Name,
      Default).</para>
    </section>

    <section>
      <title>Example</title>

      <informalexample>
        <programlisting language="xml">&lt;Property name="Server"&gt;
  &lt;Call id="jdbcIdMgr" name="getAttribute"&gt;
    &lt;Arg&gt;jdbcIdMgr&lt;/Arg&gt;
  &lt;/Call&gt;
&lt;/Property&gt;                </programlisting>
      </informalexample>
    </section>
  </section>
</section>
