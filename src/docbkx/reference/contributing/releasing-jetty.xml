<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="releasing-jetty" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Releasing Jetty</title>

  <para>There are a number of steps to releasing jetty. It is not just limited
  to running a couple of maven commands and then moving onto bigger and better
  things. There are a number of process related issues once the fun maven bits
  have been completed.</para>

  <section xml:id="releasing-process">
    <title>Building and Staging a Releasable Version</title>

    <para>This release script is for jetty-9 (to release jetty-7 or jetty-8
    see older documentation).</para>

    <orderedlist>
      <listitem>
        <para>Pick your version identification strings.</para>

        <para>These follow a strict format and will be used when prompted
        during step <xref linkend="prepare-release-step"/> below.</para>

        <screen><![CDATA[

Release Version                : 9.0.0.v20130322  (v[year][month][day])
Next Development Version       : 9.0.1-SNAPSHOT
Tag Name                       : jetty-9.9.0.v20130322

        ]]></screen>
      </listitem>

      <listitem>
        <para>We use the 'release-9' branch to avoid problems with other
        developers actively working on the master branch.</para>

        <screen><![CDATA[

// Get all of the remotes
$ git pull origin
// Create a local tracking branch (if you haven't already)
$ git branch --track release-9 refs/remotes/origin/release-9
// Check out your local tracking branch.
$ git checkout release-9
// Merge from master into the branch (this becomes your point in time
// from master that you will be releasing from)
$ git merge --no-ff master

        ]]></screen>
      </listitem>

      <listitem>
        <para>Update the VERSION.txt with changes from the git logs, this
        populates the resolves issues since the last release.</para>

        <screen><![CDATA[

$ mvn -N -Pupdate-version        

        ]]></screen>
      </listitem>

      <listitem>
        <para>Edit the VERSION.txt file to set the 'Release Version' at the
        top alongside the Date of this release.</para>

        <screen><![CDATA[

$ vi VERSION.txt        

        ]]></screen>
      </listitem>

      <listitem>
        <para>Make sure everything is commit'd and pushed to
        github.com/eclipse/jetty.project</para>

        <screen><![CDATA[

$ git commit -m "Updating VERSION.txt top section" VERSION.txt
$ git push origin release-9        

        ]]></screen>
      </listitem>

      <listitem xml:id="prepare-release-step">
        <para>Prepare the Release</para>

        <para>NOTE: This step updates the &lt;version&gt; elements in the
        pom.xml files, does a test build with these new versions, and then
        commits the pom.xml changes to your local git repo. The
        <code>eclipse-release</code> profile is required on the prepare in
        order to bring in the jetty aggregates as that profile defines a
        module which is ignored otherwise.</para>

        <screen><![CDATA[

$ mvn release:prepare -DreleaseVersion=9.0.0.v20130322 \
                      -DdevelopmentVersion=9.0.1-SNAPSHOT \
                      -Dtag=jetty-9.0.0.v20130322 \
                      -Peclipse-release        

        ]]></screen>
      </listitem>

      <listitem>
        <para>Perform the Release</para>

        <para>NOTE: This step performs the release and deploys it to a
        oss.sonatype.org staging repository.</para>

        <screen><![CDATA[

$ mvn release:perform

        ]]></screen>
      </listitem>

      <listitem>
        <para>Set up files for next development versions.</para>

        <para>Edit <filename>VERSION.txt</filename> for 'Next Development
        Version' at the top. Do not date this line.</para>

        <para>Make sure everything is commit'd and pushed to
        github.com/eclipse/jetty.project</para>

        <screen><![CDATA[

$ vi VERSION.txt
$ git commit -m "Updating VERSION.txt top section" VERSION.txt
$ git push origin release-9

        ]]></screen>
      </listitem>

      <listitem>
        <para>Close the staging repository on oss.sonatype.org</para>
      </listitem>

      <listitem>
        <para>Announce stage to the mailing list for testing.</para>
      </listitem>

      <listitem>
        <para>Once the staged repository has been approved by the rest of the
        committers.</para>

        <orderedlist>
          <listitem>
            <para>Release the staging repository to maven central on
            oss.sonatype.org</para>
          </listitem>

          <listitem>
            <para>Merge back the changes in release-9 to master</para>

            <screen><![CDATA[

$ git checkout master
$ git merge --no-ff release-9
$ git push origin master

            ]]></screen>
          </listitem>
        </orderedlist>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="releasing-aggregates">
    <title>Building and Deploying Aggregate Javadoc and Xref</title>

    <para>Define the jetty.eclipse.website server entry in your
    .m2/settings.xml file. You'll need to have access to the dev.eclipse.org
    machine to perform these actions. If you don't know if you have access to
    this then you probably don't and will need to ask a project leader for
    help.</para>

    <para>To build and deploy the aggregate javadoc and jxr bits:</para>

    <screen><![CDATA[

$ cd target/checkout
$ mvn -Paggregate-site javadoc:aggregate jxr:jxr
$ mvn -N site:deploy   

    ]]></screen>

    <para>This will generate the aggregate docs and deploy them to the
    <filename>/home/www/jetty/&lt;project version&gt;/jetty-project</filename>
    directory on download.eclipse.org.</para>
  </section>

  <section xml:id="releasing-distributions">
    <title>Deploying Distribution Files</title>

    <para>Since we also provide alternative locations to download jetty
    distributions we need to copy these into place. There are a couple of
    scripts that will take care of this although they need to be localized to
    your particular execution environment and you need to have authorization
    to put stuff where it needs to go. These scripts are located at: <link
    xl:href="http://git.eclipse.org/c/jetty/org.eclipse.jetty.admin.git/tree/release-scripts">
    http://git.eclipse.org/c/jetty/org.eclipse.jetty.admin.git/tree/release-scripts</link>.</para>

    <para>To localize the scripts to your environment:</para>

    <itemizedlist>
      <listitem>
        <para>ensure you have "curl" installed</para>
      </listitem>

      <listitem>
        <para>edit the scripts and replace all ssh login lines with your own
        login id</para>
      </listitem>
    </itemizedlist>

    <para>Once these are setup you can deploy a release to eclipse and
    codehaus with the following incantation:</para>

    <screen><![CDATA[

$ ./promote-to-eclipse.sh 9.0.0.v20130322
( for 7 and 8 releases remember the codehaus part)
$ ./promote-to-codehaus.sh 8.1.0.v20130322 8.1.0    

    ]]></screen>

    <para>Each of these scripts will download all of the relevant files from
    maven central and then copy them into the correct location on eclipse and
    codehaus infrastructure. On the eclipse side of it they will also adjust
    the xref and javadoc documentation links if they remain broken as well as
    regenerate all of the html files on the eclipse download site.</para>
  </section>

  <section xml:id="releasing-stable-links">
    <title>Updating Stable Links</title>

    <para>Since we are not allowed to have symbolic links on the download site
    we have to log into the machine manually and remove the previous stable
    directory and update it with a new release. Maintaining the conventions we
    use on the site will allow all 'stable' links to be stable and not needed
    to update to the latest major Jetty build version:</para>

    <screen><![CDATA[

$ ssh <user>@build.eclipse.org
$ cd ~downloads/jetty/
$ rm -Rf stable-9
$ cp -r <version> stable-9
$ ./index.sh   

    ]]></screen>

    <para>This needs to be done for all Eclipse Jetty releases (regardless of
    version). In addition we have to work to reduce the footprint of jetty on
    the primary eclipse download resources so we want to move older releases
    to the eclipse archive site.</para>

    <screen><![CDATA[

$ cd ~/downloads/jetty
$ mv <old release> /home/data/httpd/archive.eclipse.org/jetty/    
$ ./index.sh   

    ]]></screen>

    <para>Periodically we need to do the same for the osgi P2 repositories to
    keep the size of our downloads directory at a reasonable size.</para>
  </section>

  <section>
    <title>Building an OSGi P2 Repository</title>

    <para>Most of the jetty jars are also osgi bundles, plus we release some
    specific bundles that <link linkend="framework-jetty-osgi">integrate jetty
    closely with osgi</link>. To do this, we use a Hudson job on the eclipse
    infrastructure. You will need to have permission to access
    https://hudson.eclipse.org/hudson/view/Jetty-RT/</para>

    <para>There are Hudson jobs that build osgi p2 repos for each of the major
    releases of jetty:7 (jetty-rt-bundles-7), 8 (jetty-rt-bundles-8) and 9
    (jetty-rt-bundles-9). You will need to start a manual build of the job
    that matches the version of jetty that you are releasing. You will be
    prompted to supply some parameters to the build:</para>

    <variablelist>
      <varlistentry>
        <term>pack_and_sign</term>

        <listitem>
          <para>By default, this is ticked. Leave it ticked.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>jetty_release-version</term>

        <listitem>
          <para>Enter the version number of the release, eg
          9.2.6.v20141205</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>force_context_qualifier</term>

        <listitem>
          <para>Leave this blank.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>set_pom_version</term>

        <listitem>
          <para>Enter the major.minor.point release number, eg 9.2.6</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>delete_tycho_meta</term>

        <listitem>
          <para>This is ticked by default. Leave it ticked</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>BRANCH_NAME</term>

        <listitem>
          <para>This is not the branch of the jetty release. Rather it refers
          to the branch structure of the project that drives the jetty p2
          release. It will already be set correctly for the selected job, so
          don't change it unless you have an extremely good reason.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>Once you have supplied the necessary parameters, the build job will
    commence and the bundles and update site zips will generated and
    automatically placed in the
    <filename>/home/data/httpd/downlaod.eclipse.org/jetty/updates/jetty-bundles-[MAJOR.VERSION].x</filename>
    , where [MAJOR.VERSION] matches the major version number of the jetty
    release you are doing. These files will then be visible from
    http://download.eclipse.org/jetty/updates/jetty-bundles-[MAJOR.VERSION].x,
    where [MAJOR.VERSION] corresponds to the major version of the jetty
    release you are doing.</para>
  </section>

  <section xml:id="releasing-documentation">
    <title>Release Documentation</title>

    <para>There are two git repositories you need to be aware of for releasing
    jetty-documentation. The jetty-documentation is located in our github
    repository and the jetty-website is located at eclipse.</para>

    <variablelist>
      <varlistentry>
        <term>jetty-documentation</term>

        <listitem>
          <para><link
          xl:href="https://github.com/jetty-project/jetty-documentation">https://github.com/jetty-project/jetty-documentation</link></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>jetty-website</term>

        <listitem>
          <para><link
          xl:href="http://git.eclipse.org/c/www.eclipse.org/jetty.git">http://git.eclipse.org/c/www.eclipse.org/jetty.git</link></para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>Do the following steps to publish documentation for the
    release:</para>

    <orderedlist>
      <listitem>
        <para>Checkout the jetty-documentation repository.</para>
      </listitem>

      <listitem>
        <para>Edit the &lt;version&gt; of the jetty-documentation pom.xml and
        change it <emphasis>locally</emphasis> to be the release number, eg
        9.2.6.v20141205</para>
      </listitem>

      <listitem>
        <para>Build the documentation with mvn clean install</para>
      </listitem>

      <listitem>
        <para>Checkout the jetty-website</para>
      </listitem>

      <listitem>
        <para>Inside the documentation/ directory, make a directory named the
        same as the release number, eg 9.2.6.v20141205/</para>
      </listitem>

      <listitem>
        <para>Copy the built <filename>documentation</filename> from
        jetty-documentation/target/docbkx/html/jetty into the new
        directory</para>
      </listitem>

      <listitem>
        <para>Edit the <filename>index.html</filename> file in the
        <filename>documentation</filename> directory and add the newly
        released documentation url. Make sure you follow the other examples
        and include the <code>rel="nofollow"</code> attribute on the link so
        that search engines do not crawl newly created documentation,
        otherwise we are subject to duplicate content penalties in SEO.</para>
      </listitem>

      <listitem>
        <para>Commit the changes to the jetty-website project</para>
      </listitem>
    </orderedlist>

    <note>
      <para>There is a separate Jenkins build job that publishes documentation
      to http://www.eclipse.org/jetty/documentation/current triggered by a
      push of changed files to the jetty-documentation project. If you commit
      your change to the &lt;version&gt; number from step 2, then these builds
      will use the same release version number. It is preferable if you
      <emphasis>don't</emphasis> commit that version number change, or better
      yet, ensure that it is set to the next -SNAPSHOT version number for your
      jetty major release number.</para>
    </note>
  </section>

  <section>
    <title>Update Bugzilla Version Numbers</title>

    <para>You will need to have appropriate permissions to do this. Log on to
    the Eclipse portal and select My Eclipse Account, then select "Bugzilla
    Manager: components, targets, milestones", and follow the links to insert
    a new version number for the release you have just done.</para>
  </section>
</section>
