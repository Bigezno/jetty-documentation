<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="serving-webapp-from-particular-port"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Serving a WebApp from a Particular Port/Connector</title>

  <para>Sometimes it is required to serve different web applications from
  different ports/connectors. The simplest way to do this is to create
  multiple <code>Server</code> instances, however if contexts need to share
  resources (eg data sources, authentication), or if the mapping of ports to
  web applications is not cleanly divided, then the named connector mechanism
  can be used.</para>

  <section xml:id="creating-server-instances">
    <title>Creating Multiple Server Instances</title>

    <para>How to create multiple server instances is simply done when writing
    embedded jetty code by creating multiples instances of the Server class
    and configuring them as needed. This is also easy to achieve if you are
    configuring your servers in XML. The id field in the Configure element of
    jetty.xml files is used to identify the instance that the configuration
    applies to, so to run two instances of the Server, you can copy the
    jetty.xml, jetty-http.xml and other jetty configuration files used and
    change the "Server" id to a new name. This can be done in the same style
    and layout as the existing jetty.xml files or the multiple XML files may
    be combined to a single file.</para>

    <para>When creating new configurations for alternative server:</para>

    <itemizedlist>
      <listitem>
        <para>Change all id="Server" to the new server
        name:<literal>&lt;Configure id="OtherServer"
        class="org.eclipse.jetty.server.Server"&gt; </literal></para>
      </listitem>

      <listitem>
        <para>For all connectors for the new server change the refid in the
        server argument: <literal>&lt;Arg name="server"&gt;&lt;Ref
        refid="OtherServer" /&gt;&lt;/Arg&gt;</literal></para>
      </listitem>

      <listitem>
        <para>Make sure that any references to properties like jetty.port are
        either renamed or replaced with absolute values </para>
      </listitem>

      <listitem>
        <para>Make sure that any deployers AppProviders refer to a different
        "webapps" directory so that a different set of applications are
        deployed.</para>
      </listitem>
    </itemizedlist>

    <section xml:id="jetty-otherserver.xml">
      <title>Example Other Server XML</title>

      <para>The following example creates another server instance and
      configures it with a connector and deployer:</para>

      <programlisting language="fetch"><filename>@GITURL@/examples/embedded/src/main/resources/jetty-otherserver.xml</filename></programlisting>

      <para>To run the other server, simply add the extra configuration
      file(s) to the command line:</para>

      <screen>java -jar start.jar jetty-otherserver.xml</screen>
    </section>
  </section>

  <section xml:id="alternative">
    <title>Named Connectors</title>

    <para>It is also possible to use an extension to the virtual host
    mechanism with named to connectors to make some web applications only
    accessible by specific connectors. If a connector has a name "MyConnector"
    set using the setName method, then this can be referenced with the special
    virtual host name "@MyConnector".</para>
  </section>
</section>
