<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0" xml:id="configuring-ssl"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Configuring SSL/TLS</title>

  <para>This document provides an overview of how to configure SSL and TLS for
  Jetty.</para>

  <section xml:id="tls-and-ssl-versions">
    <title>TLS and SSL versions</title>

    <para>Which browser/OS supports which protocols can be <link
    xl:href="https://en.wikipedia.org/wiki/Transport_Layer_Security#Web_browsers">found
    on Wikipedia</link></para>

    <itemizedlist>
      <listitem>
         TLS v1.1 and v1.2: The protocols which should be used wherever possible. All CBC based ciphers are supported since Java 7, the new GCM modes are supported since Java 8. 
      </listitem>

      <listitem>
         TLS v1.0: still OK but affected by the POODLE attack too. To support older browsers this protocol version is still needed. 
      </listitem>

      <listitem>
         SSL v3: is now deprecated and should only be enabled if you still need to support very old browsers like Internet Explorer 6 on Windows XP which does not support TLS 1.0 (or is disabled by default). 
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="understanding-certificates-and-keys">
    <title>Understanding Certificates and Keys</title>

    <para>Configuring SSL can be a confusing experience of keys, certificates,
    protocols and formats, thus it helps to have a reasonable understanding of
    the basics. The following links provide some good starting points:</para>

    <itemizedlist>
      <listitem>
        <para>Certificates:</para>

        <itemizedlist>
          <listitem>
            <para><link
            xl:href="http://en.tldp.org/HOWTO/SSL-Certificates-HOWTO/index.html">SSL
            Certificates HOWTO</link></para>
          </listitem>

          <listitem>
            <para><link
            xl:href="http://mindprod.com/jgloss/certificate.html">Mindprod
            Java Glossary: Certificates</link></para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Keytool:</para>

        <itemizedlist>
          <listitem>
            <para><link
            xl:href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html">Keytool
            for Unix</link></para>
          </listitem>

          <listitem>
            <para><link
            xl:href="http://docs.oracle.com/javase/8/docs/technotes/tools/windows/keytool.html">Keytool
            for Windows</link></para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Other tools:</para>

        <itemizedlist>
          <listitem>
            <para><link
            xl:href="https://www.ibm.com/developerworks/mydeveloperworks/groups/service/html/communityview?communityUuid=6fb00498-f6ea-4f65-bf0c-adc5bd0c5fcc">IBM
            Keyman</link></para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>OpenSSL:</para>

        <itemizedlist>
          <listitem>
            <para><link
            xl:href="http://www.openssl.org/support/faq.html">OpenSSL
            FAQ</link></para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <section xml:id="openssl-vs-keytool">
      <title>OpenSSL vs. Keytool</title>

      <para>For testing, the <code>keytool</code> utility bundled with the JDK
      provides the simplest way to generate the key and certificate you
      need.</para>

      <para>You can also use the OpenSSL tools to generate keys and
      certificates, or to convert those that you have used with Apache or
      other servers. Since Apache and other servers commonly use the OpenSSL
      tool suite to generate and manipulate keys and certificates, you might
      already have some keys and certificates created by OpenSSL, or you might
      also prefer the formats OpenSSL produces.</para>

      <para>If you want the option of using the same certificate with Jetty or
      a web server such as Apache not written in Java, you might prefer to
      generate your private key and certificate with OpenSSL.</para>
    </section>

    <section xml:id="configuring-jetty-for-ssl">
      <title>Configuring Jetty for SSL</title>

      <para>To configure Jetty for SSL, complete the tasks in the following
      sections:</para>

      <itemizedlist>
        <listitem>
          <para><xref linkend="generating-key-pairs-and-certificates"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="requesting-trusted-certificate"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="loading-keys-and-certificates"/></para>
        </listitem>

        <listitem>
          <para><xref linkend="configuring-sslcontextfactory"/></para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="generating-key-pairs-and-certificates">
      <title>Generating Key Pairs and Certificates</title>

      <para>The simplest way to generate keys and certificates is to use the
      <code>keytool</code> application that comes with the JDK, as it
      generates keys and certificates directly into the keystore. See <xref
      linkend="generating-key-pairs-and-certificates-JDK-keytool"/>.</para>

      <para>If you already have keys and certificates, see <xref
      linkend="loading-keys-and-certificates"/> to load them into a JSSE
      keystore. This section also applies if you have a renewal certificate to
      replace one that is expiring.</para>

      <para>The examples below generate only basic keys and certificates. You
      should read the full manuals of the tools you are using if you want to
      specify:</para>

      <itemizedlist>
        <listitem>
          <para>the key size</para>
        </listitem>

        <listitem>
          <para>the certificate expiration date</para>
        </listitem>

        <listitem>
          <para>alternate security providers</para>
        </listitem>
      </itemizedlist>

      <section xml:id="generating-key-pairs-and-certificates-JDK-keytool">
        <title>Generating Keys and Certificates with JDK's keytool</title>

        <para>The following command generates a key pair and certificate
        directly into file <filename>keystore</filename>:</para>

        <screen><![CDATA[$ keytool -keystore keystore -alias jetty -genkey -keyalg RSA]]></screen>

        <note>
          <para>The DSA key algorithm certificate produces an error after
          loading several pages. In a browser, it displays a message "Could
          not establish an encrypted connection because certificate presented
          by localhost has an invalid signature." The solution is to use RSA
          for the key algorithm.</para>
        </note>

        <para>This command prompts for information about the certificate and
        for passwords to protect both the keystore and the keys within it. The
        only mandatory response is to provide the fully qualified host name of
        the server at the "first and last name" prompt. For example:</para>

        <screen><![CDATA[$ keytool -keystore keystore -alias jetty -genkey -keyalg RSA -sigalg SHA256withRSA
 Enter keystore password:  password
 What is your first and last name?
   [Unknown]:  jetty.eclipse.org
 What is the name of your organizational unit?
   [Unknown]:  Jetty
 What is the name of your organization?
   [Unknown]:  Mort Bay Consulting Pty. Ltd.
 What is the name of your City or Locality?
   [Unknown]:
 What is the name of your State or Province?
   [Unknown]:
 What is the two-letter country code for this unit?
   [Unknown]:
 Is CN=jetty.eclipse.org, OU=Jetty, O=Mort Bay Consulting Pty. Ltd.,
 L=Unknown, ST=Unknown, C=Unknown correct?
   [no]:  yes

 Enter key password for <jetty>
         (RETURN if same as keystore password):
 $]]></screen>

        <para>You now have the minimal requirements to run an SSL connection
        and could proceed directly to <link
        linkend="configuring-sslcontextfactory">configure an SSL
        connector</link>. However the browser will not trust the certificate
        you have generated, and prompts the user to this effect. While what
        you have at this point is often sufficient for testing, most public
        sites need a trusted certificate, as shown in the section <link
        linkend="generating-csr-from-keytool">generating a CSR with
        keytool</link>.</para>

        <para>If you want to use only a self signed certificate for some kind
        of internal admin panel add -validity &lt;days&gt; to the keytool call
        above, otherwise your certificate is only valid for one month.</para>

        <para>If you are using java 8 or later, then you may also use the SAN
        extension to set one or more names that the certificate applies
        to:</para>

        <screen><![CDATA[$ keytool -keystore keystore -alias jetty -genkey -keyalg RSA -sigalg SHA256withRSA -ext 'SAN=dns:jetty.eclipse.org,dns:*.jetty.org'
 ...
]]></screen>
      </section>

      <section xml:id="generating-keys-and-certificates-openssl">
        <title>Generating Keys and Certificates with OpenSSL</title>

        <para>The following command generates a key pair in the file
        <filename>jetty.key</filename>:</para>

        <screen><![CDATA[$ openssl genrsa -aes128 -out jetty.key]]></screen>

        <para>You might also want to use the <filename>-rand</filename> file
        argument to provide an arbitrary file that helps seed the random
        number generator.</para>

        <para>The following command generates a certificate for the key into
        the file <filename> jetty.crt</filename>:</para>

        <screen><![CDATA[$ openssl req -new -x509 -newkey rsa:2048 -sha256 -key jetty.key -out jetty.crt]]></screen>

        <para>Adding -sha256 ensures to get a certificate with the now
        recommended SHA-256 signature algorithm. For the paranoid ones add
        -b4096 to get a 4069bits long key.</para>

        <para>The next command prompts for information about the certificate
        and for passwords to protect both the keystore and the keys within it.
        The only mandatory response is to provide the fully qualified host
        name of the server at the "Common Name" prompt. For example:</para>

        <screen><![CDATA[$ openssl genrsa -aes128 -out jetty.key
Generating RSA private key, 2048 bit long modulus
..............+++
......................................................................+++
e is 65537 (0x10001)
Enter pass phrase for jetty.key:
Verifying - Enter pass phrase for jetty.key:

$ openssl req -new -x509 -newkey rsa:2048 -sha256 -key jetty.key -out jetty.crt
Enter pass phrase for jetty.key:
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:
State or Province Name (full name) [Some-State]:
Locality Name (eg, city) []:
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Mort Bay Consulting Pty. Ltd.
Organizational Unit Name (eg, section) []:Jetty
Common Name (e.g. server FQDN or YOUR name) []:jetty.eclipse.org
Email Address []:

$]]></screen>

        <para>You now have the minimal requirements to run an SSL connection
        and could proceed directly to <xref
        linkend="loading-keys-and-certificates"/> to load these keys and
        certificates into a JSSE keystore. However the browser will not trust
        the certificate you have generated, and prompts the user to this
        effect. While what you have at this point is often sufficient for
        testing, most public sites need a trusted certificate, as shown in the
        section, <xref linkend="generating-csr-from-openssl"/> to obtain a
        certificate.</para>
      </section>

      <section xml:id="using-keys-and-certificates-from-other-sources">
        <title>Using Keys and Certificates from Other Sources</title>

        <para>If you have keys and certificates from other sources, you can
        proceed directly to <xref
        linkend="loading-keys-and-certificates"/>.</para>
      </section>
    </section>

    <section xml:id="requesting-trusted-certificate">
      <title>Requesting a Trusted Certificate</title>

      <para>The keys and certificates generated with JDK's
      <code>keytool</code> and OpenSSL are sufficient to run an SSL connector.
      However the browser will not trust the certificate you have generated,
      and it will prompt the user to this effect.</para>

      <para>To obtain a certificate that most common browsers will trust, you
      need to request a well-known certificate authority (CA) to sign your
      key/certificate. Such trusted CAs include: AddTrust, Entrust, GeoTrust,
      RSA Data Security, Thawte, VISA, ValiCert, Verisign, and beTRUSTed,
      among others. Each CA has its own instructions (look for JSSE or OpenSSL
      sections), but all involve a step that generates a certificate signing
      request (CSR).</para>

      <section xml:id="generating-csr-from-keytool">
        <title>Generating a CSR with keytool</title>

        <para>The following command generates the file
        <filename>jetty.csr</filename> using <code>keytool</code> for a
        key/cert already in the keystore:</para>

        <screen><![CDATA[$ keytool -certreq -alias jetty -keystore keystore -file jetty.csr]]></screen>
      </section>

      <section xml:id="generating-csr-from-openssl">
        <title>Generating a CSR from OpenSSL</title>

        <para>The following command generates the file
        <filename>jetty.csr</filename> using OpenSSL for a key in the file
        <filename>jetty.key</filename>:</para>

        <screen><![CDATA[$ openssl req -new -key jetty.key -out jetty.csr]]></screen>

        <para>Notice that this command uses only the existing key from
        <filename>jetty.key</filename> file, and not a certificate in
        <filename>jetty.crt</filename> as generated with OpenSSL. You need to
        enter the details for the certificate again.</para>
      </section>
    </section>

    <section xml:id="loading-keys-and-certificates">
      <title>Loading Keys and Certificates</title>

      <para>Once a CA has sent you a certificate, or if you generated your own
      certificate without <code>keytool</code>, you need to load it into a
      JSSE keystore.</para>

      <note>
        <para>You need both the private key and the certificate in the JSSE
        keystore. You should load the certificate into the keystore used to
        generate the CSR with <code>keytool</code>. If your key pair is not
        already in a keystore (for example, because it has been generated with
        OpenSSL), you need to use the PKCS12 format to load both key and
        certificate (see <link
        linkend="loading-keys-and-certificates-via-pkcks12">PKCKS12 Keys &amp;
        Certificates</link>).</para>
      </note>

      <section xml:id="loading-certificates-with-keytool">
        <title>Loading Certificates with keytool</title>

        <para>You can use <code>keytool</code> to load a certificate in PEM
        form directly into a keystore. The PEM format is a text encoding of
        certificates; it is produced by OpenSSL, and is returned by some CAs.
        An example PEM file is:</para>

        <screen><![CDATA[jetty.crt
-----BEGIN CERTIFICATE-----
MIICSDCCAfKgAwIBAgIBADANBgkqhkiG9w0BAQQFADBUMSYwJAYDVQQKEx1Nb3J0
IEJheSBDb25zdWx0aW5nIFB0eS4gTHRkLjEOMAwGA1UECxMFSmV0dHkxGjAYBgNV
BAMTEWpldHR5Lm1vcnRiYXkub3JnMB4XDTAzMDQwNjEzMTk1MFoXDTAzMDUwNjEz
MTk1MFowVDEmMCQGA1UEChMdTW9ydCBCYXkgQ29uc3VsdGluZyBQdHkuIEx0ZC4x
DjAMBgNVBAsTBUpldHR5MRowGAYDVQQDExFqZXR0eS5tb3J0YmF5Lm9yZzBcMA0G
CSqGSIb3DQEBAQUAA0sAMEgCQQC5V4oZeVdhdhHqa9L2/ZnKySPWUqqy81riNfAJ
7uALW0kEv/LtlG34dOOcVVt/PK8/bU4dlolnJx1SpiMZbKsFAgMBAAGjga4wgasw
HQYDVR0OBBYEFFV1gbB1XRvUx1UofmifQJS/MCYwMHwGA1UdIwR1MHOAFFV1gbB1
XRvUx1UofmifQJS/MCYwoVikVjBUMSYwJAYDVQQKEx1Nb3J0IEJheSBDb25zdWx0
aW5nIFB0eS4gTHRkLjEOMAwGA1UECxMFSmV0dHkxGjAYBgNVBAMTEWpldHR5Lm1v
cnRiYXkub3JnggEAMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEEBQADQQA6NkaV
OtXzP4ayzBcgK/qSCmF44jdcARmrXhiXUcXzjxsLjSJeYPJojhUdC2LQKy+p4ki8
Rcz6oCRvCGCe5kDB
-----END CERTIFICATE-----]]></screen>

        <para>The following command loads a PEM encoded certificate in the
        <filename>jetty.crt</filename> file into a JSSE keystore:</para>

        <screen><![CDATA[$ keytool -keystore keystore -import -alias jetty -file jetty.crt -trustcacerts]]></screen>

        <para>If the certificate you receive from the CA is not in a format
        that <code>keytool</code> understands, you can use the
        <code>openssl</code> command to convert formats:</para>

        <screen><![CDATA[$ openssl x509 -in jetty.der -inform DER -outform PEM -out jetty.crt]]></screen>
      </section>

      <section xml:id="loading-keys-and-certificates-via-pkcks12">
        <title>Loading Keys and Certificates via PKCS12</title>

        <para>If you have a key and certificate in separate files, you need to
        combine them into a PKCS12 format file to load into a new keystore.
        The certificate can be one you generated yourself or one returned from
        a CA in response to your CSR.</para>

        <para>The following OpenSSL command combines the keys in
        <filename>jetty.key</filename> and the certificate in the
        <filename>jetty.crt</filename> file into the
        <filename>jetty.pkcs12</filename> file:</para>

        <screen><![CDATA[$ openssl pkcs12 -inkey jetty.key -in jetty.crt -export -out jetty.pkcs12]]></screen>

        <para>If you have a chain of certificates, because your CA is an
        intermediary, build the PKCS12 file as follows:</para>

        <screen><![CDATA[$ cat example.crt intermediate.crt [intermediate2.crt] ... rootCA.crt > cert-chain.txt
$ openssl pkcs12 -export -inkey example.key -in cert-chain.txt -out example.pkcs12]]></screen>

        <para>The order of certificates must be from server to rootCA, as per
        RFC2246 section 7.4.2.</para>

        <para>OpenSSL asks for an <emphasis>export password</emphasis>. A
        non-empty password is required to make the next step work. Then load
        the resulting PKCS12 file into a JSSE keystore with
        <code>keytool</code>:</para>

        <screen><![CDATA[$ keytool -importkeystore -srckeystore jetty.pkcs12 -srcstoretype PKCS12 -destkeystore keystore]]></screen>
      </section>
    </section>

    <section xml:id="configuring-sslcontextfactory">
      <title>Configuring the Jetty SslContextFactory</title>

      <para>The generated SSL certificates from above are held in the key
      store are configured in an instance of <link
      xl:href="@JDURL@/org/eclipse/jetty/util/ssl/SslContextFactory.html">
      SslContextFactory</link> object.</para>

      <para>The SslContextFactory is responsible for:</para>

      <itemizedlist>
        <listitem>
          <para>Creating the Java <code><link
          xl:href="http://docs.oracle.com/javase/8/docs/api/javax/net/ssl/SSLEngine.html">SslEngine</link></code>
          used by Jetty's Connectors and Jetty's Clients (HTTP/1, HTTP/2, and
          WebSocket).</para>
        </listitem>

        <listitem>
          <para>Managing Keystore Access</para>
        </listitem>

        <listitem>
          <para>Managing Truststore Access</para>
        </listitem>

        <listitem>
          <para>Managing Protocol selection via Excludes / Includes
          list</para>
        </listitem>

        <listitem>
          <para>Managing Cipher Suite selection via Excludes / Includes
          list</para>
        </listitem>

        <listitem>
          <para>Managing order of Ciphers offered (important for TLS/1.2 and
          HTTP/2 support)</para>
        </listitem>

        <listitem>
          <para>SSL Session Caching options</para>
        </listitem>

        <listitem>
          <para>Certificate <link
          xl:href="https://en.wikipedia.org/wiki/Revocation_list">Revocation
          Lists</link> and Distribution Points (CRLDP)</para>
        </listitem>

        <listitem>
          <para><link
          xl:href="https://en.wikipedia.org/wiki/Online_Certificate_Status_Protocol">OCSP</link>
          Support</para>
        </listitem>

        <listitem>
          <para>Client Authentication Support</para>
        </listitem>
      </itemizedlist>

      <para>For Jetty Connectors, the configured
      <code>SslContextFactory</code> is injected into a specific
      <code>ServerConnector</code> <code><link
      xl:href="http://download.eclipse.org/jetty/stable-9/apidocs/org/eclipse/jetty/server/SslConnectionFactory.html">SslConnectionFactory</link></code>.</para>

      <para>For Jetty Clients, the various constructors support using a
      configured <code>SslContextFactory</code>.</para>

      <para>While the SslContextFactory can operate without a keystore (this
      mode is most suitable for the various Jetty Clients) it is best if you
      at least configure the Keystore you are using.</para>

      <variablelist>
        <varlistentry>
          <term>setKeyStorePath</term>

          <listitem>
            <para>The configured keystore to use for all SSL/TLS in configured
            Jetty Connector (or Client). </para>

            <note>
              <para>as a keystore is vital security information, it can be
              desirable to locate the file in a directory with very restricted
              access.</para>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>setKeyStorePassword</term>

          <listitem>
            <para>The keystore password may be set here in plain text, or as
            some protection from casual observation, it may be obfuscated
            using the <link
            xl:href="@JDURL@/org/eclipse/jetty/util/security/Password.html">Password</link>
            class.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>setTrustStorePath</term>

          <listitem>
            <para>This is used if validating client certificates and is
            typically set to the same path as the keystore.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>setKeyManagerPassword</term>

          <listitem>
            <para>is a password that is passed to the <code><link
            xl:href="http://docs.oracle.com/javase/8/docs/api/javax/net/ssl/KeyManagerFactory.html#init-java.security.KeyStore-char:A-">KeyManagerFactory.init(...)</link></code>.
            If there is no keymanagerpassword, then the keystorepassword is
            used instead. If there is no trustmanager set, then the keystore
            is used as the trust store and the keystorepassword is used as the
            truststore password</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>setExcludeCipherSuites / setIncludeCipherSuites</term>

          <listitem>
            <para>This allows for the customization of the selected Cipher
            Suites that will be used by SSL/TLS</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>setExcludeProtocols / setIncludeProtocols</term>

          <listitem>
            <para>This allows for the customization of the selected Protocols
            that will be used by SSL/TLS</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <note>
        <para>When working with Includes / Excludes, it is important to know
        that Excludes will always win.</para>

        <para>The selection process is to process the JVM list of available
        Cipher Suites or Protocols against the include list, then remove the
        excluded ones.</para>

        <para>Be aware that each Include / Exclude list has a Set method
        (replace the list) or Add method (append the list)</para>
      </note>

      <caution>
        <para>The key and truststore passwords may also be set using the
        system properties: <code>org.eclipse.jetty.ssl.keypassword</code>
        <code>org.eclipse.jetty.ssl.password</code>. </para>

        <para>This is <emphasis>not</emphasis> a recommended usage.</para>
      </caution>
    </section>

    <section>
      <title>Configuring SSL in Jetty Distribution</title>

      <para>For those of you using the Jetty Distribution, the provided
      modules for https and http2 will automatically setup the
      SslContextFactory, the appropriate SslConnectionFactory, and associated
      ServerConnectors for you, in the correct order.</para>

      <para>An example of this setup:</para>

      <informalexample>
        <programlisting language="plain"><![CDATA[$ cd /path/to/mybase
$ java -jar /path/to/jetty-dist/start.jar --add-to-start=https
INFO: ssl             initialised (transitively) in ${jetty.base}/start.ini
INFO: https           initialised in ${jetty.base}/start.ini
INFO: Base directory was modified
$ ls -l
drwxrwxr-x.  2 user group  4096 Feb  2 11:47 etc/
-rw-rw-r--.  1 user group  4259 Feb  2 11:47 start.ini
$ ls -l etc
-rw-rw-r--.  1 user group  3697 Feb  2 11:47 keystore
]]></programlisting>
      </informalexample>

      <para>When you check your start.ini, you'll see many commented
      properties ready for you to configure the SslContextFactory
      basics.</para>

      <para>To highlight some of the more commonly used properties:</para>

      <variablelist>
        <varlistentry>
          <term>jetty.ssl.host</term>

          <listitem>
            <para>Configures which interfaces the SSL/TLS Connector should
            listen on</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>jetty.ssl.port</term>

          <listitem>
            <para>Configures which port the SSL/TLS Connector should listen
            on</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>jetty.httpConfig.securePort</term>

          <listitem>
            <para>If a webapp needs to redirect to a secure version of the
            same resource, then this is the port reported back on the Response
            <code>Location</code> line (Having this be separate is useful if
            you have something sitting in front of Jetty, such as a Load
            Balancer or proxy)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>jetty.sslContext.keyStorePath</term>

          <listitem>
            <para>Sets the location of the <filename>keystore</filename> that
            you configured with your certificates</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>jetty.sslContext.keyStorePassword</term>

          <listitem>
            <para>Sets the Password for the <filename>keystore</filename>
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title>Configuring SNI</title>

      <para>From java8, the JVM contains support for the <link
      xl:href="http://en.wikipedia.org/wiki/Server_Name_Indication"> Server
      Name Indicator (SNI)</link> extension, which allows a SSL connection
      handshake to indicate one or more DNS names that it applies to. To
      support this, the ExtendedSslContextFactory is used that will look for
      multiple X509 certificates within the keystore, each of which may have
      multiple DNS names (including wildcards) associated with the <link
      xl:href="http://en.wikipedia.org/wiki/SubjectAltName">Subject Alternate
      Name</link> extension. When using the ExtendedSSlContextFactory, the
      correct certificate is automatically selected if the SNI extension is
      present in the handshake.</para>
    </section>

    <section xml:id="configuring-sslcontextfactory-cipherSuites">
      <title>Disabling/Enabling specific cipher suites</title>

      <para>For example to avoid the BEAST attack it is necessary to configure
      a specific set of cipher suites. This can either be done via <link
      xl:href="@JDURL@/org/eclipse/jetty/util/ssl/SslContextFactory.html#setIncludeCipherSuites(java.lang.String...)">
      SslContext.setIncludeCipherSuites(java.lang.String...) </link> or
      via<link
      xl:href="@JDURL@/org/eclipse/jetty/util/ssl/SslContextFactory.html#setExcludeCipherSuites(java.lang.String...)">
      SslContext.setExcludeCipherSuites(java.lang.String...)</link>.</para>

      <note>
        <para>It's crucial that you use the exact names of the cipher suites
        as used/known by the JDK. You can get them by obtaining an instance of
        SSLEngine and call getSupportedCipherSuites(). Tools like ssllabs.com
        might report slightly different names which will be ignored.</para>
      </note>

      <note>
        <para>It's recommended to install the Java Cryptography Extension
        (JCE) Unlimited Strength policy files in your JRE to get full strength
        ciphers like AES-256. They can be found on the <link
        xl:href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java
        download page</link>. Just overwrite the two present JAR files in
        <code>&lt;JRE_HOME&gt;/lib/security/</code></para>
      </note>

      <para>Both setIncludeCipherSuites and setExcludeCipherSuites can be feed
      by the exact cipher suite name used in the JDK or by using regular
      expressions.</para>

      <para>If you have a need to adjust the Includes or Excludes, then this
      is best done with a custom blow-in XML that configures the
      SslContextFactory to suit your needs.</para>

      <para>To do this, first create a new
      <code>${jetty.base}/etc/tweak-ssl.xml</code> (this can be any name, just
      avoid prefixing it with "jetty-")</para>

      <informalexample>
        <programlisting language="xml"><![CDATA[<!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" 
          "http://www.eclipse.org/jetty/configure_9_3.dtd">
<!-- Tweak SsslContextFactory Includes / Excludes -->
<Configure id="sslContextFactory" class="org.eclipse.jetty.util.ssl.SslContextFactory">
  <!-- Mitigate SLOTH Attack -->
  <Call name="addExcludeCipherSuites">
    <Arg>
      <Array type="String">
        <Item>.*_RSA_.*SHA1$</Item>
        <Item>.*_RSA_.*SHA$</Item>
        <Item>.*_RSA_.*MD5$</Item>
      </Array>
    </Arg>
  </Call>
</Configure>]]></programlisting>
      </informalexample>

      <para>This new XML will configure the id
      <literal>sslContextFactory</literal> some more (this id is first created
      by the <literal>ssl</literal> module and its associated
      <code>${jetty.home}/etc/jetty-ssl-context.xml</code>). You can do
      anything you want with the <code>SslContextFactory</code> in use by the
      Jetty Distribution from this tweak XML.</para>

      <para>To make sure that your <filename>${jetty.base}</filename> uses
      this new XML, add it to the end of your
      <filename>${jetty.base}/start.ini</filename></para>

      <informalexample>
        <programlisting language="plain"><![CDATA[$ cd /path/to/mybase
$ ls -l
drwxrwxr-x.  2 user group  4096 Feb  2 11:47 etc/
-rw-rw-r--.  1 user group  4259 Feb  2 11:47 start.ini
$ tail start.ini
# Module: https
--module=https
etc/tweak-ssl.xml
$ 
]]></programlisting>
      </informalexample>

      <note>
        <para>The default SslContextFactory implementation applies the latest
        SSL/TLS recommendations surrounding vulnerabilities in SSL/TLS. Check
        the release notes (The <filename>VERSION.txt</filename> found in the
        root of the Jetty Distribution, or the <link
        xl:href="http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.eclipse.jetty%22%20AND%20a%3A%22jetty-project%22">alternate
        (classified 'version') artifacts for the
        <literal>jetty-project</literal> component </link>on Maven Central)
        for updates.</para>

        <para>The Java JVM is also applying exclusions at the JVM level, and
        as such, if you have a need to enable something that is generally
        accepted by the industry as being insecure or vulnerable you will
        likely have to enable it in BOTH the Java JVM and the Jetty
        configuration.</para>
      </note>

      <tip>
        <para>You can enable the <literal>org.eclipse.jetty.util.ssl</literal>
        named logger at DEBUG level to see what the list of selected Protocols
        and Cipher suites are at startup of Jetty.</para>
      </tip>

      <para>Some other Include / Exclude examples:</para>

      <para>Example: Include all ciphers which support <link
      xl:href="https://en.wikipedia.org/wiki/Forward_secrecy">Forward
      Secrecy</link> using regex:</para>

      <informalexample>
        <programlisting language="xml"><![CDATA[  <!-- Enable Forward Secrecy Ciphers.
       Note: this replaces the default Include Cipher list -->
  <Set name="IncludeCipherSuites">
    <Array type="String">
      <Item>TLS_DHE_RSA.*</Item>
      <Item>TLS_ECDHE.*</Item>
    </Array>
  </Set>              ]]></programlisting>
      </informalexample>

      <para>Example: Exclude all old, insecure or anonymous cipher
      suites:</para>

      <informalexample>
        <programlisting language="xml"><![CDATA[  <!-- Eliminate Old / Insecure / Anonymous Ciphers -->
  <Call name="addExcludeCipherSuites">
    <Arg>
      <Array type="String">
        <Item>.*NULL.*</Item>
        <Item>.*RC4.*</Item>
        <Item>.*MD5.*</Item>
        <Item>.*DES.*</Item>
        <Item>.*DSS.*</Item>
      </Array>
    </Arg>
  </Call>            ]]></programlisting>
      </informalexample>

      <para>Example: Since 2014 SSLv3 is considered insecure and should be
      disabled.</para>

      <informalexample>
        <programlisting language="xml"><![CDATA[  <!-- Eliminate Insecure Protocols -->
  <Call name="addExcludeProtocols">
    <Arg>
     <Array type="java.lang.String">
       <Item>SSL</Item>
       <Item>SSLv2</Item>
       <Item>SSLv2Hello</Item>
       <Item>SSLv3</Item>
     </Array>
    </Arg>
  </Call>            ]]></programlisting>
      </informalexample>

      <note>
        <para>Note that disabling SSLv3 prevents very old browsers like
        Internet Explorer 6 on Windows XP from connecting.</para>
      </note>

      <para>Example: TLS renegotiation could be disabled too to prevent an
      attack based on this feature.</para>

      <informalexample>
        <programlisting language="xml"><![CDATA[  <Set name="renegotiationAllowed">FALSE</Set>          ]]></programlisting>
      </informalexample>
    </section>

    <section xml:id="renewing-certificates">
      <title>Renewing Certificates</title>

      <para>If you are updating your configuration to use a newer certificate,
      as when the old one is expiring, just load the newer certificate as
      described in the section, <xref
      linkend="loading-keys-and-certificates"/>. If you imported the key and
      certificate originally using the PKCS12 method, use an alias of "1"
      rather than "jetty", because that is the alias the PKCS12 process enters
      into the keystore.</para>
    </section>
  </section>
</section>
