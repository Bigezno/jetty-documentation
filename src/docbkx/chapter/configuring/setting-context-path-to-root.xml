<?xml version="1.0" encoding="utf-8"?>
<section xml:id="setting-context-path-to-root" version="5.0"
xmlns="http://docbook.org/ns/docbook"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:xl="http://www.w3.org/1999/xlink"
xmlns:xi="http://www.w3.org/2001/XInclude"
xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">
  <title>Setting Context Path to / (root)</title>
  <para>To set your context path to / (the root context path), you need to use
  a Context deployment.</para>
  <note>Be aware of the following: 
  <itemizedlist>
    <listitem>Java Servlet Specification 2.5 discourages an empty context path
    string, and Java Servlet Specification 3.0 effectively forbids
    it.</listitem>
    <listitem>In Jetty 7.x, the AppProviders assigned to the DeploymentManager
    (see 
    <xref linkend="using-deployment-manager" />
    ) handle context path assignment.</listitem>
    <listitem>By default on the Jetty Distribution, both the WebAppProvider and
    ContextProvider are enabled. This is important to know because it
    influences your decision on where to put the 
    <filename>mywebapp.war</filename>file.</listitem>
    <listitem>Examine the 
    <filename>${jetty.home}/start.ini</filename>file, and you see that it
    contains both references to 
    <code>etc/jetty-webapps.xml</code>and 
    <code>etc/jetty-contexts.xml</code>.</listitem>
  </itemizedlist></note>
  <section xml:id="using-the-webapp-provider">
    <title>Using the WebAppProvider</title>
    <para>The WebAppProvider's role (see 
    <xref linkend="using-webapp-provider" />
    ) is to look in the 
    <filename>${jetty.home}/webapps/</filename>directory for any deployable
    applications (such as *.war), and deploy them onto a context of the same
    name as the filename. For example, the WebAppProvider deploys 
    <filename>${jetty.home}/webapps/MyApp-2.4.war</filename>into the context 
    <code>/MyApp-2.4</code>. There is also the special 
    <code>root.war</code>reserved word that deploys into the context / . While
    this is the easiest deployment mechanism, it sacrifices control over
    deployment specifics.</para>
  </section>
  <section xml:id="using-the-context-provider">
    <title>Using the ContextProvider</title>
    <para>The ContextProvider's role (see 
    <xref linkend="using-context -provider" />
    ) is to look in the 
    <filename>${jetty.home}/contexts/</filename>directory for any jetty-xml
    formatted, deployable contexts. This deployment mechanism gives you the
    maximum control over the deployment, as this XML file can control anything
    that is ultimately resolved to an 
    <code>org.eclipse.jetty.server.handler.ContextHandler</code>base class, of
    which WebAppContexts (WARs, servlets, etc.) are part. The most common use
    is to specify a WebAppContext-based XML file, and control things such as
    what files and directories make up the web application, what temporary
    directory to use, and even what Context Path to use.</para>
  </section>
  <section xml:id="setting-context-path-with-contextprovider">
    <title>Setting the Context Path with the <code>ContextProvider</code></title>
    <para>To set the context path to / , follow these steps.</para>
    <orderedlist>
      <listitem>Make sure your ContextProvider-based deployments are enabled in
      the 
      <filename>start.ini</filename>. That is, make sure that 
      <code>etc/jetty-context.xml</code>is present.</listitem>
      <listitem>Create a 
      <code>${jetty.home}/contexts/mywebapp.xml</code>that declares the 
      <code>
        <Set name="contextPath">/</Set>
      </code>option.</listitem>
      <listitem>If you have the 
      <code>etc/jetty-webapps.xml</code>present in your 
      <filename>start.ini</filename>, do not put your 
      <code>mywebapp.war</code>in 
      <filename>${jetty.home}/webapps</filename>because doing so causes the
      WebAppProvider to also deploy the same webapp, and confuses your
      deployment.</listitem>
      <listitem>Finally, you can see how the jetty distribution itself does
      this by examining 
      <filename>${jetty.home}/contexts/test.xml</filename>. Jetty loads the 
      <filename>${jetty.home}/webapps/test.war</filename>via the
      ContextProvider's use of the 
      <filename>${jetty.home}/contexts/test.xml</filename>into the / context
      path.</listitem>
    </orderedlist>
  </section>
  <section xml:id="studying-logs">
    <title>Studying the Logs</title>
    <para>Look at the logs:</para>
    <para>
      <screen>
<![CDATA[
2012-01-13 13:56:28.779:INFO:oejsh.ContextHandler:started o.e.j.w.WebAppContext{/,file:/tmp/jetty-0.0.0.0-8080-test.war-_-any-/webapp/},/home/joakim
/code/jetty/distros/jetty-distribution-7.6.0.RC3/webapps/test.war
]]>
      </screen>
    </para>
    <para>That reveals that WebAppContext was Started on {/, (the root Context
    Path) It was using the temp/work directory file: 
    <filename>/tmp/jetty-0.0.0.0-8080-test.war-_-any-/webapp/</filename>. It
    was using the web application specified in 
    <filename>
    /home/joakim/code/jetty/distros/jetty-distribution-7.6.0.RC3/webapps/test.war.</filename></para>
  </section>
</section>
