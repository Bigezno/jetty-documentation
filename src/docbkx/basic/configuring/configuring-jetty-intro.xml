<?xml version="1.0" encoding="utf-8"?>
<section version="5.0"
xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
xml:id="configuring-jetty-intro" xmlns="http://docbook.org/ns/docbook"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
xmlns:xl="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
xmlns:ns2="http://www.w3.org/1998/Math/MathML" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Introduction to Configuring Jetty</title>
  <para>Since Jetty components are simply Plain Old Java Objects ( <link
  xl:href="http://en.wikipedia.org/wiki/Plain_Old_Java_Object">POJOs</link>), you can accomplish the assembly and
  configuration of Jetty by a variety of techniques, as indicated in the sections of this document, listed
  above.</para>
  <para>Configuring Jetty consists of building a network of connectors and handlers and providing their individual
  configurations. It is a combination of:</para>
  <itemizedlist>
    <listitem>
      <para>HTTP server configuration&#8211;ports, thread pools, buffers</para>
    </listitem>
    <listitem>
      <para>Web container configuration&#8211;webapps deployment, security realms, JNDI</para>
    </listitem>
    <listitem>
      <para>Web application&#8211;init parameters, non standard options</para>
    </listitem>
  </itemizedlist>
  <note>See <xref linkend="basic-architecture" />for graphical representations of the interactions among connectors and
  handlers.</note>
  <section xml:id="developing-against-jetty-api">
    <title>Developing Against the Jetty API</title>
    <para>You can develop both standard web applications and embedded web applications by writing code. The basic
    approach is to install the required [[Jetty/Reference/Dependencies|Jetty-7 jars and dependencies]] //TODO xref// on
    your class path and then write and run a variation of one of the examples in <xref linkend="embedding" />.</para>
    <para>For more details about setting up your class path, see:</para>
    <itemizedlist>
      <listitem>
        <para>[[Jetty/Tutorial/Jetty_HelloWorld|Jetty HelloWorld Tutorial]]</para>
      </listitem>
      <listitem>
        <para>[[Jetty/Tutorial/Jetty_and_Maven_HelloWorld|Jetty and Maven HelloWorld Tutorial]]</para>
      </listitem>
    </itemizedlist>
    <para>For more information on developing against the Jetty API, as well as explanations of other tools, including
    the Jetty Maven, Ant, and OSGi plugins, see [http://wiki.eclipse.org/Jetty/Howto/Develop How to Develop with
    Jetty].</para>
    <para>Above all, study the examples in the <link xl:href="http://download.eclipse.org/jetty/stable-7/xref/">Jetty
    Latest Source XRef</link>.</para>
  </section>
  <section xml:id="using-jetty-xml">
    <title>Using Jetty XML</title>
    <para>Jetty XML offers XML equivalents to code. It is based on Java's Reflection API. Classes in the <code>
    java.lang.reflec</code> represent Java methods and classes, such that you can instantiate objects and invoke their
    methods based on their names and argument types. Behind the scenes, Jetty's XML config parser translates the XML
    elements and attributes into Reflection calls. (Ethan McAllum makes this point in his appreciative article about
    Jetty, <link xl:href="http://onjava.com/pub/a/onjava/2006/06/14/what-is-jetty.html?page=3"><emphasis>What is
    Jetty?</emphasis>)</link></para>
    <para>The default configuration file for Jetty is <filename>jetty.xml</filename>, typically located at <filename>
    $JETTY_HOME/etc/jetty.xml</filename>. Usually <filename>jetty.xml</filename> configures these components:</para>
    <itemizedlist>
      <listitem>
        <para>the Server class (or subclass if extended) and global options</para>
      </listitem>
      <listitem>
        <para>a ThreadPool&#8211;min and max thread</para>
      </listitem>
      <listitem>
        <para>connectors&#8211;ports, timeouts, buffer sizes, protocol, etc.</para>
      </listitem>
      <listitem>
        <para>the handler structure&#8211;default handlers and/or a contextHandlerCollections</para>
      </listitem>
      <listitem>
        <para>the DeploymentManage&#8211;hbsp; scans for and deploys webapps and contexts</para>
      </listitem>
      <listitem>
        <para>login services&#8211;provide authentication checking</para>
      </listitem>
      <listitem>
        <para>a request log</para>
      </listitem>
    </itemizedlist>
    <para>Not all Jetty features are configured in <filename>jetty.xml</filename>. There are several optional
    configuration files that share the same format as <filename>jetty.xml</filename> and, if specified, concatenate to
    it. These configuration files are also stored in <filename>$JETTY_HOME/etc/</filename>, and examples of them are in
    <link
    xl:href="http://dev.eclipse.org/viewsvn/index.cgi/jetty/trunk/jetty-server/src/main/config/etc/?root=RT_JETTY">SVN
    Repository</link>.</para>
    <itemizedlist>
      <listitem>
        <para>[[Jetty/Feature/Start.jar|Start.jar]]&#8211;selects the configuration files to use.</para>
      </listitem>
      <listitem>
        <para>[[Jetty/Reference/jetty.xml_usage|jetty XML Usage]]&#8211; describes the process of merging configuration
        files.</para>
      </listitem>
      <listitem>
        <para>[[Jetty/Reference/jetty.xml_syntax|Jetty.xml Syntax]]&#8211;describes the syntax for using
        [[Jetty/Reference/jetty.xml|jetty.xml]]</para>
      </listitem>
    </itemizedlist>
    <section xml:id="configuring-jetty-references">
      <title>Configuring Jetty References</title>
      <itemizedlist>
        <listitem>
          <para>[http://www.eclipse.org/jetty/configure.dtd configure.dtd]&#8211;document type descriptor for the
          org.eclipse.XmlConfiguration class</para>
        </listitem>
        <listitem>
          <para>[[Jetty/Reference/jetty-web.xml| jetty-web.xml]]&#8211; Webapp configuration file</para>
        </listitem>
        <listitem>
          <para>[[Jetty/Reference/jetty-env.xml| jetty-env.xml]]&#8211; JNDI configuration file</para>
        </listitem>
        <listitem>
          <para>[[Jetty/Reference/webdefault.xml|webdefault.xml]]&#8211; Pre-web.xml configuration</para>
        </listitem>
        <listitem>
          <para>[[Jetty/Reference/override-web.xml|override-web.xml]]&#8211; Post-web.xml configuration</para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="master-embedding-jetty">
      <title>Embedding Jetty</title>
      <para>You can embed Jetty in an application. This is an alternative to bundling your application as a standard
      WAR to be deployed in Jetty. Jetty is designed to work as a software component that can be instantiated and used
      in a Java program just like any any <link xl:href="http://en.wikipedia.org/wiki/Plain_Old_Java_Object">
      POJO</link>. For more information and configuration instructions, see <xref linkend="embedding" />.</para>
    </section>
    <section xml:id="master-using-jetty-maven-plugin">
      <title>Using the Jetty Maven Plugin</title>
      <para>Apache Maven is a software project management and comprehension tool. Based on the concept of a project
      object model (POM), Maven can manage a project's build, reporting, and documentation from a central piece of
      information. It is an ideal tool to build a web application project, and such projects can use the Jetty Maven
      Plugin to run the web application in development mode. For information and configuration instructions, see</para>
      <itemizedlist>
        <listitem>
          <para>[[Jetty/Feature/Jetty_Maven_Plugin|Jetty Maven Plugin]]</para>
        </listitem>
        <listitem>
          <para>[[Jetty/Tutorial/Jetty_and_Maven_HelloWorld|Jetty Maven HelloWorld Tutorial]]</para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="using-dependency-injection-framework">
      <title>Using a Dependency Injection Framework: Spring, XBean</title>
      <para>You can use almost any IoC-style framework, including Spring and XBean, to assemble and configure
      Jetty.</para>
      <section xml:id="configuring-jetty-with-spring">
        <title>Configuring Jetty with <link xl:href="http://www.springsource.org/">Spring</link></title>
        <para>The jetty-spring module is included in the jetty project and contains both some convenience classes to
        make some Jetty POJOs more suitable for spring configuration, plus an XmlConfiguration provider that allows any
        file that could contain jetty style XML to be replace by an equivalent spring configuration file. See:</para>
        <itemizedlist>
          <listitem>
            <para>
              <xref linkend="framework-jetty-spring" />
            </para>
          </listitem>
          <listitem>
            <para>[[Jetty/Tutorial/Embedding_Jetty#File_Server_with_spring|Embedding Jetty with Spring XML]]</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <section xml:id="consulting-jetty-api-docs">
      <title>Consulting the Jetty API Docs</title>
      <para>The <link xl:href="http://download.eclipse.org/jetty/stable-9/apidocs/">Jetty API docs</link> are the
      ultimate resource for configuration, regardless of the configuration method you use. This is because Jetty
      configuration can be considered as calling setters on a collection of POJOs.</para>
    </section>
  </section>
</section>
