<?xml version="1.0" encoding="utf-8"?>
<section xml:id="jetty-xml-syntax" version="5.0" xmlns="http://docbook.org/ns/docbook"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xl="http://www.w3.org/1999/xlink"
xmlns:xi="http://www.w3.org/2001/XInclude"
xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">
  <title>Introduction</title>
  <para>The Jetty XML syntax is a straightforward mapping of XML elements to a Java API so that POJOs can be
  instantiated and getters, setters and methods called. It is very similar to Inversion Of Control (IOC) or Dependency
  Injection (DI) frameworks like Spring or Plexus (but it predates all of them). Typically Jetty XML is used by
  jetty.xml to configure a Jetty server or by a context.xml file to configure a ContextHandler or subclass, but you can
  also use the mechanism to configure arbitrary POJOs.</para>
  <para>This page describes the basic syntax of Jetty XML configuration. See jetty.xml Usage for information on how you
  can use and combine Jetty XML. See Configuration Files for specific examples.</para>
  <section>
    <title>Basic Example</title>
    <para>The following XML configuration file creates some Java objects and sets some attributes:</para>
    <informalexample>
      <programlisting language="xml">
<![CDATA[
<?xml version="1.0"?>
<!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure.dtd">
<Configure id="foo" class="com.acme.Foo">
  <Set name="name">demo</Set>
  <Set name="nested">
    <New id="bar" class="com.acme.Bar">
      <Arg>true</Arg>
      <Set name="wibble">10</Set>
      <Set name="wobble">xyz</Set>
      <Set name="parent"><Ref id="foo"/></Set>
      <Call name="init">
         <Arg>false</Arg>
      </Call>
    </New>
  </Set>
 
  <Ref id="bar">
    <Set name="wibble">20</Set>
    <Get name="parent">
      <Set name="name">demo2</Set>
    </Get>
  </Ref>
</Configure>
]]>
      </programlisting>
    </informalexample>
    <para>The XML above is equivalent to the following java code:</para>
    <informalexample>
      <programlisting language="java">
<![CDATA[
com.acme.Foo foo = new com.acme.Foo();
foo.setName("demo");
 
com.acme.Bar bar = new com.acme.Bar(true);
bar.setWibble(10);
bar.setWobble("xyz");
bar.setParent(foo);
bar.init(false);
 
foo.setNested(bar);
 
bar.setWibble(20);
bar.getParent().setName("demo2");
]]>
      </programlisting>
    </informalexample>
  </section>
  <section>
    <title>Overview</title>
    <section>
      <title>Understanding DTD and Parsing</title>
      <para>The document type descriptor (DTD) describes all valid elements. The first two lines must reference the
      DTD, and you must substitute the appropriate class for the object you are trying to configure. See the
      appropriate jetty-*.xml references.</para>
      <para>The org.eclipse.jetty.xml.XmlConfiguration class parses the Jetty XML files using the configure.dtd
      descriptor.</para>
    </section>
    <section>
      <title>Using Method Calls</title>
      <para>You configure Java objects with a sequence of &lt;New&gt;, &lt;Set&gt;, &lt;Put&gt; and &lt;Call&gt;
      elements:</para>
      <informalexample>
        <programlisting language="xml">
<![CDATA[
<Set name="Test">value</Set>
obj.setTest("value");
<Put  name="Test">value</Put>
obj.put("Test","value");
<Call name="test"><Arg>value</Arg></Call>
obj.test("value");
<New class="com.acme.MyStuff"><Arg/></New>
new com.acme.MyStuff();
]]>
        </programlisting>
      </informalexample>
    </section>
    <section>
      <title>Coercing Arguments to a Type</title>
      <para>Jetty coerces values to match method arguments on a best effort approach, but you can also specify explicit
      types with the type attribute. Supported values for type are:</para>
      <para>String, Character, Short, Byte, Integer, Long, Boolean, Float, Double, char, short, byte, int, long,
      boolean, float, double, URL, InetAddress, InetAddrPort, void</para>
      <para>For Java classes, you can use either the fully-qualified class name, or just the class name.</para>
    </section>
    <section>
      <title>Referring to a Class</title>
      <para>If you do not specify the classname, Jetty assumes you are calling the method on this. Otherwise, use the
      class attribute to specify the fully-qualified class name of an object to configure. (You must always specify the
      class of the root Configure element.)</para>
    </section>
    <section>
      <title>Referring to an Object</title>
      <para>You can use the id attribute to store a reference to this object when first creating or referring to this
      object. You can then use the &lt;Ref&gt; tag to reference the object later. The id must be unique for each object
      you create.</para>
    </section>
  </section>
  <section xml:id="jetty-xml-configure">
    <title>&lt;Configure&gt;</title>
    <para>This is the root element that specifies the class of object that is to be configured. It is usually either
    the Server, in jetty.xml , or a WebAppContext, in jetty-web.xml.</para>
    <tgroup cols="3">
      <thead>
        <row>
          <entry align="left">Attribute</entry>
          <entry align="center">Required</entry>
          <entry align="left">Description</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>id</entry>
          <entry>no</entry>
          <entry>
            <para>a reference to the object that was created. If you define multiple &lt;Configure&gt; tags with the
            same id, they will be treated as one object, even if they're in different files. You can use this to break
            up configuration of an object (such as the Server) across multiple files.</para>
          </entry>
        </row>
        <row>
          <entry>class</entry>
          <entry>no</entry>
          <entry>the fully qualified classname of the object to be configured. Could be
          org.eclipse.jetty.server.Server, org.eclipse.jetty.webapp.WebAppContext, a handler, etc.</entry>
        </row>
      </tbody>
    </tgroup>
    <section>
      <title>Can Contain</title>
      <para>
      <xref linkend="jetty-xml-set" />
      , 
      <xref linkend="jetty-xml-get" />
      , 
      <xref linkend="jetty-xml-put" />
      , 
      <xref linkend="jetty-xml-call" />
      , 
      <xref linkend="jetty-xml-new" />
      , 
      <xref linkend="jetty-xml-ref" />
      , 
      <xref linkend="jetty-xml-array" />
      , 
      <xref linkend="jetty-xml-map" />
      , 
      <xref linkend="jetty-xml-property" />
      </para>
    </section>
<!--
<Set>,<Get>, <Put>, <Call>, <New>, <Ref>, <Array>, <Map>, <Property>
-->
    <section>
      <title>Examples</title>
      <section>
        <title>Basic Example</title>
        <informalexample>
          <programlisting language="xml">
<![CDATA[
<Configure class="org.eclipse.jetty.server.Server">
  <Set name="port">8080</Set>
</Configure>
]]>
          </programlisting>
        </informalexample>
        <para>This is equivalent to:</para>
        <informalexample>
          <programlisting language="java">
<![CDATA[
org.eclipse.jetty.server.Server server = new org.eclipse.jetty.server.Server();
server.setPort(8080);
]]>
          </programlisting>
        </informalexample>
      </section>
      <section>
        <title>Using id to break up configuration of one object across multiple files</title>
        <para>(etc/jetty.xml)</para>
        <informalexample>
          <programlisting language="xml">
<![CDATA[
<Configure id="Server" class="org.eclipse.jetty.server.Server">
  <!== basic configuration here ->
</Configure>
]]>
          </programlisting>
        </informalexample>
        <para>(etc/jetty-logging.xml)</para>
        <informalexample>
          <programlisting language="xml">
<![CDATA[
<Configure id="Server" class="org.eclipse.jetty.server.Server">
  <!== assumes that you have the basic server configuration set up; this file only contains additional configuration for logging ->
</Configure>
]]>
          </programlisting>
        </informalexample>
        <para>Then run the combined configuration using:</para>
        <screen linenumbering="numbered">
<![CDATA[
java -jar start.jar etc/jetty.xml jetty-logging.xml
]]>
        </screen>
      </section>
    </section>
  </section>
  <section xml:id="jetty-xml-set">
    <title>&lt;Set&gt;</title>
    <para>A Set element maps to a call to a setter method or field on the current object. It can contain text and/or
    elements such as Call, New, SystemProperty, etc., as values. The name and optional type attributes are used to
    select the setter method. If you do not specify a value type, white space is trimmed out of the value. If it
    contains multiple elements as values, they are added as strings before being converted to any specified
    type.</para>
    <tgroup cols="3">
      <thead>
        <row>
          <entry align="left">Attribute</entry>
          <entry align="center">Required</entry>
          <entry align="left">Description</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>name</entry>
          <entry>yes</entry>
          <entry>the name of the setter method to call, or the field to set. If the name given is xxx, then a setXxx
          method is used. If the setXxx method cannot be found, then the xxx field is used.</entry>
        </row>
        <row>
          <entry>type</entry>
          <entry>no</entry>
          <entry>the declared type of the argument. See also discussion of type for Arg for how to define null and
          empty string values.</entry>
        </row>
        <row>
          <entry>class</entry>
          <entry>no</entry>
          <entry>if present, then this Set is treated as a static set method invocation</entry>
        </row>
      </tbody>
    </tgroup>
  </section>
  <section>
    <section>
      <title>Can Contain</title>
      <itemizedlist>
        <listitem>
          <para>value text</para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-get" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-call" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-new" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-ref" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-array" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-map" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-system-property" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-property" />
          </para>
        </listitem>
      </itemizedlist>
    </section>
<!--
value text, <Get>, <Call>, <New>, <Ref>, <Array>, <Map>, <SystemProperty>, <Property>
-->
    <section>
      <title>Examples</title>
      <section>
        <title>Basic Example</title>
        <informalexample>
          <programlisting language="xml">
<![CDATA[
<Configure id="server" class="org.eclipse.jetty.server.Server">
  <Set name="port">8080</Set>
</Configure>
]]>
          </programlisting>
        </informalexample>
      </section>
      <section>
        <title>Set via a System Property</title>
        <informalexample>
          <programlisting language="xml">
<![CDATA[
<Configure id="server" class="org.eclipse.jetty.server.Server">
  <Set name="port"><SystemProperty name="jetty.port" /></Set>
</Configure>
]]>
          </programlisting>
        </informalexample>
      </section>
      <section>
        <title>Creating a NewObject and Setting It on the Server</title>
        <informalexample>
          <programlisting language="xml">
<![CDATA[
<Configure id="server" class="org.eclipse.jetty.server.Server">
  <Set name="threadPool">
    <New class="org.eclipse.jetty.util.thread.QueuedThreadPool">
      <Set name="minThreads">10</Set>
      <Set name="maxThreads">1000</Set>
    </New>
  </Set>
</Configure>
]]>
          </programlisting>
        </informalexample>
        <para>This is equivalent to:</para>
        <informalexample>
          <programlisting language="java">
<![CDATA[
org.eclipse.jetty.server.Server server = new org.eclipse.jetty.server.Server();
 
org.eclipse.jetty.util.thread.QueuedThreadPool threadPool = new org.eclipse.jetty.util.thread.QueuedThreadPool();
threadPool.setMinThreads(10);
threadPool.setMaxThreads(1000);
 
server.setThreadPool(threadPool);
]]>
          </programlisting>
        </informalexample>
      </section>
      <section>
        <title>Invoking a Static Setter</title>
        <informalexample>
          <programlisting language="xml">
<![CDATA[
<Configure id="server" class="org.eclipse.jetty.server.Server">
  <Set class="org.eclipse.jetty.util.log.Log" name="logToParent">loggerName</Set>
</Configure">
]]>
          </programlisting>
        </informalexample>
      </section>
    </section>
    <section xml:id="jetty-xml-get">
      <title>&lt;Get&gt;</title>
      <para>A Get element maps to a call to a getter method or field on the current object. It can contain nested
      elements such as Set, Put, Call, etc.; these act on the object returned by the Get call.</para>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="left">Attribute</entry>
            <entry align="center">Required</entry>
            <entry align="left">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>name</entry>
            <entry>yes</entry>
            <entry>the name of the getter method to call, or the field to get. If the name given is xxx, then a getXxx
            method is used. If the getXxx method cannot be found, then the xxx field is used.</entry>
          </row>
          <row>
            <entry>class</entry>
            <entry>no</entry>
            <entry>f present, then this Get is treated as a static getter or field.</entry>
          </row>
          <row>
            <entry>id</entry>
            <entry>no</entry>
            <entry>if present, then you can use this id to refer to the returned object later.</entry>
          </row>
        </tbody>
      </tgroup>
    </section>
    <section>
      <title>Can Contain</title>
      <itemizedlist>
        <listitem>
          <para>
            <xref linkend="jetty-xml-set" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-get" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-put" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-call" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-new" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-ref" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-array" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-map" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-property" />
          </para>
        </listitem>
      </itemizedlist>
    </section>
<!--
<Set>,<Get>, <Put>, <Call>, <New>, <Ref>, <Array>, <Map>, <Property>
-->
    <section>
      <title>Examples</title>
      <section>
        <title>Basic Example</title>
        <para>This simple example doesn't do much on its own. You would normally use this in conjunction with a &lt;Ref
        id="Logger" /&gt;.</para>
        <informalexample>
          <programlisting language="xml">
<![CDATA[
<Configure id="server" class="org.eclipse.jetty.server.Server">
  <Get id="Logger" class="org.eclipse.jetty.util.log.Log" name="log"/>
</Configure>
]]>
          </programlisting>
        </informalexample>
      </section>
      <section>
        <title>Invoking a Static Getter and Call Methods on the Returned Object</title>
        <informalexample>
          <programlisting language="xml">
<![CDATA[
<Configure id="server" class="org.eclipse.jetty.server.Server">
    <Get class="java.lang.System" name="out">
      <Call name="println">
        <Arg>Server version is: <Get class="org.eclipse.jetty.server.Server" name="version"/></Arg>
      </Call>
    </Get>
</Configure>
]]>
          </programlisting>
        </informalexample>
      </section>
    </section>
    <section xml:id="jetty-xml-put">
      <title>&lt;Put&gt;</title>
      <para>A Put element maps to a call to a put method on the current object, which must implement the Map interface.
      It can contain text and/or elements such as Call, New, SystemProperty, etc. as values. If you do not specify a no
      value type, white space is trimmed out of the value. If it contains multiple elements as values, they are added
      as strings before being converted to any specified type.</para>
      <tgroup cols="3">
        <thead>
          <row>
            <entry align="left">Attribute</entry>
            <entry align="center">Required</entry>
            <entry align="left">Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>name</entry>
            <entry>yes</entry>
            <entry>used as the put key</entry>
          </row>
          <row>
            <entry>type</entry>
            <entry>no</entry>
            <entry>forces the type of the value. See also discussion of type for Arg for how to define null and empty
            string values.</entry>
          </row>
        </tbody>
      </tgroup>
    </section>
    <section>
      <title>Can Contain</title>
      <itemizedlist>
        <listitem>
          <para>value text</para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-get" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-call" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-new" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-ref" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-array" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-map" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-system-property" />
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="jetty-xml-property" />
          </para>
        </listitem>
      </itemizedlist>
    </section>
<!--
value text, <Get>, <Call>, <New>, <Ref>, <Array>, <Map>, <SystemProperty>, <Property>
-->
    <section>
      <title>Example</title>
      <informalexample>
        <programlisting language="xml">
<![CDATA[
<Get name="someKindOfMap">
   <Put name="keyName">objectValue</Put>
</Get>
]]>
        </programlisting>
      </informalexample>
    </section>
  </section>
<!--
<Call>

A Call element maps to an arbitrary call to a method on the current object. It can contain a sequence of Arg elements followed by a sequence of configuration elements, such as Set, Put, Call. The <Arg>s are passed as arguments to the method; the sequence of configuration elements act on the object returned by the original call.

Attributes
name 
(required), the name of the arbitrary method to call. The method called will use the exact name you provide it.
class 
(optional), if present, then this Call is treated as a static method.
id 
(optional), if present, you can use this id to refer to any object returned by the call, for later use.
Can Contain
<Arg>, <Set>,<Get>, <Put>, <Call>, <New>, <Ref>, <Array>, <Map>, <Property>

Examples
Basic example
<Call name="doFoo">
  <Arg>bar</Arg>
  <Set name="test">1, 2, 3</Set>
</Call>
This is equivalent to:

Object o2 = o1.doFoo("bar");
o2.setTest("1, 2, 3");
Invoking a static method
<Call class="com.acme.Foo" name="setString">
  <Arg>somestring</Arg>
</Call>
which is equivalent to:

com.acme.Foo.setString("somestring");
Invoking the Actual Method Instead of Relying on Getter/Setter Magic
<Configure id="Server" class="org.eclipse.jetty.server.Server">
  <Call name="getPort" id="port" />
  <Call class="com.acme.Environment" name="setPort">
    <Arg>
      <Ref id="port"/>
    </Arg>
  </Call>
</Configure>
which is equivalent to:

org.mortbay.jetty.Server server = new org.mortbay.jetty.Server();
com.acme.Environment.setPort( server.getPort() );
<Arg>

An Arg element can be an argument of either a method or a constructor. Use it within <Call> and <New>.

It can contain text and/or elements, such as Call, New, SystemProperty, etc., as values. The optional type attribute can force the type of the value. If you don't specify a type, white space is trimmed out of the value. If it contains multiple elements as values, they are added as strings before being converted to any specified type.

Attributes
type 
(optional), force the type of the argument. If you do not provide a value for the element, if you use type of "String", the value will be the empty string (""), otherwise it is null.
Can Contain
value text, <Get>, <Call>, <New>, <Ref>, <Array>, <Map>, <SystemProperty>, <Property>

Examples
Basic examples
<Arg>foo</Arg> <!== String ->
<Arg>true</Arg> <!== Boolean ->
<Arg>1</Arg> <!== int, long, short, float, double ->
<Arg><Ref id="foo" /></Arg>  <!== any object; reference a previously created object with id "foo", and pass it as a parameter ->
<Arg></Arg> <!== null value ->
<Arg type="String"></Arg> <!== empty string "" ->
Coercing Type
This explicitly coerces the type to a boolean:

<Arg type="boolean">False</Arg>
As a Parameter
Here are a couple of examples of <Arg> being used as a parameter to methods and to constructors:

<Call class="com.acme.Environment" name="setFoo">
  <Arg>
    <New class="com.acme.Foo">
      <Arg>bar</Arg>
    </New>
  </Arg>
</Call>
This is equivalent to:

com.acme.Environment.setFoo(new com.acme.Foo("bar"));

<New class="com.acme.Baz">
  <Arg>
    <Call id="bar" class="com.acme.MyStaticObjectFactory" name="createObject">
      <Arg>2</Arg>
    </Call>
  </Arg>
</New>
This is equivalent to:

new com.acme.Baz(com.acme.MyStaticObjectFactory.createObject(2));
<New>

Instantiates an object. Equivalent to new in Java, and allows the creation of a new object. A New element can contain a sequence of <Arg>s, followed by a sequence of configuration elements (Set, Put, etc). <Arg>s are used to select a constructor for the object to be created. The sequence of configuration elements then acts on the newly-created object.

Attributes
class 
(required), fully qualified classname, which determines the type of the new object that is instantiated.
id 
(optional), gives a unique name to the object which can be referenced later by Ref elements.
Can Contain
<Arg>, <Set>,<Get>, <Put>, <Call>, <New>, <Ref>, <Array>, <Map>, <Property>

Examples
Basic example
<New class="com.acme.Foo">
  <Arg>bar</Arg>
</New>
which is equivalent to:

com.acme.Foo foo = new com.acme.Foo("bar");
Instantiate with the Default Constructor
<New class="com.acme.Foo" />
which is equivalent to:

com.acme.Foo foo = new com.acme.Foo();
Instantiate with Multiple Arguments, Then Configuring Further
<New id="foo" class="com.acme.Foo">
   <Arg>bar</Arg>
   <Arg>baz</Arg>
   <Set name="test">1, 2, 3</Set>
 </New>
which is equivalent to:

Object foo = new com.acme.Foo("bar", "baz");
foo.setTest("1, 2, 3");
<Ref>

A Ref element allows a previously created object to be referenced by a unique id. It can contain a sequence of elements, such as Set, Put, etc. which then act on the referenced object. You can also use a Ref element as a value for other elements such as Set and Arg.

The Ref element provides convenience and eases readability. You can usually achieve the effect of the Ref by nesting elements (method calls), but this can get complicated very easily. The Ref element makes it possible to refer to the same object if you're using it multiple times, or passing it into multiple methods. It also makes it possible to split up configuration across multiple files.

Attributes
id 
(required), the unique identifier used to name a previously created object.
Can Contain
<Set>,<Get>, <Put>, <Call>, <New>, <Ref>, <Array>, <Map>, <Property>

Examples
Basic example
Use the referenced object as an argument to a method call or constructor:

<Get id="foo" name="xFoo" />
<Set name="test"><Ref id="foo"/></Set>
This is equivalent to:

foo = getXFoo();
setSomeMethod(foo);
Manipulating the Object Returned by Ref
<Get id="foo" name="xFoo" />
<Ref id="foo">
  <Set name="test">1, 2, 3</Set>
</Ref>
This is equivalent to:

foo = getXFoo();
foo.setTest("1, 2, 3");
Ref vs. Nested Elements
Here is an example of the difference in syntax between using the Ref element, and nesting method calls. They are exactly equivalent:

<!== using Ref in conjunction with Get ->
<Configure id="Server" class="org.eclipse.jetty.server.Server">
  <Get id="Logger" class="org.eclipse.jetty.util.log.Log" name="log"/>
  <Ref id="Logger">
    <Set name="debugEnabled">true</Set>
  </Ref>
</Configure>
<!== calling the setter directly on the object returned by Get ->
<Configure id="Server" class="org.eclipse.jetty.server.Server">
  <Get class="org.eclipse.jetty.util.log.Log" name="log">
    <Set name="debugEnabled">true</Set>
  </Get>
</Configure>
Here is a more practical example, taken from the handler configuration section in etc/jetty.xml:

<Set name="handler">
  <New id="Handlers" class="org.eclipse.jetty.server.handler.HandlerCollection">
    <Set name="handlers">
      <Array type="org.eclipse.jetty.server.Handler">
        <Item>
          <!== create a new instance of a ContextHandlerCollection named "Contexts" ->
          <New id="Contexts" class="org.eclipse.jetty.server.handler.ContextHandlerCollection"/>
        </Item>
        <Item>
          <New id="DefaultHandler" class="org.eclipse.jetty.server.handler.DefaultHandler"/>
        </Item>
        <Item>
          <!== create a new instance of a RequestLogHandler named "RequestLog"->
          <New id="RequestLog" class="org.eclipse.jetty.server.handler.RequestLogHandler"/>
        </Item>
      </Array>
    </Set>
  </New>
</Set>
 
<Call name="addBean">
  <Arg>
    <New class="org.eclipse.jetty.deploy.ContextDeployer">
      <!== pass in the ContextHandlerCollection object ("Contexts") that was created earlier, as an argument ->
      <Set name="contexts"><Ref id="Contexts"/></Set>
    </New>
  </Arg>
</Call>
 
<!== configure the RequestLogHandler object ("RequestLog") that we created earlier ->
<Ref id="RequestLog">
  ....
</Ref>
<Array>

An Array element allows the creation of a new array.

Attributes
type 
(optional), specify what types of items the array can contain.
id 
(optional), unique identifier you can use to refer to the array later.
Can Contain
<Item>

Example
<Array type="java.lang.String">
   <Item>value0</Item>
   <Item><New class="java.lang.String"><Arg>value1</Arg></New></Item>
 </Array>
This is equivalent to:

String[] a = new String[] { "value0", new String("value1") };
<Item>

An Item element defines an entry for Array and Map elements.

Attributes
type 
(optional), force the types of value.
id 
(optional), unique identifier which you can use to refer to the array later.
Can Contain
value text, <Get>, <Call>, <New>, <Ref>, <Array>, <Map>, <SystemProperty>, <Property>

<Map>

A Map element allows the creation of a new HashMap and to populate it with (key, value) pairs.

Attributes
id 
(optional), unique identifier you can use to refer to the map later.
Can Contain
<Entry>

Example
<Map>
  <Entry>
    <Item>keyName</Item>
    <Item><New class="java.lang.String"><Arg>value1</Arg></New></Item>
  </Entry>
</Map>
This is equivalent to:

Map m = new HashMap();
m.put("keyName", new String("value1"));
<Entry>

An Entry element contains a key-value <Item> pair for a Map.

Attributes
No attributes.

Can Contain
Item

<SystemProperty>

A SystemProperty element gets the value of a JVM system property. It can be used within elements which accept values, such as Set, Put, Arg, etc.

Attributes
name 
(required), property name
default 
(optional), a default value as a fallback
id 
(optional), unique identifier which you can use to refer to the array later.
Can Contain
Cannot contain anything.

Example
<SystemProperty name="jetty.port" default="8080"/>
That is equivalent to:

System.getProperty("jetty.port", "8080");
Both try to retrieve the value of jetty.port. If jetty.port is not set, then 8080 will be used.

<Property>

A Property element allows arbitrary properties to be retrieved by name. It can contain a sequence of elements, such as Set, Put, Call, etc., which act on the retrieved object.

Attributes
name 
(required), property name
default 
(optional), a default value as a fallback
id 
(optional), unique identifier which you can use to refer to the array later.
Can Contain
<Set>,<Get>, <Put>, <Call>, <New>, <Ref>, <Array>, <Map>, <Property>

Example
<Property name="Server">
  <Call id="jdbcIdMgr" name="getAttribute">
    <Arg>jdbcIdMgr</Arg>
  </Call>
</Property>
Additional -->
<!-- types section -->
</section>
