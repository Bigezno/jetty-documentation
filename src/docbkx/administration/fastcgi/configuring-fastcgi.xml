<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section xml:id="configuring-fastcgi" version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://docbook.org/xml/5.0/xsd/xlink.xsd">
    <info>
        <title>Configuring Jetty for FastCGI</title>
    </info>
    <para>
        In this section you will see how to configure Jetty to serve WordPress via FastCGI.
    </para>
    <para>
        The first step is to have WordPress installed in your server machine, for example under
        <code>/var/www/wordpress</code>. For more information about how to install WordPress,
        please refer to the <link xl:href="https://codex.wordpress.org/Installing_WordPress">WordPress Installation Guide</link>.
    </para>
    <para>
        The second step is to install <code>php-fpm</code> and make sure it is configured to listen
        on a TCP socket; typically it is configured to listen to <code>localhost:9000</code>.
    </para>
    <para>
        The third step is to install Jetty, for example under <code>/opt/jetty</code>.
        Refer to <xref linkend="jetty-downloading" /> for more information about how to install Jetty.
    </para>
    <para>
        The fourth step is to create a Jetty base directory (see <xref linkend="startup-base-and-home" />),
        called in the following <code>$JETTY_BASE</code>, where you setup the configuration needed to support
        FastCGI in Jetty:
    </para>
    <screen>
$ mkdir -p /usr/jetty/wordpress
$ cd /usr/jetty/wordpress
    </screen>
    <para>
        Therefore <code>$JETTY_BASE=/usr/jetty/wordpress</code>.
    </para>
    <para>
        The fifth step is to deploy the web application that provides the proxying of client requests to
        the FastCGI server, <code>php-fpm</code>.
        Typically this is done by deploying a <code>*.war</code> file in the <code>$JETTY_BASE/webapps</code>
        directory, but in case of FastCGI there is really nothing of this web application that you have to write:
        all the work is already done for you by the Jetty developers.
        Therefore you just need to deploy a Jetty XML file that configures the web application directly.
        Copy and paste the following content as <code>$JETTY_BASE/webapps/jetty-wordpress.xml</code>
    </para>
    <informalexample>
        <programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Configure PUBLIC "-//Mort Bay Consulting//DTD Configure//EN" "http://www.eclipse.org/jetty/configure_9_0.dtd">
<Configure class="org.eclipse.jetty.servlet.ServletContextHandler">

    <New id="root" class="java.lang.String">
        <Arg>/var/www/wordpress</Arg>
    </New>

    <Set name="contextPath">/</Set>
    <Set name="resourceBase"><Ref refid="root" /></Set>
    <Set name="welcomeFiles">
        <Array type="string"><Item>index.php</Item></Array>
    </Set>

    <Call name="addFilter">
        <Arg>org.eclipse.jetty.fcgi.server.proxy.TryFilesFilter</Arg>
        <Arg>/*</Arg>
        <Arg>
            <Call name="of" class="java.util.EnumSet">
                <Arg><Get name="REQUEST" class="javax.servlet.DispatcherType" /></Arg>
            </Call>
        </Arg>
        <Call name="setInitParameter">
            <Arg>files</Arg>
            <Arg>$path /index.php?p=$path</Arg>
        </Call>
    </Call>

    <Call name="addServlet">
        <Arg>
            <New class="org.eclipse.jetty.servlet.ServletHolder">
                <Arg>default</Arg>
                <Arg>
                    <Call name="forName" class="java.lang.Class">
                        <Arg>org.eclipse.jetty.servlet.DefaultServlet</Arg>
                    </Call>
                </Arg>
                <Call name="setInitParameter">
                    <Arg>dirAllowed</Arg>
                    <Arg>false</Arg>
                </Call>
            </New>
        </Arg>
        <Arg>/</Arg>
    </Call>

    <Call name="addServlet">
        <Arg>org.eclipse.jetty.fcgi.server.proxy.FastCGIProxyServlet</Arg>
        <Arg>*.php</Arg>
        <Call name="setInitParameter">
            <Arg>proxyTo</Arg>
            <Arg>http://localhost:9000</Arg>
        </Call>
        <Call name="setInitParameter">
            <Arg>prefix</Arg>
            <Arg>/</Arg>
        </Call>
        <Call name="setInitParameter">
            <Arg>scriptRoot</Arg>
            <Arg><Ref refid="root" /></Arg>
        </Call>
        <Call name="setInitParameter">
            <Arg>scriptPattern</Arg>
            <Arg>(.+?\\.php)</Arg>
        </Call>
    </Call>

</Configure>
        ]]></programlisting>
    </informalexample>
    <para>
        Explanation of this file content:
    </para>
    <itemizedlist>
        <listitem>
            <para>
                At line 6 it is specified the WordPress installation directory, in this example
                <code>/var/www/wordpress</code> (as defined in the first step).
            </para>
        </listitem>
        <listitem>
            <para>
                At line 9 it is specified the context path at which WordPress will be served, in this example
                at the root context path <code>/</code>.
            </para>
        </listitem>
        <listitem>
            <para>
                At line 10 it is specified the resource base of the context, also set to the WordPress installation
                directory. This allows Jetty to serve static resources directly from the WordPress installation
                directory.
            </para>
        </listitem>
        <listitem>
            <para>
                At line 12 it is specified the welcome file as <code>index.php</code>, so that
                Jetty can perform the proper redirects in case of URIs ending with the <code>/</code>
                character.
            </para>
        </listitem>
        <listitem>
            <para>
                At line 15 it is specified the <code>TryFilesFilter</code>, a Servlet Filter that has been inspired
                by the <link xl:href="http://wiki.nginx.org/HttpCoreModule#try_files">try_files</link> functionality
                offered by Nginx.
                This filter tries to serve the resource from the file system first, and if the resource is not found
                it forwards the request as <code>index.php?p=$path</code>, which will match the proxy servlet
                defined below. Refer to the
                <link xl:href="@JDURL@/org/eclipse/jetty/fcgi/server/proxy/TryFilesFilter.html">TryFilesFilter</link>
                documentation for further information.
            </para>
        </listitem>
        <listitem>
            <para>
                At line 29 it is specified Jetty's <code>DefaultServlet</code> to serve static content such as
                CSS files, JavaScript files, etc. <code>DefaultServlet</code> will serve these files by looking
                in the resource base of the context, defined at line 10 (see above).
            </para>
        </listitem>
        <listitem>
            <para>
                At line 47 it is specified the <code>FastCGIProxyServlet</code>, a Servlet that proxies HTTP
                requests arriving from clients to FastCGI requests to the FastCGI server.
            </para>
        </listitem>
        <listitem>
            <para>
                At line 52 it is specified the TCP address of the FastCGI server (<code>php-fpm</code>), where
                HTTP requests are forwarded as FastCGI requests.
            </para>
        </listitem>
        <listitem>
            <para>
                At line 60 it is specified once again the WordPress installation directory, so that the
                <code>FastCGIProxyServlet</code> can pass this information to the FastCGI server.
            </para>
        </listitem>
        <listitem>
            <para>
                At line 64 it is specified a regular expression that matches request URIs performed to this
                servlet, in addition to the standard URL mapping defined by Servlet at line 49.
                Refer to the
                <link xl:href="@JDURL@/org/eclipse/jetty/fcgi/server/proxy/FastCGIProxyServlet.html">FastCGIProxyServlet</link>
                documentation for further information.
            </para>
        </listitem>
    </itemizedlist>

    <section xml:id="configuring-fastcgi-http">
        <info>
            <title>Configuring Jetty to Proxy HTTP to FastCGI</title>
        </info>
        <para>
            In order to configure Jetty to listen for HTTP requests from clients and forward them to
            the FastCGI server as FastCGI requests, you need to specify a <code>start.ini</code> file
            that configures the Jetty modules that are needed for Jetty to proxy HTTP to FastCGI.
            The minimal <code>start.ini</code> file is the following:
        </para>
        <informalexample>
            <programlisting><![CDATA[
# The 'deploy' module enables Jetty to look up in the 'webapps' directory for files to deploy.
--module=deploy

# The 'fcgi' module enables FastCGI support.
--module=fcgi

# The 'http' module enables a HTTP connector that listens for client requests on port 8080.
--module=http
jetty.port=8080
            ]]></programlisting>
        </informalexample>
        <para>
            At this point, you can start Jetty (see <xref linkend="startup" />), hit <code>http://localhost:8080</code>
            with your browser and enjoy WordPress:
        </para>
        <screen>
$ cd $JETTY_BASE
$ java -jar /opt/jetty/start.jar
        </screen>
    </section>

    <section xml:id="configuring-fastcgi-spdy">
        <info>
            <title>Configuring Jetty to Proxy SPDY to FastCGI</title>
        </info>
        <para>
            In order to configure Jetty to listen for SPDY requests from clients that are SPDY enabled
            and forward them to the FastCGI server as FastCGI requests, you need to specify a
            <code>start.ini</code> file that configures the Jetty modules that are needed for Jetty to
            proxy SPDY to FastCGI.
        </para>
        <para>
            Remember that for SPDY to work you will need to run over SSL, and you will need the NPN boot jar
            in the boot classpath, as explained in <xref linkend="spdy-configuring" />.
        </para>
        <para>
            Since now your site will run over SSL, you need to make sure that the WordPress URL is also
            configured so.
            If you have followed the steps of the <xref linkend="configuring-fastcgi-http">previous section</xref>,
            your WordPress site is served at <code>http://localhost:8080</code>.
            You will need to change that to be <code>https://localhost:8443</code> from the WordPress
            administration web interface, or follow the
            <link xl:href="http://codex.wordpress.org/Changing_The_Site_URL">WordPress instructions</link>
            to do so without using the administration web interface.
        </para>
        <para>
            The minimal <code>start.ini</code> file is the following:
        </para>
        <informalexample>
            <programlisting><![CDATA[
# The 'deploy' module enables Jetty to look up in the 'webapps' directory for files to deploy.
--module=deploy

# The 'fcgi' module enables FastCGI support.
--module=fcgi

# The 'spdy' module enables a SPDY connector that listens for client requests on port 8443.
--module=spdy
spdy.port=8443
            ]]></programlisting>
        </informalexample>
        <para>
            Note that we specified the <code>spdy.port</code> to be <code>8443</code>.
        </para>
        <para>
            At this point, you will need the NPN boot jar and the SSL certificate.
            In this example, you can obtain them very easily using the built-in feature of the Jetty start
            mechanism that downloads required dependencies, see <xref linkend="startup" />.
            However, remember that the example SSL certificate that is downloaded will not be valid for your
            website and that it must not be used in production. It is provided only for testing and example
            purposes.
            To leverage the automatic download of required dependencies, issue this command:
        </para>
        <screen>
$ cd $JETTY_BASE
$ java -jar /opt/jetty/start.jar --create-files
        </screen>
        <para>
            At this point, you can start Jetty (see <xref linkend="startup" />), hit <code>http://localhost:8080</code>
            with your browser and enjoy WordPress via SPDY using a SPDY enabled browser:
        </para>
        <screen>
$ cd $JETTY_BASE
$ java -Xbootclasspath/p:lib/npn/npn-boot-&lt;version&gt;.jar -jar /opt/jetty/start.jar
        </screen>
        <para>
            If you don't have a SPDY enabled browser, WordPress will still be available over plain HTTPS.
        </para>
    </section>
</section>
