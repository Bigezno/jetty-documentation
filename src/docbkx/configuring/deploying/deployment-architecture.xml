<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="deployment-architecture"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Deployment Architecture</title>

  <para>Jetty is built around an extensible Deployment Manager architecture
  complete with formal LifeCycle for Web Applications going through it.</para>

  <para>For Jetty to serve content (static or dynamic), you need to create a
  <link
  xl:href="@JDURL@/org/eclipse/jetty/server/handler/ContextHandler.html">ContextHandler</link>
  and add it to Jetty in the appropriate place. A pluggable DeploymentManager
  exists in Jetty 7 and later to make this process easier. The Jetty
  distribution contains example DeploymentManager configurations to deploy WAR
  files found in a directory to Jetty, and to deploy Jetty
  <filename>context.xml</filename> files into Jetty as well.</para>

  <para>The DeploymentManager is the heart of the typical webapp deployment
  mechanism; it operates as a combination of an Application LifeCycle Graph,
  Application Providers that find and provide Applications into the
  Application LifeCycle Graph, and a set of bindings in the graph that control
  the deployment process.</para>

  <mediaobject>
    <info>
      <othercredit>
        <orgname>jetty deployment manager roles</orgname>
      </othercredit>
    </info>

    <imageobject>
      <imagedata align="center"
                 fileref="images/Jetty_DeployManager_DeploymentManager_Roles.png"
                 format="PNG" width="195px"/>
    </imageobject>
  </mediaobject>

  <section xml:id="udm-application-providers">
    <title>Application Providers</title>

    <para>Before Jetty deploys an application, an <link
    xl:href="@JDURL@/org/eclipse/jetty/deploy/AppProvider.html">
    AppProvider</link> identifies the App and then provides it to the
    DeploymentManager. The main AppProvider with the Jetty distribution is the
    <link
    xl:href="@JDURL@/org/eclipse/jetty/deploy/providers/WebAppProvider.html">WebAppProvider.</link></para>
  </section>

  <section xml:id="udm-application-lifecycle-graph">
    <title>Application LifeCycle Graph</title>

    <para>The core feature of the DeploymentManager is the <link
    xl:href="@JDURL@/org/eclipse/jetty/deploy/AppLifeCycle.html">Application
    LifeCycle Graph</link>.</para>

    <mediaobject>
      <info>
        <othercredit>
          <orgname>jetty deployment manager life cycle</orgname>
        </othercredit>
      </info>

      <imageobject>
        <imagedata align="center"
                   fileref="images/Jetty_DeployManager_AppLifeCycle-1.png"
                   format="PNG" width="340px"/>
      </imageobject>
    </mediaobject>

    <para>The nodes and edges of this graph are pre-defined in Jetty along the
    most common actions and states found. These nodes and edges are not
    hardcoded; you can adjust and add to them depending on your needs (for
    example, any complex requirements for added workflow, approvals, staging,
    distribution, coordinated deploys for a cluster or cloud, etc.).</para>

    <para>New applications enter this graph at the Undeployed node, and the
    <link
    xl:href="@JDURL@/org/eclipse/jetty/deploy/DeploymentManager.html#requestAppGoal(org.eclipse.jetty.deploy.App">
    <code>java.lang.String DeploymentManager.requestAppGoal(App,String)</code>
    </link> method pushes them through the graph.</para>
  </section>

  <section xml:id="udm-lifecycle-bindings">
    <title>LifeCycle Bindings</title>

    <para>A set of default <link
    xl:href="@JDURL@/org/eclipse/jetty/deploy/AppLifeCycle.Binding.html">
    <code>AppLifeCycle.Bindings</code> </link> defines standard behavior, and
    handles deploying, starting, stopping, and undeploying applications. If
    you choose, you can write your own <code>AppLifeCycle.Bindings</code> and
    assign them to anywhere on the Application LifeCycle graph.</para>

    <para>Examples of new <code>AppLifeCycle.Binding</code> implementations
    that you can write include:</para>

    <itemizedlist>
      <listitem>
        <para>Validating the incoming application.</para>
      </listitem>

      <listitem>
        <para>Preventing the deployment of known forbidden
        applications.</para>
      </listitem>

      <listitem>
        <para>Submitting the installation to an application auditing service
        in a corporate environment.</para>
      </listitem>

      <listitem>
        <para>Distributing the application to other nodes in the cluster or
        cloud.</para>
      </listitem>

      <listitem>
        <para>Emailing owner/admin of change of state of the
        application.</para>
      </listitem>
    </itemizedlist>

    <para>There are four default bindings:</para>

    <itemizedlist>
      <listitem>
        <para><link
        xl:href="@JDURL@/org/eclipse/jetty/deploy/bindings/StandardDeployer.html">
        StandardDeployer</link> — Deploys the ContextHandler into Jetty in
        the appropriate place.</para>
      </listitem>

      <listitem>
        <para><link
        xl:href="@JDURL@/org/eclipse/jetty/deploy/bindings/StandardStarter.html">
        StandardStarter</link> — Sets the ContextHandler to started and start
        accepting incoming requests.</para>
      </listitem>

      <listitem>
        <para><link
        xl:href="@JDURL@/org/eclipse/jetty/deploy/bindings/StandardStopper.html">
        StandardStopper</link> — Stops the ContextHandler and stops accepting
        incoming requests.</para>
      </listitem>

      <listitem>
        <para><link
        xl:href="@JDURL@/org/eclipse/jetty/deploy/bindings/StandardUndeployer.html">
        StandardUndeployer</link> — Removes the ContextHandler from
        Jetty.</para>
      </listitem>
    </itemizedlist>

    <mediaobject>
      <info>
        <othercredit>
          <orgname>jetty deployment manager - default life cycle
          bindings</orgname>
        </othercredit>
      </info>

      <imageobject>
        <imagedata align="center"
                   fileref="images/Jetty_DeployManager_DefaultAppLifeCycleBindings.png"
                   format="PNG" width="851px"/>
      </imageobject>
    </mediaobject>

    <para>A fifth, non-standard binding, called <link
    xl:href="@JDURL@/org/eclipse/jetty/deploy/bindings/DebugBinding.html">Debug
    Binding</link>, is also available for debugging reasons; It logs the
    various transitions through the Application LifeCycle.</para>
  </section>

  <section xml:id="default-web-app-provider">
    <title>Understanding the Default WebAppProvider</title>

    <para>The <link
    xl:href="@JDURL@/org/eclipse/jetty/deploy/providers/WebAppProvider.html">WebAppProvider</link>
    is for the deployment of Web Applications packaged as WAR files, expanded
    as a directory, or declared in a <xref
    linkend="deployable-descriptor-file"/>. It supports hot
    (re)deployment.</para>

    <para>The basic operation of the WebAppProvider is to periodically scan a
    directory for deployables. In the standard Jetty Distribution, this is
    configured in the <filename>${jetty.home}/etc/jetty-deploy.xml</filename>
    file.</para>

    <para><informalexample>
        <programlisting language="xml">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure_9_0.dtd"&gt;
&lt;Configure id="Server" class="org.eclipse.jetty.server.Server"&gt;

  &lt;Call name="addBean"&gt;
    &lt;Arg&gt;
      &lt;New id="DeploymentManager" class="org.eclipse.jetty.deploy.DeploymentManager"&gt;
        &lt;Set name="contexts"&gt;
          &lt;Ref refid="Contexts" /&gt;
        &lt;/Set&gt;
        &lt;Call id="webappprovider" name="addAppProvider"&gt;
          &lt;Arg&gt;
            &lt;New class="org.eclipse.jetty.deploy.providers.WebAppProvider"&gt;
              &lt;Set name="monitoredDirName"&gt;&lt;Property name="jetty.home" default="." /&gt;/webapps&lt;/Set&gt;
              &lt;Set name="defaultsDescriptor"&gt;&lt;Property name="jetty.home" default="." /&gt;/etc/webdefault.xml&lt;/Set&gt;
              &lt;Set name="scanInterval"&gt;1&lt;/Set&gt;
              &lt;Set name="extractWars"&gt;true&lt;/Set&gt;
            &lt;/New&gt;
          &lt;/Arg&gt;
        &lt;/Call&gt;
      &lt;/New&gt;
    &lt;/Arg&gt;
  &lt;/Call&gt;
&lt;/Configure&gt;    </programlisting>
      </informalexample></para>

    <para>The above configuration will create a DeploymentManager tracked as a
    Server LifeCycle Bean, with the following configuration.</para>

    <para><variablelist>
        <varlistentry>
          <term>contexts</term>

          <listitem>
            <para>A passed in reference to the HandlerContainer into which the
            discovered webapps are deployed. This is normally a reference that
            points to the <literal>id="Contexts"</literal> found in the
            <filename>${jetty.home}/etc/jetty.xml</filename> file, which
            itself is an instance of ContextHandlerCollection.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>monitoredDirName</term>

          <listitem>
            <para>Is a file path or URL to the directory to scan for web
            applications.</para>

            <para>Scanning follows these rules:</para>

            <orderedlist>
              <listitem>
                <para>Base directory must exist</para>
              </listitem>

              <listitem>
                <para>Hidden Files (starting with <filename>"."</filename>)
                are ignored</para>
              </listitem>

              <listitem>
                <para>Directories with names ending in
                <filename>".d"</filename> are ignored.</para>
              </listitem>

              <listitem>
                <para>Common CVS directories <filename>"CVS"</filename> and
                <filename>"CVSROOT"</filename> are ignored</para>
              </listitem>

              <listitem>
                <para>Any <filename>*.war</filename> files are considered
                <link linkend="automatic-webapp-deployment">automatic
                deployables</link></para>
              </listitem>

              <listitem>
                <para>Any <filename>*.xml</filename> files are considered
                <link linkend="deployable-descriptor-file">context descriptor
                deployables</link></para>
              </listitem>

              <listitem>
                <para>In the special case where both a WAR file and XML file
                exists for same base name, then the WAR file is flagged as
                not-deployable, and the XML file is assumed to configure and
                reference the WAR file. (see <xref
                linkend="configuring-specific-webapp-deployment"/>)</para>
              </listitem>

              <listitem>
                <para>And directory is considered to be deployable</para>
              </listitem>

              <listitem>
                <para>In the special case where both a Directory and WAR file
                of the same name exists, the directory is flagged as
                not-deployable, and the WAR file is assumed to be and
                automatic deployable.</para>
              </listitem>

              <listitem>
                <para>In the special case where both a DIrectory and XML file
                of the same name exists, the directory is flagged as
                not-deployable, and the XML file is assumed to configure and
                reference the Directory.</para>
              </listitem>

              <listitem>
                <para>All other directories are subject to automatic
                deployment.</para>
              </listitem>

              <listitem>
                <para>If automatic deployment is used, and the special
                filename <filename>root.war</filename> or directory name
                <filename>root</filename> will result in a deployment to the
                <literal>"/"</literal> context path.</para>
              </listitem>
            </orderedlist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>defaultsDescriptor</term>

          <listitem>
            <para>Specifies the default Servlet web descriptor to use for all
            Web Applications. The intent of this descriptor is to include
            common configuration for the Web Application before the Web
            Application's own <filename>/WEB-INF/web.xml</filename> is
            applied. The <filename>${jetty.home}/etc/webdefault.xml</filename>
            that comes with the Jetty distribution controls the configuration
            of the JSP and Default servlets, along with mimetypes and other
            basic metadata.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>scanInterval</term>

          <listitem>
            <para>Is the period in seconds between sweeps of the
            <literal>monitoredDirName</literal> for changes: new contexts to
            deploy, changed contexts to redeploy, or removed contexts to
            undeploy.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>extractWars</term>

          <listitem>
            <para>If parameter is true, any packed WAR or zip files are first
            extracted to a temporary directory before being deployed. This is
            advisable if there are uncompiled JSPs in the web apps.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>parentLoaderPriority</term>

          <listitem>
            <para>parameter is a boolean that selects whether the standard
            Java <link linkend="jetty-classloading">parent first
            delegation</link> is used or the <link
            linkend="jetty-classloading">servlet specification webapp
            classloading priority</link>. The latter is the default.</para>
          </listitem>
        </varlistentry>
      </variablelist></para>
  </section>
</section>
