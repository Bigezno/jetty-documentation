<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="example-slf4j-multiple-loggers"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Example: Capturing Multiple Logging Frameworks with Slf4j</title>

  <para>This page describes how to configure Jetty for capturing multiple
  logging frameworks logging events into a single logging implementation
  handled by Slf4j.</para>

  <para>When using Slf4j, you can configure a single logging solution for the
  variety of logging libraries available in common use. With careful setup,
  you can support all of the following logging APIs at the same time, with a
  single configuration file to control the output of events produces by these
  APIs.</para>

  <para>Logging APIs that Slf4j supports:</para>

  <itemizedlist>
    <listitem>
      <para>Slf4j API</para>
    </listitem>

    <listitem>
      <para>Logback API</para>
    </listitem>

    <listitem>
      <para>Apache Log4j 1.2</para>
    </listitem>

    <listitem>
      <para>JDK 1.4 Logging (aka <literal>java.util.logging</literal>)</para>
    </listitem>

    <listitem>
      <para>Apache Commons Logging</para>
    </listitem>
  </itemizedlist>

  <para>To accomplish this you must make some careful choices, starting with a
  single underlying logging framework. This decision guides the rest of your
  choices about JARs to place on the Server classpath.</para>

  <table width="8">
    <title>Slf4j Logging Grid</title>

    <tgroup cols="4">
      <colspec colwidth="25%"/>

      <colspec colwidth="25%"/>

      <colspec colwidth="25%"/>

      <colspec colwidth="25%"/>

      <thead>
        <row>
          <entry>Logging API</entry>

          <entry>Slf4j Binding Jar</entry>

          <entry>Slf4j Adapter Jar</entry>

          <entry>Underlying Logging Framework</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>Logback API</entry>

          <entry>n/a</entry>

          <entry>logback-classic.jar</entry>

          <entry>logback-core.jar</entry>
        </row>

        <row>
          <entry>Log4j</entry>

          <entry><link
          xl:href="http://slf4j.org/legacy.html#log4j-over-slf4j">log4j-over-slf4j.jar</link></entry>

          <entry>slf4j-log4j12.jar</entry>

          <entry>log4j.jar</entry>
        </row>

        <row>
          <entry>JDK 1.4 Logging</entry>

          <entry><link
          xl:href="http://slf4j.org/legacy.html#jul-to-slf4j">jul-to-slf4j.jar</link></entry>

          <entry>slf4j-jdk14.jar</entry>

          <entry>(Core Java Classlib)</entry>
        </row>

        <row>
          <entry>Commons Logging</entry>

          <entry><link
          xl:href="http://slf4j.org/legacy.html#jcl-over-slf4j">jcl-over-slf4j.jar</link></entry>

          <entry>slf4j-jcl.jar</entry>

          <entry>commons-logging.jar</entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <variablelist>
    <varlistentry>
      <term>Logging API</term>

      <listitem>
        <para>The Logging API that you are either capturing events from and/or
        using to write out those events (for example, to disk).</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Slf4j Binding JAR</term>

      <listitem>
        <para>Special JARs, created and maintained by the Slf4j project, that
        pretend to be the various Logging API implementation classes, but
        instead just route that Logging API's events to Slf4j to
        handle.</para>

        <para>There MAY be multiple Slf4j binding JARs present on the
        classpath at the same time.</para>

        <para>For a single logging API, if you choose to use the Slf4j binding
        JAR, then you MUST NOT include the SLf4j adapter JAR or underlying
        logging framework in the classpath as well.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Slf4j Adapter Jar</term>

      <listitem>
        <para>These JARs are created and maintained by the Slf4j project and
        route Slf4j logging events to a specific underlying logging
        framework.</para>

        <para>There MUST NOT be multiple Slf4j adapter JARs present on the
        classpath at the same time.</para>

        <para>Logging events that these adapter JARs capture can come from
        direct use of the Slf4j API or via one of the Slf4j binding JAR
        implementations.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Underlying Logging Framework</term>

      <listitem>
        <para>This is the last leg of your configuration, the implementation
        that processes, filters, and outputs the logging events to the
        console, logging directory on disk, or whatever else the underlying
        logging framework supports (like Socket, SMTP, Database, or even
        SysLog in the case of Logback).</para>

        <para><caution>
            <para>There MUST NOT be multiple underlying logging frameworks on
            the classpath. If there are, the Slf4j framework fails to
            load.</para>
          </caution></para>

        <para><note>
            <para>Some third party libraries provide their own implementations
            of common logging APIs; be careful not to accidentally include an
            underlying logging framework.</para>

            <para>For example, if you are using SpringSource you likely have a
            <filename>com.springsource.org.apache.log4j.jar</filename> along
            with a <filename>log4j.jar</filename>, which have the same classes
            in them. In this example, use the
            <filename>com.springsource.org.apache.log4j.jar</filename> version
            and exclude the <filename>log4j.jar</filename>, as the
            SpringSource version includes extra metadata suitable for using
            SpringSource.</para>
          </note></para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>The following sections use Logback as the underlying Logging
  framework. This requires using <literal>logback-classic.jar</literal> and
  <literal>logback-core.jar</literal>, and excluding any other Slf4j adapter
  JAR or underlying logging framework.</para>

  <para>It also requires including the other Slf4j binding JARs in the
  classpath, along with some special initialization for
  <literal>java.util.logging</literal>.</para>

  <simplesect>
    <title>Quick Setup of Multiple Logging capture to Logback using Jetty
    9.2.1+</title>

    <para>A convenient replacement <literal>logging</literal> module has been
    created to bootstrap your <filename>${jetty.base}</filename> directory for
    capturing all Jetty server logging from multiple logging frameworks into a
    single logging output file managed by logback.</para>

    <screen><![CDATA[[mybase]$ mkdir modules
[mybase]$ cd modules

[modules]$ ]]><emphasis role="bold">curl -O https://raw.githubusercontent.com/jetty-project/logging-modules/master/capture-all/logging.mod</emphasis><![CDATA[
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  1293  100  1293    0     0   3693      0 --:--:-- --:--:-- --:--:--  3694
[modules]$ cd ..

[mybase]$ ]]><emphasis role="bold">java -jar /opt/jetty-dist/start.jar --add-to-start=logging</emphasis><![CDATA[
INFO: logging         initialised in ${jetty.base}/start.ini (appended)
MKDIR: ${jetty.base}/logs
DOWNLOAD: http://central.maven.org/maven2/org/slf4j/slf4j-api/1.6.6/slf4j-api-1.6.6.jar to lib/logging/slf4j-api-1.6.6.jar
DOWNLOAD: http://central.maven.org/maven2/org/slf4j/log4j-over-slf4j/1.6.6/log4j-over-slf4j-1.6.6.jar to lib/logging/log4j-over-slf4j-1.6.6.jar
DOWNLOAD: http://central.maven.org/maven2/org/slf4j/jul-to-slf4j/1.6.6/jul-to-slf4j-1.6.6.jar to lib/logging/jul-to-slf4j-1.6.6.jar
DOWNLOAD: http://central.maven.org/maven2/org/slf4j/jcl-over-slf4j/1.6.6/jcl-over-slf4j-1.6.6.jar to lib/logging/jcl-over-slf4j-1.6.6.jar
DOWNLOAD: http://central.maven.org/maven2/ch/qos/logback/logback-core/1.0.7/logback-core-1.0.7.jar to lib/logging/logback-core-1.0.7.jar
DOWNLOAD: http://central.maven.org/maven2/ch/qos/logback/logback-classic/1.0.7/logback-classic-1.0.7.jar to lib/logging/logback-classic-1.0.7.jar
DOWNLOAD: https://raw.githubusercontent.com/jetty-project/logging-modules/master/capture-all/logback.xml to resources/logback.xml
DOWNLOAD: https://raw.githubusercontent.com/jetty-project/logging-modules/master/capture-all/jetty-logging.properties to resources/jetty-logging.properties
DOWNLOAD: https://raw.githubusercontent.com/jetty-project/logging-modules/master/capture-all/jetty-logging.xml to etc/jetty-logging.xml
INFO: resources       initialised transitively
INFO: resources       enabled in     ${jetty.base}/start.ini

[mybase]$ ]]><emphasis role="bold">java -jar /opt/jetty-dist/start.jar</emphasis><![CDATA[
]]></screen>
  </simplesect>

  <simplesect>
    <title>That's cool and all, but tell me what that just did.</title>

    <para>The replacement <filename>logging.mod</filename> performs a number
    of tasks.</para>

    <orderedlist>
      <listitem>
        <para><filename>mybase</filename> is a
        <filename>${jetty.base}</filename> directory</para>
      </listitem>

      <listitem>
        <para>The jetty-distribution is unpacked (and untouched) into
        <filename>/opt/jetty-dist/ </filename>and becomes the
        <filename>${jetty.home}</filename> directory for this
        demonstration.</para>
      </listitem>

      <listitem>
        <para>The <command>curl</command> command downloads the replacement
        <filename>logging.mod</filename> and puts it into the
        <filename>${jetty.base}/modules/</filename> directory for use by
        mybase only.</para>
      </listitem>

      <listitem>
        <para>The <command>start.jar --add-to-start=logging</command> command
        performs a number of steps to make the logging module available to the
        <filename>${jetty.base}</filename> configuration.</para>

        <orderedlist>
          <listitem>
            <para>The <command>--module=logging</command> command is added to
            the <filename>${jetty.base}/start.ini</filename>
            configuration</para>
          </listitem>

          <listitem>
            <para>Required <filename>${jetty.base}</filename> directories are
            created: <filename>${jetty.base}/logs</filename> and
            <filename>${jetty.base}/resources</filename></para>
          </listitem>

          <listitem>
            <para>Required libraries are downloaded (if not present
            already):</para>

            <itemizedlist>
              <listitem>
                <para>slf4j-api.jar - API jar for Slf4j (used by most of the
                rest of the jars)</para>
              </listitem>

              <listitem>
                <para>log4j-over-slf4j.jar - Slf4j jar that captures all log4j
                emitted logging events</para>
              </listitem>

              <listitem>
                <para>jul-to-slf4j.jar - Slf4j jar that captures all
                java.util.logging events</para>
              </listitem>

              <listitem>
                <para>jcl-over-slf4j.jar - Slf4j jar that captures all
                commons-logging events</para>
              </listitem>

              <listitem>
                <para>logback-classic.jar - the Slf4j adapter jar that routes
                all of the captured logging events to logback itself.</para>
              </listitem>

              <listitem>
                <para>logback-core.jar - the logback implementation jar, that
                handles all of the filtering and output of the logging
                events.</para>
              </listitem>
            </itemizedlist>

            <para>These libraries are put in the
            <filename>${jetty.base}/lib/logging/</filename> directory.</para>
          </listitem>

          <listitem>
            <para>Required configuration files are downloaded (if not present
            already): <filename>jetty-logging.properties</filename>, and
            <filename>logback.xml</filename></para>

            <para>The configuration files are put in the
            <filename>${jetty.base}/resources/</filename> directory.</para>
          </listitem>

          <listitem>
            <para>Required <literal>java.util.logging</literal> initialization
            commands are downloaded (if not present already):
            <filename>jetty-logging.xml</filename></para>

            <para>The xml file is put in the
            <filename>${jetty.base}/etc/</filename> directory.</para>
          </listitem>
        </orderedlist>
      </listitem>

      <listitem>
        <para>At this point you have your <filename>mybase</filename>
        configured so that the jetty server itself will log using slf4j, and
        all other logging events from other Jetty Server components (such as
        database drivers, security layers, jsp, mail, and other 3rd party
        server components) are routed to logback for filtering and
        output.</para>
      </listitem>
    </orderedlist>

    <para>You can verify the server classpath by using the <command>start.jar
    --list-config</command> command.</para>

    <para>In essence, Jetty is now configured to emit its own logging events
    to slf4j, and various slf4j bridge jars are acting on behalf of log4j,
    java.util.logging, and commons-logging, routing all of the logging events
    to logback (a slf4j adapter) for routing (to console, file, etc...)</para>
  </simplesect>
</section>
