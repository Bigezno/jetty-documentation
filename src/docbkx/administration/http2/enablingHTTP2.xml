<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2015 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="http2-enabling" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Enabling HTTP/2</title>

  <para>This section is written assuming that a jetty base directory is being
  used and a demo jetty base that support HTTP/1, HTTPS/1 and deployment from
  a webapps directory can be created with the commands: </para>

  <informalexample>
    <para><programlisting><![CDATA[$ JETTY_BASE=http2-demo
$ mkdir $JETTY_BASE
$ cd $JETTY_BASE
$ java -jar $JETTY_HOME/start.jar --add-to-startd=http,https,deploy]]></programlisting></para>
  </informalexample>

  <para>The commands above create a <code>$JETTY_BASE</code> directory called
  <code>http2-demo</code>, and initializes the <code>http,</code>
  <code>https</code> and <code>deploy</code> modules (and their dependencies)
  to run a typical Jetty Server on port 8080 (for HTTP/1) and 8443 (for
  HTTPS/1). Note that the https module downloads a demo keystore file with a
  self signed certificate, which needs to be replaced by a Certificate
  Authority issued certificate for real deployment.</para>

  <para>To add HTTP/2 to this demo base, it is just a matter of enabling the
  http2 module with the following command:</para>

  <para><informalexample>
      <programlisting language="shell"><![CDATA[$ java -jar $JETTY_HOME/start.jar --add-to-startd=http2]]></programlisting>
    </informalexample>This command does not create a new connector, but
  instead simply adds the HTTP/2 protocol to the existing HTTPS/1 connector,
  so that it now supports both protocols on port 8443. To do this, it also
  transitively enables the ALPN module for protocol negotiation. The support
  for each protocol can be seen in the info logging when the server is
  started:</para>

  <para><informalexample>
      <programlisting language="shell"><![CDATA[$ java -jar $JETTY_HOME/start.jar
...
2015-06-17 14:16:12.549:INFO:oejs.ServerConnector:main: Started ServerConnector@34c9c77f{HTTP/1.1,[http/1.1]}{0.0.0.0:8080}
2015-06-17 14:16:12.782:INFO:oejs.ServerConnector:main: Started ServerConnector@711f39f9{SSL,[ssl, alpn, h2, h2-17, http/1.1]}{0.0.0.0:8443}
...]]></programlisting>
    </informalexample>This log shows that port 8080 supports only HTTP/1.1
  (which by specification includes HTTP/1.0 support), while port 8443 supports
  the SSL protocol, with ALPN negotiation to select between several versions
  of HTTP/2 (h2 &amp; the draft h2-17) and HTTP/1.1. What is not shown, is
  that http/1.1 is the default ALPN protocol, so that if a client connects
  that does not speak ALPN, then HTTP/1.1 will be assumed.</para>

  <para>A browser can now be pointed at <code>https://localhost:8443/</code>
  and if it supports HTTP/2 then it will be used (often indicated by a
  lightening bolt icon in the address bar). Note that a browser pointed at
  this server with URL starting with <code>http://localhost:8080/</code> will
  still talk HTTP/1.1, as HTTP/2 has not been enabled on the plain text
  connector.</para>

  <para>HTTP/2 can be enabled on the plain text connector and the server
  restarted with the following command:<informalexample>
      <programlisting language="shell"><![CDATA[$ java -jar $JETTY_HOME/start.jar --add-to-startd=http2c
$ java -jar $JETTY_HOME/start.jar
...
2015-06-17 14:16:12.549:INFO:oejs.ServerConnector:main: Started ServerConnector@6f32cd1e{HTTP/1.1,[http/1.1, h2c, h2c-17]}{0.0.0.0:8080}
2015-06-17 14:16:12.782:INFO:oejs.ServerConnector:main: Started ServerConnector@711f39f9{SSL,[ssl, alpn, h2, h2-17, http/1.1]}{0.0.0.0:8443}
...]]></programlisting>
    </informalexample>However, no major browser currently supports plain text
  HTTP/2, so the 8080 port will only be able to use HTTP/2 with specific
  clients (eg cUrl) that use the upgrade mechanism or assume HTTP/2</para>
</section>
