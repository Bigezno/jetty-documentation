<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="example-slf4j-multiple-loggers"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Example: Capturing Multiple Logging frameworks with Slf4j</title>

  <para>This page describes how to Configure Jetty for capturing multiple
  logging frameworks logging events into a single logging implementation
  handled by Slf4j.</para>

  <para>When using Slf4j, it is possible to configure a single logging
  solution for the variety of logging libraries available in common
  use.</para>

  <para>With some careful setup, you can support all of the following logging
  APIs at the same time, with a single configuration file to control the
  output of events produces by these APIs.</para>

  <para>Logging APIs supported by Slf4j:</para>

  <itemizedlist>
    <listitem>
      <para>Slf4j API</para>
    </listitem>

    <listitem>
      <para>Logback API</para>
    </listitem>

    <listitem>
      <para>Apache Log4j 1.2</para>
    </listitem>

    <listitem>
      <para>JDK 1.4 Logging (aka java.util.logging)</para>
    </listitem>

    <listitem>
      <para>Apache Commons Logging</para>
    </listitem>
  </itemizedlist>

  <para>To accomplish this you must make some careful choices.</para>

  <para>Starting with: <emphasis>What will my 1 single Underlying Logging
  Framework be?</emphasis></para>

  <para>This decision will guide the rest of your decisions on JAR
  choices.</para>

  <para>The choice of underlying logging framework forces you to be careful
  about other logging JARs present on the Server Classpath.</para>

  <table width="8">
    <title>Slf4j Logging Grid</title>

    <tgroup cols="4">
      <colspec colwidth="25%"/>

      <colspec colwidth="25%"/>

      <colspec colwidth="25%"/>

      <colspec colwidth="25%"/>

      <thead>
        <row>
          <entry>Logging API</entry>

          <entry>Slf4j Binding Jar</entry>

          <entry>Slf4j Adapter Jar</entry>

          <entry>Underlying Logging Framework</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>Logback API</entry>

          <entry>n/a</entry>

          <entry>logback-classic.jar</entry>

          <entry>logback-core.jar</entry>
        </row>

        <row>
          <entry>Log4j</entry>

          <entry><link
          xl:href="http://slf4j.org/legacy.html#log4j-over-slf4j">log4j-over-slf4j.jar</link></entry>

          <entry>slf4j-log4j12.jar</entry>

          <entry>log4j.jar</entry>
        </row>

        <row>
          <entry>JDK 1.4 Logging</entry>

          <entry><link
          xl:href="http://slf4j.org/legacy.html#jul-to-slf4j">jul-to-slf4j.jar</link></entry>

          <entry>slf4j-jdk14.jar</entry>

          <entry>(Core Java Classlib)</entry>
        </row>

        <row>
          <entry>Commons Logging</entry>

          <entry><link
          xl:href="http://slf4j.org/legacy.html#jcl-over-slf4j">jcl-over-slf4j.jar</link></entry>

          <entry>slf4j-jcl.jar</entry>

          <entry>commons-logging.jar</entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <variablelist>
    <varlistentry>
      <term>Logging API</term>

      <listitem>
        <para>The Logging API that you are either capturing events from and/or
        using to write out those events (eg: to disk)</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Slf4j Binding Jar</term>

      <listitem>
        <para>These are special JARs, created and maintained by the Slf4j
        project that pretend to be the various Logging API implementation
        classes, but instead just route that Logging API's events to Slf4j to
        handle.</para>

        <para>There MAY be multiple Slf4j Binding Jars present on the
        Classpath at the same time.</para>

        <para>For a single Logging API, if you choose to use the Slf4j Binding
        Jar, then you MUST NOT include the SLf4j Adapter Jar or Underlying
        Logging Framework in the Classpath as well.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Slf4j Adapter Jar</term>

      <listitem>
        <para>These JARs are created and maintained by the Slf4j project and
        route Slf4j logging events to a specific Underlying Logging
        Framework.</para>

        <para>There MUST NOT be multiple Slf4j Adapter Jars present on the
        Classpath at the same time.</para>

        <para>Logging events that these Adapter Jars capture can come from
        direct use of the Slf4j API or via one of the Slf4j Binding Jar
        implementations.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Underlying Logging Framework</term>

      <listitem>
        <para>This is the last leg of your configuration, the implementation
        that processes, filters, and outputs the Logging events to the
        Console, logging directory on disk, or whatever else that the
        Underlying Logging Framework supports (like Socket, SMTP, Database, or
        even Syslog in the case of Logback)</para>

        <para>There MUST NOT be multiple Underlying Logger Frameworks on the
        Classpath.</para>

        <para><note>
            <para>Some 3rd party libraries often provide their own
            implementations of common Logging APIs, be sure that you don't
            accidentally include a Underlying Logging Framework by
            accident.</para>

            <para>An example would be if you are using SpringSource you will
            likely have a
            <filename>com.springsource.org.apache.log4j.jar</filename> along
            with a <filename>log4j.jar</filename>, which have the same classes
            in them. In this specific example, use the
            <filename>com.springsource.org.apache.log4j.jar</filename> version
            and exclude the <filename>log4j.jar</filename>, as the
            SpringSource version includes extra metadata suitable for
            SpringSource use.</para>
          </note></para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>For purposes of this document, we'll choose Logback as our Underlying
  Logging Framework.</para>

  <para>This means that we have to now use logback-classic.jar and
  logback-core.jar, and ensure that we exclude any other Slf4j Adapter Jar or
  Underlying Logging Framework, as this will cause problems.</para>

  <para>We also now need to include the other Slf4j Binding Jars in our
  Classpath, along with some special initialization for
  java.util.logging.</para>

  <para>Lets get started.</para>

  <simplesect>
    <title>The Required JARs</title>

    <para>There will be 3 JARs you will need to download</para>

    <para><variablelist>
        <varlistentry>
          <term><filename><link
          xl:href="http://repo1.maven.org/maven2/ch/qos/logback/logback-classic/1.0.7/logback-classic-1.0.7.jar">logback-classic-1.0.7.jar</link></filename></term>

          <listitem>
            <para>This is the underlying logging framework and adaption layer
            for Slf4j</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename><link
          xl:href="http://repo1.maven.org/maven2/ch/qos/logback/logback-core/1.0.7/logback-core-1.0.7.jar">logback-core-1.0.7.jar</link></filename></term>

          <listitem>
            <para>The common implementation classes for the Logback
            project.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><link
          xl:href="http://repo1.maven.org/maven2/org/slf4j/log4j-over-slf4j/1.6.6/log4j-over-slf4j-1.6.6.jar"><filename>log4j-over-slf4j-1.6.6.jar</filename></link></term>

          <listitem>
            <para>The Slf4j Binding JAR for Log4j</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><link
          xl:href="http://repo1.maven.org/maven2/org/slf4j/jul-to-slf4j/1.6.6/jul-to-slf4j-1.6.6.jar"><filename>jul-to-slf4j-1.6.6.jar</filename></link></term>

          <listitem>
            <para>The Slf4j Binding JAR for java.util.logging</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><link
          xl:href="http://repo1.maven.org/maven2/org/slf4j/jcl-over-slf4j/1.6.6/jcl-over-slf4j-1.6.6.jar"><filename>jcl-over-slf4j-1.6.6.jar</filename></link></term>

          <listitem>
            <para>The Slf4j Binding JAR for Commons Logging</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename><link
          xl:href="http://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.6.6/slf4j-api-1.6.6.jar">slf4j-api-1.6.6.jar</link></filename></term>

          <listitem>
            <para>This is the basic Slf4j API that Jetty's Slf4jLog
            implementation uses.</para>
          </listitem>
        </varlistentry>
      </variablelist>This will allow to capture Logging events generated by
    any of the following APIs.</para>

    <itemizedlist>
      <listitem>
        <para><link
        xl:href="http://slf4j.org/apidocs/org/apache/log4j/Logger.html">org.slf4j.Logger</link>
        - Slf4j API</para>
      </listitem>

      <listitem>
        <para><link
        xl:href="http://logback.qos.ch/apidocs/ch/qos/logback/classic/Logger.html">ch.qos.logback.classic.Logger</link>
        - Logback API</para>
      </listitem>

      <listitem>
        <para><link
        xl:href="http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/Logger.html">org.apache.log4j.Logger</link>
        - Apache Log4j API</para>
      </listitem>

      <listitem>
        <para><link
        xl:href="http://docs.oracle.com/javase/7/docs/api/java/util/logging/Logger.html">java.util.logging.Logger</link>
        - Core java.util.logging API</para>
      </listitem>

      <listitem>
        <para><link
        xl:href="http://commons.apache.org/proper/commons-logging//commons-logging-1.1/apidocs/org/apache/commons/logging/Log.html">org.apache.commons.logging.Log</link>
        - Apache Commons Logging API</para>
      </listitem>
    </itemizedlist>

    <para>Any logging event from those APIs will now route down into Logback
    Classic to work with.</para>
  </simplesect>

  <simplesect>
    <title>Configuring Server Classpath</title>

    <para>In order for the Server to use these new JARs you will need to put
    them into place and tell Jetty to load them on each startup.</para>

    <para>Create a ${jetty.home}/lib/logging/ directory and place the 6 files
    you downloaded there.</para>

    <screen language="bash"><![CDATA[[jetty-distribution-9.0.0.v20130308]$ ls -l ]]><emphasis
        role="bold">lib/logging/</emphasis><![CDATA[
total 632
-rw-rw-r-- 1 jetty jetty  17289 Mar 12 16:21 ]]><emphasis role="bold">jcl-over-slf4j-1.6.6.jar</emphasis><![CDATA[
-rw-rw-r-- 1 jetty jetty   4955 Mar 12 16:21 ]]><emphasis role="bold">jul-to-slf4j-1.6.6.jar</emphasis><![CDATA[
-rw-rw-r-- 1 jetty jetty  20647 Mar 12 16:21 ]]><emphasis role="bold">log4j-over-slf4j-1.6.6.jar</emphasis><![CDATA[
-rw-rw-r-- 1 jetty jetty 251679 Mar 12 16:21 ]]><emphasis role="bold">logback-classic-1.0.7.jar</emphasis><![CDATA[
-rw-rw-r-- 1 jetty jetty 364399 Mar 12 16:21 ]]><emphasis role="bold">logback-core-1.0.7.jar</emphasis><![CDATA[
-rw-rw-r-- 1 jetty jetty  26176 Mar 12 16:21 ]]><emphasis role="bold">slf4j-api-1.6.6.jar</emphasis><![CDATA[
]]></screen>

    <para>Next, we need to edit the
    <filename>${jetty.home}/start.ini</filename> to get jetty to load these
    logging files into the Server classpath.</para>

    <para>Edit the <filename>start.ini</filename> and check for the following
    entries. (Add them to the end if missing)</para>

    <programlisting language="properties"><![CDATA[# Enable jul-to-slf4j layer
etc/jetty-jul-to-slf4j.xml
# Adding lib/logging to server classpath
OPTIONS=logging
]]></programlisting>

    <para>Now verify that the 6 jars will be loaded by server classpath</para>

    <screen><![CDATA[[jetty-distribution-9.0.0.v20130308]$ ]]><emphasis
        role="bold">java -jar start.jar --version</emphasis><![CDATA[ | grep logging
Active Options: [Server, client, ext, jmx, jsp, ]]><emphasis role="bold">logging</emphasis><![CDATA[, resources, websocket]
18:                1.6.6 | ${jetty.home}/lib/logging/]]><emphasis role="bold">jcl-over-slf4j-1.6.6.jar</emphasis><![CDATA[
19:                1.6.6 | ${jetty.home}/lib/logging/]]><emphasis role="bold">jul-to-slf4j-1.6.6.jar</emphasis><![CDATA[
20:                1.6.6 | ${jetty.home}/lib/logging/]]><emphasis role="bold">log4j-over-slf4j-1.6.6.jar</emphasis><![CDATA[
21:                1.0.7 | ${jetty.home}/lib/logging/]]><emphasis role="bold">logback-classic-1.0.7.jar</emphasis><![CDATA[
22:                1.0.7 | ${jetty.home}/lib/logging/]]><emphasis role="bold">logback-core-1.0.7.jar</emphasis><![CDATA[
23:                1.6.6 | ${jetty.home}/lib/logging/]]><emphasis role="bold">slf4j-api-1.6.6.jar</emphasis><![CDATA[
]]></screen>
  </simplesect>

  <simplesect>
    <title>Configuring Server Logging</title>

    <para>If you have a
    <filename>${jetty.home}/resources/jetty-logging.properties</filename>,
    make sure it contains just the following</para>

    <para><programlisting language="properties"><![CDATA[# Configure Jetty for SLf4j Logging
org.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.Slf4jLog]]></programlisting></para>

    <para>This will tell Jetty to use the Slf4jLog implementation for its
    internal Logging.</para>
  </simplesect>

  <simplesect>
    <title>Initializing Jul-to-Slf4j Bridge</title>

    <para>There is an extra requirement when using the jul-to-slf4j.jar that
    requires us to inform java.util.logging of the existence of the <link
    xl:href="http://slf4j.org/api/org/slf4j/bridge/SLF4JBridgeHandler.html">SLF4JBridgeHandler</link>.</para>

    <para>We'll satisfy this requirement with a new
    <filename>etc/jetty-jul-to-slf4j.xml</filename> file, lovingly included in
    the <filename>start.ini</filename> above.</para>

    <programlisting language="xml"><![CDATA[<?xml version="1.0"?>
<!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure_9_0.dtd">

<Configure id="Server" class="org.eclipse.jetty.server.Server">
  <Call class="org.slf4j.bridge.SLF4JBridgeHandler" name="removeHandlersForRootLogger"/>
  <Call class="org.slf4j.bridge.SLF4JBridgeHandler" name="install"/>
</Configure>
]]></programlisting>
  </simplesect>

  <simplesect>
    <title>Configuring Logback</title>

    <para>You'll need a
    <filename>${jetty.home}/resources/logback.xml</filename> file to define
    what you want Logback to do. It will be automatically located and loaded
    on Logging startup.</para>

    <para>Example <filename>${jetty.home}/resources/logback.xml</filename>
    file</para>

    <para><programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  Example LOGBACK Configuration File
  http://logback.qos.ch/manual/configuration.html
  -->
<configuration>
  <!-- address performance concern with jul-to-slf4j -->
  <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
    <resetJUL>true</resetJUL>
  </contextListener>

  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
    </encoder>
  </appender>

  <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>\${jetty.home}/logs/jetty.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>jetty_%d{yyyy-MM-dd}.log</fileNamePattern>
      <maxHistory>30</maxHistory>
    </rollingPolicy>

    <encoder>
      <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
    </encoder>
  </appender>

  <root level="info">
    <appender-ref ref="STDOUT" />
    <appender-ref ref="FILE" />
  </root>
</configuration>
]]></programlisting></para>

    <para><note>
        <para>When using the jul-to-slf4j Binding JAR, be sure you also
        utilize the <link
        xl:href="http://logback.qos.ch/manual/configuration.html#LevelChangePropagator">LevelChangePropagator</link>
        (as referenced in the <link
        xl:href="http://slf4j.org/api/org/slf4j/bridge/SLF4JBridgeHandler.html">SLF4JBridgeHandler
        javadoc</link>.</para>
      </note></para>
  </simplesect>

  <simplesect>
    <title>Start Jetty</title>

    <para>You are now done configuring Jetty for all logging APIs. Just start
    Jetty to start utilizing it.</para>

    <para><screen><![CDATA[[jetty-distribution-9.0.0.v20130308]$ java -jar start.jar ]]></screen><note>
        <para>This configuration will capture all Server side logging events
        and route them to the console and logging file handled by Logback. If
        you also want to capture all of the Web Application logging events, be
        sure to read <xref linkend="example-logging-logback-centralized"/> for
        details.</para>
      </note></para>
  </simplesect>
</section>
