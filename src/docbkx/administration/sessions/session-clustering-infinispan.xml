<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="session-clustering-infinispan"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Session Clustering with Infinispan</title>

  <para>Jetty can support session clustering by persisting sessions to <link
  xl:href="http://www.infinispan.org">Infinispan</link>. Each Jetty instance
  locally caches sessions for which it has received requests, writing any
  changes to the session through to Infinispan as the request exits the
  server. Sessions must obey the Serialization contract, and servlets must
  call the Session.setAttribute() method to ensure that changes are
  persisted.</para>

  <para>The persistent session mechanism works in conjunction with a load
  balancer that supports stickiness. Stickiness can be based on various data
  items, such as source IP address or characteristics of the session ID or a
  load-balancer specific mechanism. For those load balancers that examine the
  session ID, the Jetty persistent session mechanism appends a node ID to the
  session ID, which can be used for routing.</para>

  <section>
    <title>Configuration</title>

    <para>There are two components to session management in Jetty: a session
    ID manager and a session manager.</para>

    <itemizedlist>
      <listitem>
        <para>The session ID manager ensures that session IDs are unique
        across all webapps hosted on a Jetty instance, and thus there can only
        be one session ID manager per Jetty instance.</para>
      </listitem>

      <listitem>
        <para>The session manager handles the session lifecycle
        (create/update/invalidate/expire) on behalf of a web application, so
        there is one session manager per web application instance.</para>
      </listitem>
    </itemizedlist>

    <para>These managers also cooperate and collaborate with the
    <code>org.eclipse.jetty.server.session.SessionHandler</code> to enable
    cross-context dispatch.</para>
  </section>

  <section>
    <title>The infinispan Module</title>

    <para>When using the jetty distribution, to enable Infinispan session
    persistence, you will first need to enable the <code>infinispan</code>
    <link linkend="startup-modules">module</link> for your <link
    linkend="creating-jetty-base">base</link> using the --add-to-start or
    --add-to-startd argument to the <link
    linkend="startup-overview">start.jar</link>.</para>

    <para>As part of the module installation, the necessary infinispan jars
    will be dynamically downloaded and installed to your
    <code>${jetty.base}/lib/infinispan</code> directory. If you need to up or
    downgrade the version of the infinispan jars, then you can delete the jars
    that were automatically installed and replace them. Once you've done that,
    you will need to prevent jetty's startup checks from detecting the missing
    jars. To do that, you can use
    <code>--skip-file-validation=infinispan</code> argument to start.jar on
    the command line, or place that line inside
    <code>${jetty.base}/start.ini</code> to ensure it is used for every
    start.</para>

    <para>You will also find the following properties, either in your base's
    <code>start.d/infinispan.ini</code> file or appended to your
    <code>start.ini</code>, depending on how you enabled the module:</para>

    <informalexample>
      <programlisting><![CDATA[## Unique identifier for this node in the cluster
jetty.infinispanSession.workerName=node1
]]></programlisting>
    </informalexample>

    <para><variablelist>
        <varlistentry>
          <term>jetty.infinispanSession.workerName</term>

          <listitem>
            <para>The name that uniquely identifies this node in the cluster.
            This value will also be used by the sticky load balancer to
            identify the node. Don't forget to change the value of this
            property on <emphasis role="bold">each</emphasis> node on which
            you enable infinispan session clustering.</para>
          </listitem>
        </varlistentry>
      </variablelist>These properties are applied to the
    InfinispanSessionIdManager described below.</para>

    <section>
      <title>Configuring the InfinispanSessionIdManager</title>

      <para
      xl:href="@JDURL@/org/eclipse/jetty/session/infinispan.InfinispanSessionIdManager.html">The
      infinispan module will have installed file called
      ${jetty.home}/etc/jetty-infinispan.xml. This file configures an instance
      of the InfinispanSessionIdManager that will be shared across all webapps
      deployed on that server. It looks like this:</para>

      <programlisting language="rxml"><filename>@GITURL@/jetty-infinispan/src/main/config/etc/jetty-infinispan.xml</filename></programlisting>

      <para>As you can see, you configure the Infinispan <link
      xl:href="http://infinispan.org/docs/7.1.x/user_guide/user_guide.html#_the_cache_apis">Cache</link>
      instance that the InfinispanSessionIdManager should use in this file. By
      default, the infinispan <link
      xl:href="http://infinispan.org/docs/7.1.x/getting_started/getting_started.html#_running_infinispan_on_a_single_node">Default
      cache</link> instance is used (ie on the local node). You can instead
      use a custom Cache setup - the jetty-infinispan.xml file shows you how
      to configure a remote Cache (using the <link
      xl:href="http://infinispan.org/docs/7.1.x/user_guide/user_guide.html#_using_hot_rod_server">hotrod
      java client</link>).</para>

      <para>The InfinispanSessionIdManager can be configured by calling
      setters:</para>

      <para/>

      <variablelist>
        <varlistentry>
          <term>idleExpiryMultiple</term>

          <listitem>
            <para>Sessions that are not immortal, ie they have an expiry time,
            have their ids stored into Infinispan with an <link
            xl:href="http://infinispan.org/docs/7.1.x/user_guide/user_guide.html#_expiration">idle
            expiry timeout</link> equivalent to double the session's timeout.
            This should be sufficient to ensure that a session id that is
            in-use by a session is never accidentally removed. However, should
            you wish to, you can configure this to any integral value to
            effectively increase the <link
            xl:href="http://infinispan.org/docs/7.1.x/user_guide/user_guide.html#_expiration">idle
            expiry</link> timeout.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title>Configuring the InfinispanSessionManager</title>

      <para>As mentioned elsewhere, there should be one
      InfinispanSessionManager per context (ie webapp). It will need to
      reference the single InfinispanSessionIdManager configured previously
      for the Server.</para>

      <para>The way you configure a InfinispanSessionManager depends on
      whether you're configuring from a context xml file or a
      <filename>jetty-web.xml</filename> file or code. The basic difference is
      how you get a reference to the Jetty
      <code>org.eclipse.jetty.server.Server</code> instance.</para>

      <para>From a context xml file, you reference the Server instance as a
      Ref:</para>

      <informalexample>
        <programlisting language="xml"><![CDATA[  <!-- Expose the jetty infinispan classes for session serialization -->
  <Call name="prependServerClass">
    <Arg>-org.eclipse.jetty.session.infinispan.</Arg>
  </Call>

  
  <!-- Get a reference to the InfinispanSessionIdManager -->
  <Ref id="Server">
    <Call id="idMgr" name="getSessionIdManager"/>
  </Ref>

  <!-- Get a referencee to the Cache from the InfinispanSessionIdManager -->
  <Ref id="idMgr">
    <Get id="cache" name="cache"/>
  </Ref>

  <!-- Use the InfinispanSessionIdManager and Cache to setup up the InfinispanSessionManager -->
  <Set name="sessionHandler">
    <New class="org.eclipse.jetty.server.session.SessionHandler">
      <Arg>
        <New id="mgr" class="org.eclipse.jetty.session.infinispan.InfinispanSessionManager">
          <Set name="sessionIdManager">
            <Ref id="idMgr"/>
          </Set>
          <Set name="cache">
            <Ref id="cache">
            </Ref>
          </Set>
          <Set name="scavengeInterval">60</Set>
        </New>
      </Arg>
    </New>
  </Set>

]]></programlisting>
      </informalexample>

      <para>From a <filename>WEB-INF/jetty-web.xml</filename> file, you can
      reference the Server instance directly:</para>

      <informalexample>
        <programlisting language="xml"><![CDATA[  <!-- Expose the jetty infinispan classes for session serialization -->
  <Call name="prependServerClass">
    <Arg>-org.eclipse.jetty.session.infinispan.</Arg>
  </Call>

<!-- Reference the server directly -->
<Get name="server">
  <Get id="idMgr" name="sessionIdManager"/>
</Get>

<!-- Get a reference to the Cache via the InfinispanSessionIdManager -->
 <Ref id="idMgr">
    <Get id="cache" name="cache"/>
  </Ref>

<!-- Apply the SessionIdManager and Cache to the InfinispanSessionManager -->
<Set name="sessionHandler">
  <New class="org.eclipse.jetty.server.session.SessionHandler">
     <Arg>
        <New id="mgr" class="org.eclipse.jetty.session.infinispan.InfinispanSessionManager">
          <Set name="sessionIdManager">
            <Ref id="idMgr"/>
          </Set>
          <Set name="cache">
            <Ref id="cache">
            </Ref>
          </Set>
          <Set name="scavengeInterval">600</Set>
        </New>
      </Arg>
  </New>
</Set>

]]></programlisting>
      </informalexample>

      <para>The InfinispanSessionManager can be provided by calling
      setters:</para>

      <variablelist>
        <varlistentry>
          <term>scavengeInterval</term>

          <listitem>
            <para>Time in seconds between runs of a scavenger task that looks
            for expired old sessions to delete. The default is 10
            minutes.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>staleIntervalSec</term>

          <listitem>
            <para>The length of time a session can be in memory without being
            checked against the cluster. A value of 0 indicates that the
            session is never checked against the cluster - the current node is
            considered to be the master for the session.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title>Using HotRod</title>

      <para>If you're using the hotrod client - where serialization will be
      required - you will need to ensure that the hotrod marshalling software
      works with jetty classloading. To do this, firstly ensure that you have
      included the lines containing the <code>prependServerClass</code> to
      your context xml file as shown above.</para>

      <para>Then, create the file
      <filename>${jetty.base}/resources/hotrod-client.properties</filename>.
      Add the following line to this file:</para>

      <informalexample>
        <programlisting><![CDATA[infinispan.client.hotrod.marshaller=org.eclipse.jetty.session.infinispan.WebAppMarshaller]]></programlisting>
      </informalexample>
    </section>
  </section>
</section>
