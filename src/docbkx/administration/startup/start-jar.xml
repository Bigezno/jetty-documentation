<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section status="draft" version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="start-jar" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Using start.jar</title>

  <para>The most basic way of starting the Jetty Standalone server is to
  execute the start.jar.</para>

  <screen><![CDATA[[jetty-distribution-${project.version}]$ java -jar start.jar
2013-09-23 11:27:06.654:INFO:oejs.Server:jetty-${project.version}
...]]></screen>

  <para>The start.jar is a bootstrap for starting up Jetty with the
  configuration that you desire.</para>

  <para>Jetty is a highly modularized web server container. Very little is
  mandatory and required, most components are optional and be enabled or
  disabled based on the needs of your environment.</para>

  <para>Ultimately, at its most basic, Jetty is configured from 2
  things:</para>

  <orderedlist>
    <listitem>
      <para>A set of Libraries and directories that make up the Server
      Classpath</para>
    </listitem>

    <listitem>
      <para>A set of Jetty XML configuration files (IoC style) that establish
      how to build up your Jetty server and its components</para>
    </listitem>
  </orderedlist>

  <para>However, unlike the past versions of Jetty, starting with Jetty 9.1
  you now have a few more options on how to configure jetty (these are merely
  syntactic sugar that eventually resolve into the 2 basic configuration
  components mentioned above).</para>

  <para>Startup Features:</para>

  <itemizedlist>
    <listitem>
      <para>A separation of the Jetty distribution binaries in <filename
      linkend="startup-base-and-home">${jetty.home}</filename> and the
      environment specific configurations (and binaries) found in <filename
      linkend="startup-base-and-home">${jetty.base}</filename> (detailed in
      <link linkend="startup-jetty-base-and-jetty-home">Managing Jetty Base
      and Jetty Home</link>)</para>
    </listitem>

    <listitem>
      <para>You can enable a set of Libraries and XML configuration files via
      the newly introduced <link linkend="startup-modules">module
      system</link></para>
    </listitem>

    <listitem>
      <para>All of the pre-built XML configuration files shipped by Jetty, are
      now parameterized with properties that can be specified in your
      <filename>${jetty.base}/start.ini</filename> (demonstrated in <link
      linkend="quick-start-configure">Quick Start
      Configuration</link>).</para>

      <para>There is no longer a</para>
    </listitem>
  </itemizedlist>

  <para>These are powerful new features, made to support a variety of styles
  of configuring Jetty. From a simple property based configuration, to
  handling multiple installations on a server, to customized stacks of
  technology on top of Jetty, and even the classic custom xml configurations
  of old.</para>

  <para>For example, if you use the ${jetty.base} concepts properly, you can
  upgrade the jetty distribution without having to remake your entire tree of
  modifications to jetty. Simply separate out your specific modifications to
  the ${jetty.base} and in the future, just upgrade your ${jetty.home}
  directory with a new Jetty distribution.</para>

  <itemizedlist>
    <title>What happens when you execute start.jar:</title>

    <listitem>
      <para>load and parse all INIs found in
      <filename>${jetty.base}/start.d/*.ini</filename> as command line
      arguments</para>
    </listitem>

    <listitem>
      <para>load and parse <filename>${jetty.base}/start.ini</filename> as
      command line arguments</para>
    </listitem>

    <listitem>
      <para>parse actual command line arguments used to execute
      <filename>start.jar itself</filename></para>
    </listitem>

    <listitem>
      <para>resolve any xml configuration files, modules, and libraries using
      base vs home resolution steps</para>

      <orderedlist>
        <listitem>
          <para>check if file exists as relative reference to
          <filename>${jetty.base}</filename></para>
        </listitem>

        <listitem>
          <para>check if file exists as relative reference to
          <filename>${jetty.home}</filename></para>
        </listitem>

        <listitem>
          <para>use default behavior of <code>java.io.File</code></para>

          <para>(Relative to <code>System.getProperty("user.dir")</code> and
          then as absolute file system path)</para>
        </listitem>
      </orderedlist>
    </listitem>

    <listitem>
      <para>load any dependant modules. (merge xml, library, and properties
      results with active command line)</para>
    </listitem>

    <listitem>
      <para>build out server classpath</para>
    </listitem>

    <listitem>
      <para>determine run mode:</para>

      <itemizedlist>
        <listitem>
          <para>show informational command line options, and exit</para>
        </listitem>

        <listitem>
          <para>execute jetty normally, wait for jetty to stop</para>
        </listitem>

        <listitem>
          <para>execute a forked jvm to run jetty in, wait for forked jvm to
          exit</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>If jetty is to be started:</para>

      <itemizedlist>
        <listitem>
          <para>load each xml configuration (in the order determined by the
          inis and module system)</para>
        </listitem>

        <listitem>
          <para>let xml configuration start jetty</para>
        </listitem>
      </itemizedlist>
    </listitem>
  </itemizedlist>

  <para/>

  <section>
    <title>start.jar command line options</title>

    <variablelist>
      <title>Basic Command Line Options:</title>

      <varlistentry>
        <term>--help</term>

        <listitem>
          <para>Obtain the current list of command line options and some basic
          usage help</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>--version</term>

        <listitem>
          <para>Show the list of server classpath entries, and print version
          information found for each entry.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>--list-classpath</term>

        <listitem>
          <para>Similar to --version, show the server classpath</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>--list-config</term>

        <listitem>
          <para>List the resolved configuration that will be used to start
          jetty.</para>

          <itemizedlist>
            <title>Output includes:</title>

            <listitem>
              <para>Java Environment</para>
            </listitem>

            <listitem>
              <para>Jetty Environment</para>
            </listitem>

            <listitem>
              <para>JVM Arguments</para>
            </listitem>

            <listitem>
              <para>Properties</para>
            </listitem>

            <listitem>
              <para>Server Classpath</para>
            </listitem>

            <listitem>
              <para>Server XML Configuration Files</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>--dry-run</term>

        <listitem>
          <para>Print the resolved command line that start.jar would use to
          start a forked instance of Jetty.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>--exec</term>

        <listitem>
          <para>Start a forked instance of Jetty.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <title>Debug and Start Logging Options:</title>

      <varlistentry>
        <term>--debug</term>

        <listitem>
          <para>Enable debugging output of the startup procedure.</para>

          <para>Note: this does not setup debug logging for jetty
          itself.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>--start-log-file=&lt;filename&gt;</term>

        <listitem>
          <para>Send all startup output to the filename specified.</para>

          <para>Filename is relative to ${jetty.base}.</para>

          <para>This is useful for capturing startup issues where the jetty
          specific logger has not yet kicked in due to a possible startup
          configuration error.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <title>Module Management:</title>

      <varlistentry>
        <term>--list-modules</term>

        <listitem>
          <para>List all the modules defined by the system.</para>

          <para>Looking for module files using the <link
          linkend="startup-base-and-home">normal
          <filename>${jetty.base}</filename> and
          <filename>${jetty.home}</filename> resolution logic</link>.</para>

          <para>Will also list enabled state based on information present on
          the command line, and all active startup ini files.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>--module=&lt;name&gt;(,&lt;name&gt;)*</term>

        <listitem>
          <para>Enable 1 or more modules by name. (use --list-modules to see
          the list of available modules)</para>

          <para>This will enable all transitive (dependant) modules from the
          module system as well.</para>

          <para>If this is used from the shell command line, this is
          considered a temporary effect, useful for testing out a scenario. If
          you want this module to always be enabled, add this command to your
          <filename>${jetty.base}/start.ini</filename></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>--add-to-start=&lt;name&gt;(,&lt;name&gt;)*</term>

        <listitem>
          <para>Enable a module by appending lines to the
          <filename>${jetty.base}/start.ini</filename> file.</para>

          <para>The lines that are added are provided by the module defined
          ini templates.</para>

          <para>Note: Transitive modules are also appended.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>--add-to-startd=&lt;name&gt;,(&lt;name&gt;)*</term>

        <listitem>
          <para>Enable a module via creation of a module specific ini file in
          the <filename>${jetty.base}/start.d/</filename> directory.</para>

          <para>The content of the new ini is provided by the module defined
          ini templates.</para>

          <para>Note: Transitive modules are also created in the same
          directory as their own ini files.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>--write-module-graph=&lt;filename&gt;</term>

        <listitem>
          <para>Advanced feature: Create a graphviz <link
          xl:href="http://graphviz.org/content/dot-language">dot file</link>
          of the module graph as it exists for the active
          <filename>${jetty.base}</filename>.</para>

          <screen><![CDATA[# generate module.dot
$ java -jar start.jar --module=websocket --write-module-graph=modules.dot

# post process to a PNG file
$ dot -Tpng -o modules.png modules.dot]]></screen>

          <para>See <link xl:href="http://graphviz.org/">graphviz.org</link>
          for details on <link
          xl:href="http://graphviz.org/content/command-line-invocation">how to
          post-process this dotty file</link> into the output best suited for
          your needs.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist xml:id="command-line-stop">
      <title>Command Line Stop Option:</title>

      <varlistentry>
        <term>--stop</term>

        <listitem>
          <para>Send a stop signal to the running Jetty instance.</para>

          <para>Note: The server must have been started with various stop
          properties for this to work.</para>

          <variablelist>
            <title>Properties:</title>

            <varlistentry>
              <term>STOP.PORT=&lt;number&gt;</term>

              <listitem>
                <para>The port to use to stop the running Jetty server. This
                is an internal port, opened on localhost, used solely for
                stopping the running Jetty server. Choose a port that you will
                not serve web traffic over.</para>

                <para>Required for --stop to function.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>STOP.KEY=&lt;alphanumeric&gt;</term>

              <listitem>
                <para>The passphrase defined to stop the server.</para>

                <para>Required for --stop to function.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>STOP.WAIT=&lt;number&gt;</term>

              <listitem>
                <para>The time (in seconds) to wait for confirmation that the
                running Jetty server has stopped. If not specified, the
                stopper will wait indefinitely for the server to stop.</para>

                <para>If the time specified elapses, without a confirmation of
                server stop, then the --stop command exits with a non-zero
                return code.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>

    <para/>
  </section>
</section>
