<?xml version="1.0" encoding="utf-8"?>
<section xml:id="using-jmx" version="5.0" xmlns="http://docbook.org/ns/docbook"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xl="http://www.w3.org/1999/xlink"
xmlns:xi="http://www.w3.org/2001/XInclude"
xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">
  <title>Using Java Management Extensions (JMX)</title>
<para>The <link xl:href="[http://java.sun.com/products/JavaManagement/"> Java Management Extensions (JMX) API</link> is a standard API for managing and monitoring resources such as applications, devices, services, and the Java virtual machine.</para> 
<para>
Typical uses of the JMX technology include:</para> 
<itemizedlist>
<listitem><para>Consulting and changing application configuration.</para></listitem>
<listitem><para>Accumulating and making available statistics about application behavior.</para></listitem>
<listitem><para>Notifying of state changes and erroneous conditions.</para></listitem>
</itemizedlist>
<para>
The JMX API includes remote access, so a remote management program can interact with a running application for these purposes.</para> 
<para>
Jetty JMX integration uses the platform MBean server implementation that Java VM provides. The integration is based on the ObjectMBean implementation of DynamicMBean. This implementation allows you to wrap an arbitrary POJO in an MBean and for [http://dev.eclipse.org/viewcvs/index.cgi/jetty/trunk/jetty-jmx/src/main/resources/org/eclipse/jetty/?root=RT_Jetty properties files]. to provide metadata.</para>
<para>
TheMBeanContainer immplementation of the Container.Listener inteface coordinates creation of MBeans. The Jetty Server and it's components use a [http://download.eclipse.org/jetty/stable-7/apidocs/org/eclipse/jetty/util/component/Container.html Container] to maintain a containment tree of components and to support notification of changes to that tree. The MBeanContainer class listens for Container events and creates and destroys MBeans as required to wrap all Jetty components.</para>
<para>
You can access the MBeans that Jetty publishes both through built-in Java VM connector via JConsole, or by registering a remote JMX connector and using a remote JMX agent to monitor Jetty.</para>
 <section xml:id="configuring-jmx">
 <title>Configuring JMX</title>
<para>This guide describes how to initialize and configure the Jetty JMX integration.</para> 
<para>
To monitor an application using JMX, perform the following steps:</para>
<itemizedlist>
<listitem><para>Configure the application to instantiate an MBean container.</para></listitem>
<listitem><para>Instrument objects to be MBeans.</para></listitem>
<listitem><para>Provide access for JMX agents to MBeans.</para></listitem>
</itemizedlist>
<section xml:id="accessing-jetty-mbeans">
<title>Using JConsole to Access Jetty MBeans</title>
<para>
The simplest way to access the MBeans that Jetty publishes is to use the <link xl:href="http://java.sun.com/developer/technicalArticles/J2SE/jconsole.html"> JConsole utility</link> the Java Virtual Machine supplies. See [[Jetty/Howto/Run Jetty_with_JConsole|Run Jetty with JConsole]] for instructions on how to configure JVM for use with JConsole.</para>
<para>To access Jetty MBeans via JConsole, you must:</para>
<itemizedlist>
<listitem><para>Enable the registration of Jetty MBeans into the platform MBeanServer.</para></listitem>
<listitem><para>Enable a JMXConnectorServer so that JConsole can connect and visualize the MBeans.</para></listitem>
</itemizedlist>
</section>
<section xml:id="registering-jetty-mbeans">
<title>Registering Jetty MBeans</title>
<para>Configuring Jetty JMX integration differs for standalone and embedded Jetty.</para>
<section xml:id="jmx-standalone-jetty">
<title>Standalone Jetty</title>
<para>When running in standalone mode, you can use the <filename>jetty-jmx.xml</filename> configuration file to configure the MBeanContainer instance for a Jetty server. You can run this with the standard configuration file as follows:</para>
<informalexample>
      <programlisting language="java">
<![CDATA[
 java -jar start.jar OPTIONS=Server,jmx etc/jetty-jmx.xml etc/jetty.xml
 ]]>
      </programlisting>
    </informalexample>
<para>Make sure that the <filename>jetty-jmx.xml</filename> is the <emphasis>first</emphasis> XML file listed in the command line to ensure that Jetty properly detects all instances of objects that should be registered as MBeans.</para>
</section>
<section xml:id="jmx-embedded-jetty">
<title>Embedded Jetty</title>
<para>When running Jetty embedded into an application, create and configure an MBeanContainer instance as follows:</para>
<informalexample>
      <programlisting language="java">
<![CDATA[
Server _server = new Server();

// Setup JMX
MBeanContainer mbContainer=new MBeanContainer(ManagementFactory.getPlatformMBeanServer());
_server.getContainer().addEventListener(mbContainer);
_server.addBean(mbContainer);

// Register loggers as MBeans
mbContainer.addBean(Log.getLog());
]]>
      </programlisting>
    </informalexample>
<para>
Notice that Jetty creates the MBeanContainer immediately after creating the Server, and immediately after registering it as an EventListener of the Server's Container object.</para>
<para> 
Because logging is initialized prior to the MBeanContainer, it is necessary to register the logger manually via <code>MBeanContainer.addBean().</code></para>
</section>
</section>
<section xml:id="using-jetty-maven-plugin">
<title>Using the Jetty Maven Plugin</title>
<para>
If you are using the <xref linkedn="jetty-maven-plugin" /> you should copy the <filename>etc/jetty-jmx.xml</filename> file into your webapp project somewhere, such as <filename>src/etc,</filename> then add a &lt;jettyconfig&gt; element to the plugin &lt;configuration&gt;:</para>

<informalexample>
      <programlisting language="xml">
<![CDATA[
<plugin>
  <groupid>org.mortbay.jetty</groupid>
  <artifactid>maven-jetty-plugin</artifactid>
  <version>${project.version}</version>
  <configuration>
    <scanintervalseconds>10</scanintervalseconds>
    <jettyXml>src/etc/jetty-jmx.xml</jettyXml>
  </configuration>
</plugin>
]]>
      </programlisting>
    </informalexample>
    </section>
    <section xml:id="enabling-jmxconnectorserver-for-remote-access">
    <title>Enabling JMXConnectorServer for Remote Access</title>
    <para>
There are two ways of enabling remote connectivity so that JConsole can connect to visualize MBeans.</para>
<itemizedlist>
<listitem><para>Use the <code>com.sun.management.jmxremote</code>system property on the command line. Unfortunately, this solution does not play well with firewalls and it is not flexible.</para></listitem>
<listitem><para>Use Jetty's <code>ConnectorServer</code> class. To enable use of this class, uncomment the correspondent portion in <filename>etc/jetty-jmx.xml,</filename> like this:</para></listitem>
</itemizedlist>
<informalexample>
      <programlisting language="xml">
<![CDATA[
<New id="ConnectorServer" class="org.eclipse.jetty.jmx.ConnectorServer">
  <Arg>
    <New class="javax.management.remote.JMXServiceURL">
      <Arg type="java.lang.String">rmi</Arg>
      <Arg type="java.lang.String" />
      <Arg type="java.lang.Integer"><SystemProperty name="jetty.jmxrmiport" default="1099"/></Arg>
      <Arg type="java.lang.String">/jndi/rmi://<SystemProperty name="jetty.jmxrmihost" default="localhost"/>:<SystemProperty name="jetty.jmxrmiport" default="1099"/>/jmxrmi</Arg>
    </New>
  </Arg>
  <Arg>org.eclipse.jetty.jmx:name=rmiconnectorserver</Arg>
  <Call name="start" />
</New>
]]>
      </programlisting>
    </informalexample>
<para>
This configuration snippet starts an RMIRegistry and a JMXConnectorServer both on port 1099 (by default), so that firewalls should open just that one port to allow connections from JConsole.</para>
<section xml:id="securing-remote-access">
<title>Securing Remote Access</title>
<para>JMXConnectorServer several options to restrict access. For a complete guide to controlling authentication and authorization in JMX, see <link xl:href="https://blogs.oracle.com/lmalventosa/entry/jmx_authentication_authorization"> Authentication and Authorization in JMX RMI connectors</link> in Luis-Miguel Alventosa's blog.</para>
<para>
To restrict access to the JMXConnectorServer, you can use this configuration, where the <filename>jmx.password</filename> and <filename>jmx.access</filename> files have the format specified in the blog entry above:</para>

<informalexample>
      <programlisting language="xml">
<![CDATA[
<New id="ConnectorServer" class="org.eclipse.jetty.jmx.ConnectorServer">
  <Arg>
    <New class="javax.management.remote.JMXServiceURL">
      <Arg type="java.lang.String">rmi</Arg>
      <Arg type="java.lang.String" />
      <Arg type="java.lang.Integer"><SystemProperty name="jetty.jmxrmiport" default="1099"/></Arg>
      <Arg type="java.lang.String">/jndi/rmi://<SystemProperty name="jetty.jmxrmihost" default="localhost"/>:<SystemProperty name="jetty.jmxrmiport" default="1099"/>/jmxrmi</Arg>
    </New>
  </Arg>
  <Arg>
    <Map>
      <Entry>
        <Item>jmx.remote.x.password.file</Item>
        <Item>
          <New class="java.lang.String"><Arg><Property name="jetty.home" default="." />/resources/jmx.password</Arg></New>
        </Item>
      </Entry>
      <Entry>
        <Item>jmx.remote.x.access.file</Item>
        <Item>
          <New class="java.lang.String"><Arg><Property name="jetty.home" default="." />/resources/jmx.access</Arg></New>
        </Item>
      </Entry>
    </Map>
  </Arg>
  <Arg>org.eclipse.jetty.jmx:name=rmiconnectorserver</Arg>
  <Call name="start" />
</New>
]]>
      </programlisting>
    </informalexample>
</section>
</section>
<section xml:id="custom-monitor-applcation">
<title>Custom Monitor Application</title>
<para>
Using the JMX API, you can also write a custom application to monitor your Jetty server. To allow this application to connect to your Jetty server, you need to uncomment the last section of your <filename>etc/jetty-jmx.xml</filename> configuration file and optionally modify the endpoint name. Doing so creates a JMX HTTP connector and registers a JMX URL that outputs to the <code>Stderr</code> log.</para>
<para>
You should provide the URL that appears in the log to your monitor application in order to create an <code>MBeanServerConnection.</code> 
You can use the same URL to connect to your Jetty instance from a remote machine using JConsole. See the <link xl:href="http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/tree/jetty-jmx/src/main/config/etc/jetty-jmx.xml?h=jetty-9"> configuration file</link> for more details.</para>
</section>
</section>
</section>