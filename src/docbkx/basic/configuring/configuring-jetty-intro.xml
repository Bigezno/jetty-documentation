<?xml version="1.0" encoding="utf-8"?>
<section version="5.0"
xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
xml:id="configuring-jetty-intro" xmlns="http://docbook.org/ns/docbook"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
xmlns:xl="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg"
xmlns:ns2="http://www.w3.org/1998/Math/MathML" xmlns:ns="http://docbook.org/ns/docbook">
  <title xml:id="intro-jetty-configuration">Introduction to Jetty Configuration</title>
  <para>To understand Jetty Configuration, you need to understand the "How" - what configuration mechanisms exist; and
  "What" the actual objects and fields that can be configured with those mechanisms.</para>
  <section xml:id="how-to-configure-jetty-intro">
    <title xml:id="intro-jetty-configuration-how">How to Configure Jetty</title>
    <section>
      <title>Jetty POJO Configuration</title>
      <para>The main components of Jetty are simply Plain Old Java Objects ( <link
      xl:href="http://en.wikipedia.org/wiki/Plain_Old_Java_Object">POJOs</link>) and the process of configuring jetty
      can be considered mostly as the process of instantiating, assembling and setting fields on the Jetty POJOs. This
      can be achieved either by:</para>
      <itemizedlist>
        <listitem>
          <para>Writing java code to directly instantiate and assemble Jetty objects. This is referred to as <xref
          linkend="embedding" />Jetty.</para>
        </listitem>
        <listitem>
          <para>Using Jetty XML Configuration, which is a <link
          xl:href="http://en.wikipedia.org/wiki/Inversion_of_Control">Inversion of Control (IoC)</link> framework, to
          instantiate and assemble Jetty object as XML objects</para>
        </listitem>
        <listitem>
          <para>Using a third party <link xl:href="http://en.wikipedia.org/wiki/Inversion_of_Control">
          IoC</link> framework like <link xl:href="http://en.wikipedia.org/wiki/Spring_Framework">Spring</link>, to
          instantiate and assemble Jetty objects as spring beans.</para>
        </listitem>
      </itemizedlist>
      <para>Because the main Jetty configuration is done by IoC, it is the <link
      xl:href="http://download.eclipse.org/jetty/stable-9/apidocs/">Jetty API documentation</link> that is the ultimate
      configuration reference.</para>
    </section>
    <section>
      <title>Other Configuration Files</title>
      <para>Some Jetty Components do have configuration files that are not IoC</para>
      <variablelist>
        <varlistentry>
          <term>web.xml</term>
          <listitem>
            <para>The <link xl:href="???">Servlet</link> Specification defines the <link
            xl:href="http://en.wikipedia.org/wiki/Web.xml">web.xml</link> deployment descriptor that defines and
            configures the Filters, Servlets and resources used by a <link
            xl:href="http://en.wikipedia.org/wiki/Web_application">Web Application</link>. The Jetty WebAppContext
            component uses this XML format to:</para>
            <itemizedlist>
              <listitem>
                <para>set up the default configuration of a web application context</para>
              </listitem>
              <listitem>
                <para>interpret the application specific configuration supplied with a web application in the
                WEB-INF/web.xml file</para>
              </listitem>
              <listitem>
                <para>interpret descriptor fragments included in the META-INF directory of jar files within
                WEB-INF/lib</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Property Files</term>
          <listitem>
            <para>Standard <link xl:href="http://en.wikipedia.org/wiki/Java_properties">java property files</link> are
            also used for jetty configuration in several ways:</para>
            <itemizedlist>
              <listitem>
                <para>to parameterize Jetty IoC XML via the use of the Property element</para>
              </listitem>
              <listitem>
                <para>to configure the default logging mechanism (StdErrLog). Other logging frameworks may also be
                plugged into jetty and also use property files (eg log4j)</para>
              </listitem>
              <listitem>
                <para>as a simple database for login usernames and credentials</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Start.ini</term>
          <listitem>
            <para>The Jetty start mechanism uses a ini file to hold command line arguments that would otherwise have to
            be passed to the command to start Jetty.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section>
      <title>Example Jetty Configuration</title>
      <para>An example of a Jetty server assembled and configured in embedded style is:</para>
      <programlisting language="java">public class ExampleServer { public static void main(String[] args) throws
      Exception { Server server = new Server(); ServerConnector connector=new ServerConnector(server);
      connector.setPort(8080); server.setConnectors(new Connector[]{connector}); ServletContextHandler context = new
      ServletContextHandler(); context.setContextPath("/hello"); context.addServlet(HelloServlet.class,"/");
      HandlerCollection handlers = new HandlerCollection(); handlers.setHandlers(new Handler[]{context,new
      DefaultHandler()}); server.setHandler(handlers); server.start(); server.join(); } }</programlisting>
      <para>The exact same server configuration can be achieve with the Jetty XML file:</para>
      <programlisting language="xml">&lt;?xml version="1.0"?&gt; &lt;!DOCTYPE Configure PUBLIC
      "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure.dtd"&gt; &lt;Configure id="ExampleServer"
      class="org.eclipse.jetty.server.Server"&gt; &lt;Set name="connectors"&gt; &lt;Array
      type="org.eclipse.jetty.server.Connector"&gt; &lt;Item&gt; &lt;New
      class="org.eclipse.jetty.server.ServerConnector"&gt; &lt;Arg&gt;&lt;Ref id="ExampleServer"/&gt;&lt;/Arg&gt;
      &lt;Set name="port"&gt;8080&lt;/Set&gt; &lt;/New&gt; &lt;/Item&gt; &lt;/Array&gt; &lt;/Set&gt; &lt;New
      id="context" class="org.eclipse.jetty.servlet.ServletContextHandler"&gt; &lt;Set
      name="contextPath"&gt;/hello&lt;/Set&gt; &lt;Call name="addServlet"&gt;
      &lt;Arg&gt;org.eclipse.jetty.embedded.HelloServlet&lt;/Arg&gt; &lt;Arg&gt;/&lt;/Arg&gt; &lt;/Call&gt;
      &lt;/New&gt; &lt;Set name="handler"&gt; &lt;New class="org.eclipse.jetty.server.handler.HandlerCollection"&gt;
      &lt;Set name="handlers"&gt; &lt;Array type="org.eclipse.jetty.server.Handler"&gt; &lt;Item&gt; &lt;Ref
      id="context" /&gt; &lt;/Item&gt; &lt;Item&gt; &lt;New class="org.eclipse.jetty.server.handler.DefaultHandler"
      /&gt; &lt;/Item&gt; &lt;/Array&gt; &lt;/Set&gt; &lt;/New&gt; &lt;/Set&gt; &lt;/Configure&gt;</programlisting>
      <para>In practise, most commonly used Jetty features have had xml files created for them that are included in the
      standard distribution in the etc directory. Thus configuring Jetty is often a matter of just editing the existing
      XML files and altering the configuration values within them.</para>
    </section>
  </section>
  <section>
    <title xml:id="intro-jetty-configuration-what">What to Configure in Jetty</title>
    <para>This section gives an overview of the what components of Jetty typically configured using the mechanisms
    outline in the previous section. The structure of a Jetty server is described in <xref
    linkend="basic-architecture" />which is good background reading to understand configuration and is vital to if you
    wish to change the structure of the server as set up by the default configurations in the jetty distribution.
    However, for most purposes, configuration is a matter of identifying the correct configuration file and modifying
    existing configuration values.</para>
    <section>
      <title xml:id="intro-jetty-configuration-server">Configuring the Server</title>
      <para>The Server instance is the central coordination object of a Jetty server and it provides services and life
      cycle management for all other jetty server components. In the standard jetty distribution by the core server
      configuration is in etc/jetty.xml file, but other server configuration may be mixed in (see below). Server
      configuration can include:</para>
      <variablelist>
        <varlistentry>
          <term>ThreadPool</term>
          <listitem>
            <para>The Server instance provides a ThreadPool instance that is the default Executor service used by other
            Jetty server components. The prime configuration of the thread pool is the maximum and minimum size and is
            set in etc/jetty.xml</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Handlers</term>
          <listitem>
            <para>A Jetty Server can have only a single Handler instance to handle incoming HTTP requests. However a
            Handler may be a container or wrapper of other handlers forming a tree of handlers that typically handle a
            request request as a collaboration between the handlers from the a branch of the tree from root to leaf.
            The default handler tree set up in the etc/jetty.xml file is a Handler Collection containing a Context
            Handler Collection and the Default Handler. The Context Handler Collection selects the next handler by
            context path and is where deployed Context Handler and Web Application Contexts are added to the handler
            tree. The Default Handler handles any requests not already handled and generates the standard 404 page.
            Other configuration files may add handlers to this tree (eg jetty-rewrite.xml, jetty-requestlog.xml ) or
            configure components to hot deploy handlers (eg jetty-deploy.xml).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Server Attributes</term>
          <listitem>
            <para>The server holds a generic attribute map of Strings to Objects so that other jetty components may
            associated named objects with the server and if the value objects implement the LifeCycle interface then
            they are started and stopped with the server. Typically server attributes are used for holding server-wide
            default values.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Server fields</term>
          <listitem>
            <para>The server also has some specific configuration fields that are set in etc/jetty.xml for controlling
            among other things, the sending of Dates and Versions in HTTP responses.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section>
      <title xml:id="intro-jetty-configuration-connectors">Configuring Connectors</title>
      <para>A Jetty Server Connector is a network end point that accepts connections for one or more protocols that can
      produce request and/or messages for the jetty server. In the standard Jetty Server distribution, there are
      several configuration files provided that add connectors to the server for various protocols and combinations of
      protocols: jetty-http.xml, jetty-https.xml and jetty-spdy.xml. The configuration needed for connectors is
      typically:</para>
      <variablelist>
        <varlistentry>
          <term>port</term>
          <listitem>
            <para>The TCP/IP port on which the connector listens for connections is set using the the XML Property
            element which looks up the jetty.port (or jetty.tls.port) property and if not found defaults to 8080 (or
            8443 for TLS).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>host</term>
          <listitem>
            <para>A host may be configured either as a host name or IP address to identify a specific network interface
            on which to listen. If not set, or set to the value of 0.0.0.0, then all local interfaces are listened on.
            The XML Property element is used to look up the host value from the jetty.host property.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Idle Timeout</term>
          <listitem>
            <para>This is the time in milliseconds that a connection is allowed to be idle before the connector will
            take actions to close the connection.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>HTTP Configuration</term>
          <listitem>
            <para>Connector types that accept HTTP semantics (including HTTP, HTTPS and SPDY) are configured with a
            HttpConfiguration instance that contains common HTTP configuration that is independent of the specific wire
            protocol used. Because these values are often common to multiple connector types, the standard Jetty Server
            distribution creates a single HttpConfiguration in the jetty.xml file which is used via the XML Ref element
            in the specific connector files.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SSL Context Factory</term>
          <listitem>
            <para>The TLS connector types (HTTPS and SPDY) configure an SSL Context Factory with the location of the
            server keystore and truststore for obtaining server certificates.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <note>
        <para>Virtual Hosts are not configured on Connectors. Individual Contexts must be configured with the virtual
        hosts to which they respond.</para>
      </note>
      <note>
        <para>Prior to Jetty-9, the type of the connector was chosen to reflect both the protocol supported (e.g. HTTP,
        HTTPS, AJP, SPDY) and the nature of the implementation (e.g. NIO or BIO). From Jetty-9 onwards there is only
        one prime Connector type (ServerConnector), which is NIO based and uses Connection Factories to be able to
        handle one or more protocols.</para>
      </note>
    </section>
    <section>
      <title xml:id="intro-jetty-configuration-deployers">Configuring the Deployer</title>
      <para>The Jetty deployer is a service object that scans a directory for contexts and web applications to hot
      deploy (see <link linkend="quickstart-deploying-webapps">quickstart</link>). A context is an instance of
      ContextHandler that aggregates other handlers with common resources for handling HTTP requests (eg resource base,
      class loader, configuration attributes). A standard Web Application is a specialized instance of a Context that
      uses standard layouts and web.xml deployment descriptors to configure the context.</para>
      <para>In the standard Jetty distribution the deployer is configured by jetty-deploy.xml and scans the webapps
      directory.</para>
    </section>
    <section>
      <title xml:id="intro-jetty-configuration-contexts">Configuring Contexts</title>
      <para />
    </section>
    <section>
      <title xml:id="intro-jetty-configuration-webapps">Configuring Web Applications</title>
      <para />
    </section>
    <section>
      <title xml:id="intro-jetty-configuration-other">Configuring Other</title>
      <para />
    </section>
  </section>
</section>
