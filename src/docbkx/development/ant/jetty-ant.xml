<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0" xml:id="jetty-ant"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1999/xhtml"
         xmlns:ns3="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Using the Ant Jetty Plugin</title>

  <para>The Ant Jetty plugin is a part of Jetty 9 under the <code>jetty-ant</code> module.
  This plugin makes it possible to start a Jetty web server directly from the
  Ant build script, and to embed the Jetty web server inside your build
  process. Its purpose is to provide almost the same functionality as the
  Jetty plugin for Maven: dynamic application reloading, working directly on
  web application sources, and tightly integrating with the build
  system.</para>

  <informalexample>
    <programlisting language="xml"><![CDATA[
<dependency>
   <groupId>org.eclipse.jetty</groupId>
   <artifactId>jetty-ant</artifactId>
 </dependency>
    ]]></programlisting>
  </informalexample>

  <section xml:id="jetty-ant-preparation">
    <title>Preparing Your Project</title>

    <para>To set up your project for Ant to run Jetty, you need a Jetty distribution and the jetty-ant Jar:</para>

    <orderedlist>
      <listitem>
        <para><link
        xl:href="http://download.eclipse.org/jetty/">Download</link> a Jetty
        distribution and unpack it in the local filesystem.</para>
      </listitem>

      <listitem>
        <para><link
        xl:href="http://central.maven.org/maven2/org/eclipse/jetty/jetty-ant/">Get</link>
        the jetty-ant Jar.</para>
      </listitem>

      <listitem>
        <para>Make a directory in your project called
        <filename>jetty-lib/</filename>.</para>
      </listitem>

      <listitem>
        <para>Copy all of the Jars in your Jetty distribution's <filename>lib</filename> directory,
        and all its subdirectories, into your new <filename>jetty-lib</filename> dir.
        When copying the Jars, <emphasis>don't</emphasis> preserve the Jetty
        distribution's lib dir hierarchy &#8211; all the jars should be directly
        inside your <filename> jetty-lib</filename> dir.</para>
      </listitem>

      <listitem>
        <para>Also copy the jetty-ant Jar you downloaded earlier into the
        <filename>jetty-lib</filename> dir.</para>
      </listitem>

      <listitem>
        <para>Make a directory in your project called
        <filename>jetty-temp</filename>.</para>
      </listitem>
    </orderedlist>

    <para>Now you're ready to edit or create your Ant
    <filename>build.xml</filename> file.</para>
  </section>

  <section>
    <title>Preparing the <filename>build.xml</filename> file</title>

    <para>Begin with an empty <filename>build.xml</filename>:</para>

    <informalexample>
      <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">
</project>  
      ]]></programlisting>
    </informalexample>

    <para>Add a <code>&lt;taskdef&gt;</code> that imports
    all available Jetty tasks:</para>

    <informalexample>
      <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
     <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

  <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />

</project> 
      ]]></programlisting>
    </informalexample>

    <para>Now you are ready to add a new target for running Jetty:</para>

    <informalexample>
      <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
    <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

  <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />

  <target name="jetty.run">
    <jetty.run />
  </target>

</project>
      ]]></programlisting>
    </informalexample>

    <para>This is the minimal configuration you need. You can now start Jetty on
    the default port of 8080.</para>
  </section>

  <section>
    <title>Starting Jetty via Ant</title>

    <para>At the command line enter:</para>

    <screen><![CDATA[> ant jetty.run]]></screen>
  </section>

  <section>
    <title>Configuring the Jetty Container</title>

    <para>A number of configuration options can help you set
    up the Jetty environment so that your web application has all the
    resources it needs:</para>

    <variablelist>
      <varlistentry>
        <term>ports and connectors:</term>

        <listitem>
          <para>To configure the port that Jetty starts on you need to define a connector. First you need to configure a
          <code>&lt;typedef&gt;</code> for the Connector class and then define
          the connector in the Jetty tags: <informalexample>
              <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
    <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

  <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />

  <typedef name="connector" classname="org.eclipse.jetty.ant.types.Connector"
           classpathref="jetty.plugin.classpath" loaderref="jetty.loader" />

  <target name="jetty.run">
    <jetty.run>
      <connectors>
        <connector port="8090"/>
      </connectors>
    </jetty.run>
  </target>

</project>
            ]]></programlisting>
            </informalexample> <tip>
              <para>You can set the port to 0, which starts the Jetty
              server connector on an arbitrary available port. You can then
              access these values from system properties
              <code>jetty.ant.server.port</code> and
              <code>jetty.ant.server.host</code>.</para>
            </tip></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>login services:</term>

        <listitem>
          <para>If your web application requires authentication and
          authorization services, you can configure these on the Jetty
          container. Here's an example of how to set up an <link
          xl:href="@JDURL@/org/eclipse/jetty/security/HashLoginService.html">
          org.eclipse.jetty.security.HashLoginService</link>:</para>

          <informalexample>
            <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
    <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

 <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />

 <typedef name="hashLoginService" classname="org.eclipse.jetty.security.HashLoginService"
          classpathref="jetty.plugin.classpath" loaderref="jetty.loader" />

  <target name="jetty.run">
    <jetty.run>
      <loginServices>
        <hashLoginService name="Test Realm" config="${basedir}/realm.properties"/>
      </loginServices>
    </jetty.run>
  </target>

</project>
            ]]></programlisting>
          </informalexample>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>request log:</term>

        <listitem>
          <para>The <code>requestLog</code> option allows you to specify a
          request logger for the Jetty instance. You can either use the <link
          xl:href="@JDURL@/org/eclipse/jetty/server/NCSARequestLog.html">
          org.eclipse.jetty.server.NCSARequestLog</link> class, or supply the
          name of your custom class:</para>

          <informalexample>
            <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
    <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

 <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />

  <target name="jetty.run">
    <jetty.run requestLog="com.acme.MyFancyRequestLog">
    </jetty.run>
  </target>

</project>
            ]]></programlisting>
          </informalexample>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>temporary directory:</term>

        <listitem>
          <para>You can configure a directory as a temporary file
          store for uses such as expanding files and compiling JSPs by supplying the
          <code>tempDirectory</code> option:</para>

          <informalexample>
            <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
    <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

 <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />

  <target name="jetty.run">
    <jetty.run tempDirectory="${basedir}/jetty-temp">
    </jetty.run>
  </target>

</project>
            ]]></programlisting>
          </informalexample>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>other context handlers:</term>

        <listitem>
          <para>You may need to configure some other context
          handlers to run at the same time as your web application. You can specify these
          other context handlers using the <code>
          &lt;contextHandlers&gt;</code> element. You need to supply a
          <code>&lt;typedef&gt;</code> for it before you can use it:</para>

          <informalexample>
            <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
    <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

 <taskdef classpathref="jetty.plugin.classpath"
          resource="tasks.properties" loaderref="jetty.loader" />

 <typedef name="contextHandlers" classname="org.eclipse.jetty.ant.types.ContextHandlers"
          classpathref="jetty.plugin.classpath" loaderref="jetty.loader" />

  <target name="jetty.run">
    <jetty.run>
     <contextHandlers>
       <contextHandler resourceBase="${basedir}/stuff" contextPath="/stuff"/>
     </contextHandlers>
    </jetty.run>
  </target>

</project>
            ]]></programlisting>
          </informalexample>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>system properties:</term>

        <listitem>
          <para>As a convenience, you can configure system properties by using
          the <code> &lt;systemProperties&gt;</code> element. Be aware
          that, depending on the purpose of the system property, setting it
          from within the Ant execution may mean that it is evaluated too late,
          as the JVM evaluates some system properties on entry.</para>

          <informalexample>
            <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
    <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

 <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />

  <target name="jetty.run">
    <jetty.run>
      <systemProperties>
        <systemProperty name="foo" value="bar"/>
      </systemProperties>
    </jetty.run>
  </target>

</project>
            ]]></programlisting>
          </informalexample>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>jetty XML file:</term>

        <listitem>
          <para>If you have a lot of configuration to apply to the Jetty
          container, it can be more convenient to put it into a standard Jetty
          XML configuration file and have the Ant plugin apply it before
          starting Jetty:</para>

          <informalexample>
            <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
    <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

 <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />

  <target name="jetty.run">
    <jetty.run jettyXml="${basedir}/jetty.xml">
    </jetty.run>
  </target>

</project>
            ]]></programlisting>
          </informalexample>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>scanning for changes:</term>

        <listitem>
          <para>The most useful mode in which to run the Ant plugin is for it
          to continue to execute Jetty and automatically restart your web
          application if any part of it changes (for example, your IDE
          recompiles the classes of the web application). The
          <code>scanIntervalSeconds</code> option controls how frequently the
          <code>&lt;jetty.run&gt;</code> task scans your web
          application/WAR file for changes. The default value of
          <code>0</code> disables scanning. Here's an example where Jetty checks for changes every five seconds:</para>

          <informalexample>
            <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
    <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

 <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />

  <target name="jetty.run">
    <jetty.run scanIntervalSeconds="5">
    </jetty.run>
  </target>

</project>
            ]]></programlisting>
          </informalexample>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>stopping:</term>

        <listitem>
          <para>In normal mode (<code>daemon="false"</code>),
          the <code>&lt;jetty.run&gt;</code> task runs until you
          <code>cntrl-c</code> it. It may be useful to
          script both the stop AND the start of Jetty. For such a case, we
          provide the <code>&lt;jetty.stop&gt;</code> task.</para>

          <para>To use it, you need to provide a port and an
          identifying string to both the <code> &lt;jetty.run&gt;</code> and
          the <code>&lt;jetty.stop&gt;</code> tasks, where
          <code>&lt;jetty.run&gt;</code> listens on the given port for a
          stop message containing the given string, and cleanly stops Jetty
          when it is received. The <code>&lt;jetty.stop&gt;</code> task sends
          this stop message. You can also optionally provide a
          <code>stopWait</code> value (in seconds), which is the length
          of time the <code> &lt;jetty.stop&gt;</code> task waits for
          confirmation that the stop succeeded:</para>

          <informalexample>
            <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
    <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

 <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />

  <target name="jetty.run">
    <jetty.run stopPort="9999" stopKey="9999">
    </jetty.run>
  </target>

  <target name="jetty.stop">
   <jetty.stop stopPort="9999" stopKey="9999" stopWait="10"/>
  </target>

</project>
            ]]></programlisting>
          </informalexample>

          <para>To stop jetty via Ant, enter:</para>

            <screen><![CDATA[
> ant jetty.stop
            ]]></screen>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>execution without pausing ant:</term>

        <listitem>
          <para>Usually, the <code>&lt;jetty.run&gt;</code> task runs
          until you <code>cntrl-c</code> it, pausing the execution of Ant as
          it does so. In some cases, it may be useful to let Ant continue
          executing. For example, to run your unit tests you may need other tasks to execute while
          Jetty is running. For this case, we
          provide the <code>daemon</code> option. This defaults to
          <code>false</code>. For <code>true</code>, Ant continues
          to execute after starting Jetty. If Ant exits, so does Jetty. Understand
          that this option does <emphasis>not</emphasis> fork a new process
          for Jetty.</para>

          <informalexample>
            <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
    <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

 <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />

  <target name="jetty.run">
    <jetty.run daemon="true">
    </jetty.run>
  </target>

</project>
            ]]></programlisting>
          </informalexample>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>Deploying a Web Application</title>

    <para>Add a <code>&lt;typedef&gt;</code> for the
    <code>org.eclipse.jetty.ant.AntWebAppContext</code> class with name <emphasis>webApp</emphasis>, then add a
    <code>&lt;webApp&gt;</code> element to <code>&lt;jetty.run&gt;</code> to
    describe your web application. The following example deploys a web
    application that is expanded in the local directory <code>foo/</code> to
    context path <code> / </code>:</para>

    <informalexample>
      <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
    <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

 <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />

 <typedef name="webApp" classname="org.eclipse.jetty.ant.AntWebAppContext"
          classpathref="jetty.plugin.classpath" loaderref="jetty.loader" />

  <target name="jetty.run">
    <jetty.run>
      <webApp war="${basedir}/foo" contextPath="/"/>
    </jetty.run>
  </target>

</project>
      ]]></programlisting>
    </informalexample>

    <variablelist>
      <varlistentry>
        <term>deploying a WAR file:</term>

        <listitem><para>It is not necessary to expand the web application into a directory. It is fine to deploy it as a
          WAR file:</para>

          <informalexample>
            <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
    <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

 <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />

 <typedef name="webApp" classname="org.eclipse.jetty.ant.AntWebAppContext"
          classpathref="jetty.plugin.classpath" loaderref="jetty.loader" />

  <target name="jetty.run">
    <jetty.run>
      <webApp war="${basedir}/foo.war" contextPath="/"/>
    </jetty.run>
  </target>

</project>
            ]]></programlisting>
          </informalexample>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>deploying more than one web application:</term>

        <listitem>
          <para>You can also deploy more than one web application:</para>

          <informalexample>
            <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
    <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

 <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />

 <typedef name="webApp" classname="org.eclipse.jetty.ant.AntWebAppContext"
          classpathref="jetty.plugin.classpath" loaderref="jetty.loader" />

  <target name="jetty.run">
    <jetty.run>
      <webApp war="${basedir}/foo.war" contextPath="/"/>
      <webApp war="${basedir}/other    contextPath="/other"/>
      <webApp war="${basedir}/bar.war" contextPath="/bar"/>
    </jetty.run>
  </target>

</project>
            ]]></programlisting>
          </informalexample>
        </listitem>
      </varlistentry>
    </variablelist>

    <section>
      <title>Configuring the Web Application</title>

      <para>As the <code>org.eclipse.jetty.ant.AntWebAppContext</code> class is an
      extension of the <link
      xl:href="@JDURL@/org/eclipse/jetty/webapp/WebAppContext.html"><code>org.eclipse.jetty.webapp.WebAppContext</code></link>
      class, you can configure it by adding attributes of the same name
      (without the <code>set</code> or <code>add</code> prefix) as the setter methods.</para>

      <para>Here's an example that specifies the location of the
      <code>web.xml</code> file (equivalent to method <link
      xl:href="@JDURL@/org/eclipse/jetty/webapp/WebAppContext.html#setDescriptor%28java.lang.String%29"><code>AntWebAppContext.setDescriptor()</code></link>)
      and the web application's temporary directory (equivalent to method
      <link
      xl:href="@JDURL@/org/eclipse/jetty/webapp/WebAppContext.html#setTempDirectory%28java.io.File%29"><code>AntWebAppContext.setTempDirectory()</code></link>):</para>

      <informalexample>
        <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
    <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

 <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />

 <typedef name="webApp" classname="org.eclipse.jetty.ant.AntWebAppContext"
          classpathref="jetty.plugin.classpath" loaderref="jetty.loader" />

  <target name="jetty.run">
    <jetty.run>
      <webApp descriptor="${basedir}/web.xml" tempDirectory="${basedir}/my-temp" war="${basedir}/foo" contextPath="/"/>
    </jetty.run>
  </target>

</project>
        ]]></programlisting>
      </informalexample>

      <para>Other extra configuration options for the
      AntWebAppContext include:</para>

      <variablelist>
        <varlistentry>
          <term>extra classes and Jars:</term>

          <listitem>
            <para>If your web application's classes and Jars do not reside
            inside <filename>WEB-INF</filename> of the resource base directory, you can use
            the &lt;classes&gt; and &lt;jar&gt; elements to tell Ant where to
            find them. Here's an example:</para>

            <informalexample>
              <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
    <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

 <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />

 <typedef name="webApp" classname="org.eclipse.jetty.ant.AntWebAppContext"
          classpathref="jetty.plugin.classpath" loaderref="jetty.loader" />

  <target name="jetty.run">
    <jetty.run>
      <webApp descriptor="${basedir}/web.xml" tempDirectory="${basedir}/my-temp" war="${basedir}/foo" contextPath="/">
        <classes dir="${basedir}/classes">
          <include name="**/*.class"/>
          <include name="**/*.properties"/>
        </classes>
        <lib dir="${basedir}/jars">
          <include name="**/*.jar"/>
          <exclude name="**/*.dll"/>
        </lib>
      </webApp>
    </jetty.run>
  </target>

</project>
              ]]></programlisting>
            </informalexample>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>context attributes:</term>

          <listitem>
            <para>Jetty allows you to set up ServletContext attributes on your
            web application. You configure them in a context XML file that
            is applied to your WebAppContext instance prior to starting it.
            For convenience, the Ant plugin permits you to configure these
            directly in the build file. Here's an example:</para>

            <informalexample>
              <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
    <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

 <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />

 <typedef name="webApp" classname="org.eclipse.jetty.ant.AntWebAppContext"
          classpathref="jetty.plugin.classpath" loaderref="jetty.loader" />

  <target name="jetty.run">
    <jetty.run>
      <webApp war="${basedir}/foo" contextPath="/">
        <attributes>
          <attribute name="my.param" value="123"/>
        </attributes>
      </webApp>
    </jetty.run>
  </target>

</project>
              ]]></programlisting>
            </informalexample>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename>jetty-env.xml</filename> file:</term>

          <listitem>
            <para>If you are using features such as <link
            linkend="configuring_jndi">JNDI</link> with your web application,
            you may need to configure a <link
            linkend="using_jndi"><filename>WEB-INF/jetty-env.xml</filename></link> file to
            define resources. If the structure of your web application project
            is such that the source of <filename>jetty-env.xml</filename> file resides
            somewhere other than <filename>WEB-INF</filename>, you can use the <code>
            jettyEnvXml</code> attribute to tell Ant where to find it:</para>

            <informalexample>
              <programlisting language="xml"><![CDATA[
<project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
    <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

 <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />

 <typedef name="webApp" classname="org.eclipse.jetty.ant.AntWebAppContext"
          classpathref="jetty.plugin.classpath" loaderref="jetty.loader" />

  <target name="jetty.run">
    <jetty.run>
      <webApp war="${basedir}/foo" contextPath="/" jettyEnvXml="${basedir}/jetty-env.xml">
        <attributes>
      </webApp>
    </jetty.run>
  </target>

</project>
              ]]></programlisting>
            </informalexample>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>context XML file:</term>

          <listitem>
            <para>You may prefer or even require to do some advanced
            configuration of your web application outside of the Ant build
            file. In this case, you can use a standard context XML
            configuration file which the Ant plugin applies to your web
            application before it is deployed. Be aware that the settings from the
            context XML file <emphasis>override</emphasis> those of the
            attributes and nested elements you defined in the build
            file.</para>

            <informalexample>
              <programlisting language="xml"><![CDATA[
project name="Jetty-Ant integration test" basedir=".">

  <path id="jetty.plugin.classpath">
    <fileset dir="jetty-lib" includes="*.jar"/>
  </path>

 <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />

 <typedef name="webApp" classname="org.eclipse.jetty.ant.AntWebAppContext"
          classpathref="jetty.plugin.classpath" loaderref="jetty.loader" />

  <target name="jetty.run">
    <jetty.run>
      <webApp war="${basedir}/foo" contextPath="/" contextXml="${basedir}/jetty-env.xml">
        <attributes>
      </webApp>
    </jetty.run>
  </target>

</project>
              ]]></programlisting>
            </informalexample>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
</section>
