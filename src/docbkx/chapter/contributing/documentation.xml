<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC '-//OASIS//DTD DocBook XML V5.0//EN'
'http://www.oasis-open.org/docbook/xml/5.0b5/dtd/docbook.dtd'
>
<section xml:id="contributing-documentation" version="5.0"
xmlns="http://docbook.org/ns/docbook"
xmlns:xlink="http://www.w3.org/1999/xlink"
xmlns:xi="http://www.w3.org/2001/XInclude"
xmlns:ns5="http://www.w3.org/2000/svg"
xmlns:ns4="http://www.w3.org/1998/Math/MathML"
xmlns:ns3="http://www.w3.org/1999/xhtml"
xmlns:db="http://docbook.org/ns/docbook">
  <title>Documentation</title>
  <para>This document is produced using a combination of maven, git, and
  docbook. We welcome anyone and everyone to contribute to the content of this
  book. Below is the information on how to obtain the source of this book and
  to build it as well as information on how to contribute back to it.</para>
  <section>
    <title>Tools</title>
    <para>You will need:</para>
    <variablelist>
      <?dbhtml list-presentation="table"?>
      <?dbhtml term-width="15%"  list-width="85%" ?>
      <?dbhtml term-presentation="bold" ?>
      <?dbhtml term-separator="" ?>
      <?dbhtml table-summary="tools needed for working with documentation" ?>
      <varlistentry>
        <term>git</term>
        <listitem>
          <para>This project is located at github so if you do not have a
          GitHub account already you should register for one. You can do that
          at
          <link xlink:href="https://github.com">Github</link></para>
          <para>You can go one of two ways for using git, if you are familiar
          with SCM's and the command line interface then feel free to install
          and use git from there. Otherwise we would recommend you use the
          github client itself as it will help with some of the workflow
          involved with working with git.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>maven 3</term>
        <listitem>
          <para>We build the project with maven 3 which can be found at
          <link xlink:href="http://maven.apache.org">Apache Maven</link></para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>Getting Started (cli)</title>
    <para>First you need to obtain the source of the documentation
    project.</para>
    <para>Clone the repository:</para>
    <screen linenumbering="numbered">
<![CDATA[
$ git clone git@github.com:jetty-project/jetty-documentation.git
      ]]>
    </screen>
    <para>You will now have a local directory with all of the
    jetty-documentation. Now we move on to building it.</para>
    <screen>
<![CDATA[
$ cd jetty-documentation $ mvn install
]]>
    </screen>
    <para>While maven is running you may see a lot of files being downloaded.
    If you are not familiar with maven, then what you are seeing is maven
    setting up the execution environment for generating the documentation. This
    build should produce xhtml, as well as any other output formats that we are
    working with as time goes on. The downloads are all of the java
    dependencies that are required to make this while build work. After a while
    the downloading will stop and you'll see the execution of the
    docbkx-maven-plugin.</para>
    <screen>
<![CDATA[
[INFO] --- docbkx-maven-plugin:2.0.13:generate-xhtml (documentation identifier) @ jetty-documentation ---
[INFO] Processing input file: jetty.xml
[INFO] Dumping to /home/jesse/src/projects/jetty/jetty-documentation/target/docbkx/generated/(gen)jetty.xml
[INFO] Applying customization parameters
[INFO] Chunking output. &lt;?xml version="1.0" encoding="UTF-8"?&gt;
[INFO] See /home/jesse/src/projects/jetty/jetty-documentation/target/docbkx/xhtml/jetty for generated file(s)
[INFO] Executing tasks
[INFO] Executed tasks
]]>
    </screen>
    <para>The build is finished once you see a message akin to this:</para>
    <screen>
<![CDATA[
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 7.014s
[INFO] Finished at: Tue Oct 25 14:15:37 CDT 2011
[INFO] Final Memory: 14M/229M
[INFO] ------------------------------------------------------------------------
]]>
    </screen>
    <para>You may now open your web browser and browse to the first page of the
    html output to see what you have produced! Generally you can do this with
    File -&gt; Open File -&gt; which will open a file system browsing screen,
    navigate to your jetty-documentation directory and then further into
    target/docbkx/xhtml/jetty/jetty.html which is the first page of the
    produced documentation.</para>
    <para>
      <emphasis>Note: if the build is broke, feel free to notify us.</emphasis>
    </para>
  </section>
  <section>
    <title>Making Changes</title>
    <para>Now that you have built the documentation, you want to edit it and
    make some changes. We'll now have to take a bit of as step back and look at
    how git and github works. In the above example you have cloned directly
    from our canonical documentation repository. Obviously we can not allow
    anyone immediate access to this repository so you must make a fork of it
    for your own and then issue back pull requests to build up documentation
    karma. In english that means that you would go to the url of the
    documentation in github:</para>
    <para>
      <screen>https://github.com/jetty-project/jetty-documentation</screen>
    </para>
    <para>When your on this page you will see a little button called 'Fork'
    which you can click and you'll suddenly be taking back to your main page on
    github where you have a new repository. When you checkout this repository
    you are free to commit to your hearts delight all the changes you so direly
    wish to see in the jetty documentation. You can clone it to your local
    machine and build it same as above. So lets start small with a little
    example. Find some paragraph in the documentation that you think needs
    changed. Located that in the local checkout and make the change. Now we
    follow the process to push that change back into jetty proper. Do make sure
    the change works and the build isn't broken though so make sure you run
    maven and check the output. Then commit the change.</para>
    <screen>
<![CDATA[
$ git commit -m "Tweaked the introduction to fix a horrid misspelled word." src/docbkbx/topics/introduction/topic.xml
]]>
    </screen>
    <para>This will commit the change that you made into git which means that
    now git knows about the change is you now want to push that change up to
    your repository on github.</para>
    <screen>
<![CDATA[
$ git push
]]>
    </screen>
    <para>Now you'll see some output showing that your change has been migrated
    to up your repository on github. In fact if you navigate to that repository
    at the top of the files list you should see your comment there. Success,
    your change is now positioned for notifying us about it! If you click on
    the commit message itself you'll be taken to a screen that shows what files
    where changed in that commit. In the upper right corner is a button for
    'Pull Request'. When you select this and follow the workflow we will then
    be notified of your contribution and will be able to apply it to our git
    repository upon review.</para>
    <para>Thats it! You have successfully contributed to the documentation
    efforts of the Jetty project. After enough of these sorts of contributions
    and building up good community karma, you may be asked to join us as a
    commiter on the documentation.</para>
  </section>
  <section>
    <title>Conventions</title>
    <para>Below is list of conventions that should be followed when developing
    documentation within this framework. These are not set in stone and should
    be updated as we learn more.</para>
    <variablelist>
      <?dbhtml list-presentation="table"?>
      <?dbhtml term-width="15%"  list-width="85%" ?>
      <?dbhtml term-presentation="bold" ?>
      <?dbhtml term-separator="" ?>
      <?dbhtml table-summary="tools needed for working with documentation" ?>
      <varlistentry>
        <term>chapters</term>
        <listitem>
          <para>defined in jetty.xml</para>
        </listitem>
        <listitem>
          <para>use xi:include to bring in individual chapters</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>sections</term>
        <listitem>
          <para>composed of discrete sections that can be linked into chapters
          via xi:include as needed</para>
        </listitem>
        <listitem>
          <para>root of chapters is always named chapter.xml</para>
        </listitem>
        <listitem>
          <para>can be further decomposed into xml files and linked in with
          xi:include</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>version differences</term>
        <listitem>
          <para>in general differences in functionality within a major should
          go into nested sections and use titles like 'Prior to: ##' or 'In
          version: ##'</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</section>
