<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="session-clustering-gcloud-datastore"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Session Clustering with Google Cloud Datastore</title>

  <para>Jetty can support session clustering by persisting sessions to <link
  xl:href="https://cloud.google.com/datastore/docs/concepts/overview">Google
  Cloud Datastore</link>. Each Jetty instance locally caches sessions for
  which it has received requests, writing any changes to the session through
  to the Datastore as the request exits the server. Sessions must obey the
  Serialization contract, and servlets must call the Session.setAttribute()
  method to ensure that changes are persisted.</para>

  <para>The persistent session mechanism works in conjunction with a load
  balancer that supports stickiness. Stickiness can be based on various data
  items, such as source IP address or characteristics of the session ID or a
  load-balancer specific mechanism. For those load balancers that examine the
  session ID, the Jetty persistent session mechanism appends a node ID to the
  session ID, which can be used for routing.</para>

  <section>
    <title>Configuration</title>

    <para>There are two components to session management in Jetty: a session
    ID manager and a session manager.</para>

    <itemizedlist>
      <listitem>
        <para>The session ID manager ensures that session IDs are unique
        across all webapps hosted on a Jetty instance, and thus there can only
        be one session ID manager per Jetty instance.</para>
      </listitem>

      <listitem>
        <para>The session manager handles the session lifecycle
        (create/update/invalidate/expire) on behalf of a web application, so
        there is one session manager per web application instance.</para>
      </listitem>
    </itemizedlist>

    <para>These managers also cooperate and collaborate with the
    <code>org.eclipse.jetty.server.session.SessionHandler</code> to enable
    cross-context dispatch.</para>
  </section>

  <section>
    <title>The gcloud-sessions Module</title>

    <para>When using the jetty distribution, to enable Cloud Datastore session
    persistence, you will first need to enable the
    <code>gcloud-sessions</code> <link linkend="startup-modules">module</link>
    for your <link linkend="creating-jetty-base">base</link> using the
    --add-to-start or --add-to-startd argument to the <link
    linkend="startup-overview">start.jar</link>.</para>

    <para>As part of the module installation, the necessary jars will be
    dynamically downloaded and installed to your
    <code>${jetty.base}/lib/gcloud</code> directory. If you need to up or
    downgrade the version of the jars, then you can delete the jars that were
    automatically installed and replace them. Once you've done that, you will
    need to prevent jetty's startup checks from detecting the missing jars. To
    do that, you can use <code>--skip-file-validation=glcoud-sessions</code>
    argument to start.jar on the command line, or place that line inside
    <code>${jetty.base}/start.ini</code> to ensure it is used for every
    start.</para>

    <section>
      <title>Configuring the GCloudSessionIdManager</title>

      <para
      xl:href="@JDURL@/org/eclipse/jetty/gcloud/session/GCloudSessionIdManager.html">The
      gcloud-sessions module will have installed file called
      <code>${jetty.home}/etc/jetty-gcloud-sessions.xml</code>. This file
      configures an instance of the GCloudSessionIdManager that will be shared
      across all webapps deployed on that server. It looks like this:</para>

      <programlisting language="rxml"><filename>@GITURL@/jetty-gcloud/gcloud-session-manager/src/main/config/etc/jetty-gcloud-sessions.xml</filename></programlisting>

      <para>You configure it by setting values for properties. The properties
      will either be inserted as commented out in your <code>start.ini</code>,
      or your <code>start.d/gcloud-sessions.ini</code> file, depending on how
      you enabled the module.</para>

      <para>The only property you always need to set is the name of the node
      in the cluster:</para>

      <variablelist>
        <varlistentry>
          <term>jetty.gcloudSession.workerName</term>

          <listitem>
            <para>The name that uniquely identifies this node in the cluster.
            This value will also be used by the sticky load balancer to
            identify the node. Don't forget to change the value of this
            property on <emphasis role="bold">each</emphasis> node on which
            you enable gcloud datastore session clustering.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Which other properties you need to set depends on the execution
      environment:</para>

      <section>
        <title>Running Within Google Infrastructure</title>

        <para>When you upload your webapp to run in Compute Engine, you do not
        need to set any other properties for jetty. If you follow the
        instructions in the <link
        xl:href="https://cloud.google.com/datastore/docs/activate">Cloud
        Datastore documentation</link>, all authorizations etc will be
        provided by the runtime environment.</para>
      </section>

      <section>
        <title>Running Externally to Google Infrastructure</title>

        <para>When your app is executing outside of Google, you can either
        contact a remote Cloud Datastore instance, or a <link
        xl:href="https://cloud.google.com/datastore/docs/tools/devserver">local
        test dev server</link> provided by the sdk. The choice determines
        which properties you need to set:</para>

        <variablelist>
          <varlistentry>
            <term>Contacting an sdk dev server for testing:</term>

            <listitem>
              <para>In this case, you need to set up either some
              <emphasis>System</emphasis> properties or <emphasis>environment
              variables</emphasis> - NOT jetty properties!</para>

              <para><variablelist>
                  <varlistentry>
                    <term>DATASTORE_DATASET</term>

                    <listitem>
                      <para>This must be the name of your (test)
                      project.</para>
                    </listitem>
                  </varlistentry>

                  <varlistentry>
                    <term>DATASTORE_HOST</term>

                    <listitem>
                      <para>This is the url of the dev server as described at
                      <link
                      xl:href="https://cloud.google.com/datastore/docs/tools/devserver#setting_environment_variables">https://cloud.google.com/datastore/docs/tools/devserver#setting_environment_variables</link>.
                      An example may be "http://localhost:9999"</para>
                    </listitem>
                  </varlistentry>
                </variablelist></para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Contacting a remote Cloud Datastore:</term>

            <listitem>
              <para>In this case, you need to provide all of the
              authentication and authorization information explicitly via
              jetty properties in the ini file:</para>

              <variablelist>
                <varlistentry>
                  <term>jetty.gcloudSession.projectId</term>

                  <listitem>
                    <para>This is the name of your project.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>jetty.gcloudSession.p12File</term>

                  <listitem>
                    <para>This is the location of the p12 key file that is
                    associated with your project.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>jetty.gcloudSession.serviceAccount</term>

                  <listitem>
                    <para>This is the email address that defines your service
                    account for the Cloud Datastore.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>jetty.gcloudSession.password</term>

                  <listitem>
                    <para>This is the password associated with the p12 key
                    file.</para>
                  </listitem>
                </varlistentry>
              </variablelist>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>

    <section>
      <title>Configuring the GCloudSessionManager</title>

      <para>As mentioned elsewhere, there should be one GCloudSessionManager
      per context (ie webapp). It will need to reference the single
      GCloudSessionIdManager from which it derives the Cloud Datastore
      configuration information.</para>

      <para>The way you configure a GCloudSessionManager depends on whether
      you're configuring from a context xml file or a
      <filename>jetty-web.xml</filename> file or code. The basic difference is
      how you get a reference to the Jetty
      <code>org.eclipse.jetty.server.Server</code> instance.</para>

      <para>From a context xml file, you reference the Server instance as a
      Ref:</para>

      <informalexample>
        <programlisting language="xml"><![CDATA[  
  
  <!-- Get a reference to the GCloudSessionIdManager -->
  <Ref id="Server">
    <Call id="idMgr" name="getSessionIdManager"/>
  </Ref>

  <!-- Use the GCloudSessionIdManager to set up the GCloudSessionManager -->
  <Set name="sessionHandler">
    <New class="org.eclipse.jetty.server.session.SessionHandler">
      <Arg>
        <New id="mgr" class="org.eclipse.jetty.gcloud.session.GCloudSessionManager">
          <Set name="sessionIdManager">
            <Ref id="idMgr"/>
          </Set>
          <Set name="scavengeIntervalSec">600</Set>
        </New>
      </Arg>
    </New>
  </Set>

]]></programlisting>
      </informalexample>

      <para>From a <filename>WEB-INF/jetty-web.xml</filename> file, you can
      reference the Server instance directly:</para>

      <informalexample>
        <programlisting language="xml"><![CDATA[  
<!-- Reference the server directly -->
<Get name="server">
  <Get id="idMgr" name="sessionIdManager"/>
</Get>

<!-- Apply the SessionIdManager to the GCloudSessionManager -->
<Set name="sessionHandler">
  <New class="org.eclipse.jetty.server.session.SessionHandler">
     <Arg>
        <New id="mgr" class="org.eclipse.jetty.gcloud.session.GCloudSessionManager">
          <Set name="sessionIdManager">
            <Ref id="idMgr"/>
          </Set>
          <Set name="scavengeIntervalSec">600</Set>
        </New>
      </Arg>
  </New>
</Set>

]]></programlisting>
      </informalexample>

      <para>The GCloudSessionManager supports the following configuration
      setters:</para>

      <variablelist>
        <varlistentry>
          <term>scavengeIntervalSec</term>

          <listitem>
            <para>Time in seconds between runs of a scavenger task that looks
            for expired old sessions to delete. The default is 10 minutes. If
            set to 0, no scavenging is done.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>staleIntervalSec</term>

          <listitem>
            <para>The length of time a session can be in memory without being
            checked against the cluster. A value of 0 indicates that the
            session is never checked against the cluster - the current node is
            considered to be the master for the session.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>maxQueryResults</term>

          <listitem>
            <para>The maximum number of results to return for a query to find
            expired sessions. For efficiency it is important to limit the size
            of the result. The default is 100. If 0 or negative numbers are
            set, the default is used instead. </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
</section>
