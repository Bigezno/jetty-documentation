<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="framework-jetty-spring" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Spring Setup</title>

  <para>You can assemble and configure Jetty in code or with almost any IoC
  style framework including Spring. If all you want to do is setup a Jetty
  server in your stock Spring usage, simply look at the xml snippet below as
  an example. If you want to replace the jetty-xml being used to start the
  normal Jetty distribution with spring, you may do so however currently it
  will not leverage the rest of the module system. </para>

  <section>
    <title>Jetty-Spring Module</title>

    <para>The skeleton of a jetty spring module can be enabled from the
    jetty-distribution via the <link linkend="startup-modules">module
    mechanism</link>. For example:<screen><![CDATA[$ java -jar start.jar --add-to-startd=spring]]></screen></para>

    <para>This (or the alternative <link
    linkend="start-jar">--add-to-start</link>=spring command) creates a
    <code>${jetty.home}/lib/spring</code> directory and populates it with the
    jetty-spring integration jar. It does NOT supply the spring jars and their
    dependencies. You will need to download these and place them into jetty's
    classpath - you can use the <code>${jetty.home}/lib/spring</code>
    directory created by spring.mod for this purpose.</para>
  </section>

  <section>
    <title>Using Spring to Configure Jetty</title>

    <para>Configuring Jetty via Spring is simply a matter of calling the API
    as Spring beans. The following is an example mimicking the default jetty
    startup configuration.</para>

    <informalexample>
      <programlisting language="xml"><![CDATA[
			
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!-- =============================================================== -->
<!-- Configure the Jetty Server with Spring                          -->
<!-- This file is the similar to jetty.xml, but written in spring    -->
<!-- XmlBeanFactory format.                                          -->
<!-- =============================================================== -->

<beans>
	<bean id="contexts" class="org.eclipse.jetty.server.handler.ContextHandlerCollection"/>
	<bean id="server" name="Main" class="org.eclipse.jetty.server.Server" init-method="start" destroy-method="stop">
		<constructor-arg>
			<bean id="threadPool" class="org.eclipse.jetty.util.thread.QueuedThreadPool">
				<property name="minThreads" value="10"/>
				<property name="maxThreads" value="50"/>
			</bean>
		</constructor-arg>
		<property name="connectors">
			<list>
				<bean id="connector" class="org.eclipse.jetty.server.ServerConnector">
					<constructor-arg ref="server"/>
					<property name="port" value="8080"/>
				</bean>
			</list>
		</property>
		<property name="handler">
			<bean id="handlers" class="org.eclipse.jetty.server.handler.HandlerCollection">
			<property name="handlers">
					<list>
						<ref bean="contexts"/>
						<bean id="defaultHandler" class="org.eclipse.jetty.server.handler.DefaultHandler"/>
					</list>
				</property>
			</bean>
		</property>
		<property name="beans">
			<list>
				<bean id="deploymentManager" class="org.eclipse.jetty.deploy.DeploymentManager">
					<property name="contexts" ref="contexts"/>
					<property name="appProviders">
						<list>
							<bean id="webAppProvider" class="org.eclipse.jetty.deploy.providers.WebAppProvider">
								<property name="monitoredDirName" value="webapps"/>
								<property name="scanInterval" value="1"/>
								<property name="extractWars" value="true"/>
							</bean>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>
</beans>

		]]></programlisting>
    </informalexample>
  </section>

  <!--
  This is not valid given the distribution structure or purpose of Jetty 9.1+

  a mod file needs to work with everything else, not in exclusion so either we would have to have all other mod files also expose a spring beans alternative or this is purely and academic exercise...in which case not appropriate for our production distribution.  If we want an example, we should publish a jetty.base with specifically this functionality and clearly state it is stand alone.
	-->

  <!--section>
	<title>Starting Jetty Distribution with Spring</title>
	<para>
		As a purely optional effort to illustrate how this works, if you want to use spring to start up the jetty distribution then all you need to do is make these changes and then run it appropriately.  
	</para>

	<itemizedlist>
		<listitem>
			<para>
				Create a $jetty.home/lib/spring directory and place the jetty-spring, spring, and commons-logging artifacts mentioned above inside
			</para>
		</listitem>

		<listitem>
			<para>
				Cut and paste the above into a jetty-spring.xml file inside of $jetty.home/etc
			</para>
		</listitem>
	</itemizedlist>

	<para>
		The following command line starts Jetty using the spring configuration file providing you have configured the jetty-distribution as described above.
	</para>
	<screen>
		<![CDATA[
$ java -jar start.jar OPTIONS=Server,All,spring start.class=org.eclipse.jetty.spring.Main etc/jetty-spring.xml
]]>
	</screen>
	<para>
		This uses the jetty-spring Main class to load the Spring configuration file and join the resulting server.  Jetty is now started up through spring as opposed to the normal jetty xml configuration mechanism.
	</para>
</section-->
</section>
