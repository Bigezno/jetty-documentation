<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section xml:id="jsp-support" version="5.0" xmlns="http://docbook.org/ns/docbook"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xl="http://www.w3.org/1999/xlink"
xmlns:xi="http://www.w3.org/2001/XInclude"
xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">
  <title>Configuring JSP</title>
  <para>This document provides information about configuring JSP.</para>
  <section xml:id="compiling-jsps">
    <title>Compiling JSPs</title>
    <para>To compile <filename>.jsp</filename> files into Java classes, you need a Java compiler. You can acquire a
    Java compiler from the JVM if you are using a full JDK, or from a third party Jar.</para>
    <para>In versions of Jetty prior to 7.5.0, the JSP infrastructure uses the Eclipse Java Compiler ( <code>
    ecj.jar</code>) which is supplied in <filename>$JETTY_HOME/lib/jsp</filename>. For jetty-7.5.0 and later we
    upgraded the version of JSP to <code>jsp-impl-2.1.3.b10</code> (from Glassfish). In this version, the JSP
    infrastructure ALWAYS tries to acquire a Java compiler from the JVM if the version of Java is 1.6 or above.
    Therefore, if you are using a JRE, JSPs are unable to compile, so you must use a full JDK. Alternatively, you can
    precompile your JSPs (which is preferable in a production deployment in any case). The
    [[Jetty/Feature/Jetty_Jspc_Maven_Plugin|Jetty JSPC Maven Plugin]] TODO xref// is helpful for precompilation.</para>
    <para>If you are using jetty-7.5.5 or later (including jetty-8.x), you can use <emphasis>either</emphasis> a full
    JDK <emphasis>or</emphasis> a JRE in combination with a third party Java compiler (such as ecj which we distribute
    in <filename>$JETTY_HOME/lib/jsp</filename>). To use the ecj compiler, you need to set a <code>
    SystemProperty</code>. You can do this either in your code or in a jetty config file. Here's the snippet that you
    can put into <filename>jetty.xml</filename>:</para>
    <informalexample>
      <programlisting language="xml">
<![CDATA[
  <Call class="java.lang.System"  name="setProperty">
    <Arg>org.apache.jasper.compiler.disablejsr199</Arg>
    <Arg>true</Arg>
  </Call>
]]>
      </programlisting>
    </informalexample>
    <para>Alternatively, you can put this <code>SystemProperty</code> into <filename>start.ini</filename>:</para>
    <informalexample>
      <programlisting language="text">
<![CDATA[
 -Dorg.apache.jasper.compiler.disablejsr199=true
]]>
      </programlisting>
    </informalexample>
    <section xml:id="jsp-using-jetty-maven-plugin">
      <title>Using the Jetty Maven Plugin with JSP</title>
      <para>For jetty-7.5.0 and later we upgraded the version of JSP to <filename>jsp-impl-2.1.3.b10</filename> (from
      Glassfish). In this version, the JSP infrastructure ALWAYS tries to acquire a Java compiler from the JVM if the
      version of Java is 1.6 or above. Therefore, if you are using a JRE, JSPs are unable to compile, so you must use a
      full JDK.</para>
      <para>We hope to be able to introduce a patch to allow the use of third party Jars in an upcoming release of the
      plugin. We will update this page when we have more information.</para>
    </section>
  </section>
  <section xml:id="configuring-jsp-for-jetty">
    <title>Configuring JSP for Jetty</title>
    <para>The JSP engine has many configuration parameters. Some parameters affect only precompilation, and some affect
    runtime recompilation checking. Parameters also differ between the 2.0 and 2.1 release of the JSP engine. This page
    lists the configuration parameters, their meanings and their default settings.</para>
    <important>
      <para>Be careful:</para>
      <itemizedlist>
        <listitem>For all of the parameters below, if the value you set doesn't take effect, try using all lower case
        instead of camel case, as JSP is inconsistent in its parameter naming strategy.</listitem>
        <listitem>Be aware that for JDK1.6, the default for <emphasis>keepgenerated</emphasis> is <emphasis>
        false</emphasis>; therefore <filename>.java</filename> files are left after compilation only if a compilation
        error occurs.</listitem>
      </itemizedlist>
    </important>
    <table>
      <title>Understanding JSP 2.1 Parameters</title>
      <tgroup cols="4">
        <thead>
          <row>
            <entry align="left">init param</entry>
            <entry align="left">Description</entry>
            <entry align="left">Default</entry>
            <entry align="left">webdefault.xml</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>development</entry>
            <entry><code>development=true</code>, recompilation checks occur on each request. See also <code>
            modificationTestInterval</code>.</entry>
            <entry>TRUE</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>fork</entry>
            <entry>Should Ant fork its java compiles of JSP pages?</entry>
            <entry>TRUE</entry>
            <entry>FALSE</entry>
          </row>
          <row>
            <entry>keepgenerated</entry>
            <entry>Do you want to keep the generated Java files around?</entry>
            <entry>FALSE</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>saveByteCode</entry>
            <entry>If class files are generated as byte arrays, should they be saved to disk at the end of
            compilations?</entry>
            <entry>FALSE</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>trimSpaces</entry>
            <entry>Should white spaces between directives or actions be trimmed?</entry>
            <entry>FALSE</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>enablePooling</entry>
            <entry>Determines whether tag handler pooling is enabled.</entry>
            <entry>TRUE</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>mappedFile</entry>
            <entry>Support for mapped Files. Generates a servlet that has a print statement per line of the JSP
            file./</entry>
            <entry>TRUE</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>sendErrorToClient</entry>
            <entry>If false, stack traces, etc., are sent to std error instead of the client's browser.</entry>
            <entry>FALSE</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>classdebuginfo</entry>
            <entry>Include debugging info in class file.</entry>
            <entry>TRUE</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>checkInterval</entry>
            <entry>Interval in seconds between background recompile checks. Only relevant if <code>
            development=false</code>.</entry>
            <entry>0</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>suppressSmap</entry>
            <entry>Generation of SMAP info for JSR45 debugging.</entry>
            <entry>FALSE</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>dumpSmap</entry>
            <entry>Dump SMAP JSR45 info to a file.</entry>
            <entry>FALSE</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>genStrAsCharArray</entry>
            <entry>Option for generating Strings.</entry>
            <entry>FALSE</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>genStrAsByteArray</entry>
            <entry>Option for generating Strings.</entry>
            <entry>TRUE</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>defaultBufferNone</entry>
            <entry></entry>
            <entry>FALSE</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>errorOnUseBeanInvalidClassAttribute</entry>
            <entry></entry>
            <entry>FALSE</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>scratchDir</entry>
            <entry>Directory where servlets are generated. Jetty sets this value according to the
            [/display/JETTY/Temporary+Directories work dir] settings for the webapp.</entry>
            <entry>&#8211;</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>compiler</entry>
            <entry>Determined at runtime. For Jetty this is the Eclipse jdt compiler.</entry>
            <entry>&#8211;</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>compilerTargetVM</entry>
            <entry>Target vm to compile for.</entry>
            <entry>1.5</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>compilerSourceVM</entry>
            <entry>Sets source compliance level for the jdt compiler.</entry>
            <entry>1.5</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>javaEncoding</entry>
            <entry>Pass through the encoding to use for the compilation.</entry>
            <entry>UTF8</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>modificationTestInterval</entry>
            <entry>If <code>development=true</code>, interval between recompilation checks, triggered by a
            request.</entry>
            <entry>0</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>xpoweredBy</entry>
            <entry>Generate an X-Powered-By response header.</entry>
            <entry>FALSE</entry>
            <entry>FALSE</entry>
          </row>
          <row>
            <entry>usePrecompiled/use-precompiled</entry>
            <entry></entry>
            <entry>FALSE</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>validating/enableTldValidation</entry>
            <entry>Whether or not to validate tag files against the schema.</entry>
            <entry>FALSE</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>reload-interval</entry>
            <entry>If <code>reload-interval=0</code>, then no runtime checking of JSP, otherwise sets the checking
            interval for both <code>development=true</code> and <code>development=false</code>.</entry>
            <entry>&#8211;</entry>
            <entry>&#8211;</entry>
          </row>
          <row>
            <entry>initial-capacity/initialCapacity</entry>
            <entry>The initial capacity of the hash maps mapping the name of the JSP to class and JSP file.</entry>
            <entry>&#8211;</entry>
            <entry>&#8211;</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>Much confusion generally ensues about the <code>development</code>, <code>checkInterval</code> and <code>
    modificationTestInterval</code> parameters and JSP runtime recompilation. Here is a factoring out of the various
    options:</para>
    <itemizedlist>
      <listitem>Check the JSP files for possible recompilation on every request: 
      <informalexample>
        <programlisting language="xml">
<![CDATA[
<init-param>
        <param-name>development></param-name>
        <param-value>true></param-value>
</init-param>
]]>
        </programlisting>
      </informalexample></listitem>
      <listitem>Only check approximately every N seconds, where a request will trigger the time-lapse calculation. This
      example checks every 60 seconds: 
      <informalexample>
        <programlisting language="xml">
<![CDATA[
<init-param>
        <param-name>development></param-name>
        <param-value>true></param-value>
</init-param>
<init-param>
        <param-name>modificationTestInterval></param-name>
        <param-value>60></param-value>
</init-param>
]]>
        </programlisting>
      </informalexample></listitem>
      <listitem>Do no checking whatsoever, but still compile the JSP on the very first hit. (Note: this
      ''reload-interval'' parameter is shorthand for a ''development=false'' and ''checkInterval=0'' combination.): 
      <informalexample>
        <programlisting language="xml">
<![CDATA[
<init-param>
        <param-name>reload-interval></param-name>
        <param-value>-1></param-value>
</init-param>
]]>
        </programlisting>
      </informalexample></listitem>
      <listitem>Don't do any request-time checking, but instead start a background thread to do checks every N seconds.
      This example checks every 60 seconds: 
      <informalexample>
        <programlisting language="xml">
<![CDATA[
<init-param>
        <param-name>development></param-name>
        <param-value>false></param-value>
 </init-param>
 <init-param>
         <param-name>checkInterval></param-name>
         <param-value>60></param-value>
</init-param>
 ]]>
        </programlisting>
      </informalexample></listitem>
    </itemizedlist>
  </section>
  <section xml:id="modifying-configuration">
    <title>Modifying the Configuration</title>
    <para>There are several options for modifying the Jasper JSP servlet configuration.</para>
    <section xml:id="overriding-webdefault.xml">
      <title>Overriding <filename>webdefault.xml</filename></title>
      <para>You can make a copy of the [[Jetty/Reference/webdefault.xml|webdefault.xml]] //TODO xref//that ships with
      Jetty, apply your changes, and use it instead of the shipped version. The example below shows how to do this when
      using the Jetty Maven plugin.</para>
      <informalexample>
        <programlisting language="xml">
<![CDATA[
  <plugin>
    <groupId>org.mortbay.jetty</groupId>
    <artifactId>jetty-maven-plugin</artifactId>
    <configuration>
    <webAppConfig>
      <defaultsDescriptor>src/main/resources/webdefault.xml</defaultsDescriptor>
    </webAppConfig>
    <connectors>
    ..

]]>
        </programlisting>
      </informalexample>
      <para>If you're using Jetty standalone, and you want to change the JSP settings for just one or a few of your
      webapps, copy the <filename>$JETTY_HOME/etc/webdefault.xml</filename> file somewhere, modify it, and then use a
      [[Jetty/Feature/ContextDeployer|context xml]] //TODO xref// file to set this file as the <code>
      webdefaults</code> for your webapp. Here's a snippet:</para>
      <informalexample>
        <programlisting language="xml">
<![CDATA[
 <Configure class=>"org.eclipse.jetty.webapp.WebAppContext">
 
   <Set name=>"contextPath">/foo</Set>
   <Set name=>"war"><SystemProperty name=>"jetty.home" >default=>"."/>/webapps/foobar.war</Set>
   <Set name=>"defaultsDescriptor">/home/smith/dev/webdefault.xml</Set>
  
 </Configure>
]]>
        </programlisting>
      </informalexample>
      <para>If you want to change the JSP settings for all of the webapps, edit the <filename>
      $JETTY_HOME/etc/webdefaults.xml</filename> file directly instead.</para>
    </section>
    <section xml:id="configuring-jsp-servlet-in-web.xml">
      <title>Configuring the JSP Servlet in <filename>web.xml</filename></title>
      <para>Another option is to add an entry for the Jasper JSP servlet to the <filename>web.xml</filename> file of
      your webapp. You can use the entry in [[Jetty/Reference/webdefault.xml|webdefault.xml]]//TODO xref// as a
      starting point.</para>
      <informalexample>
        <programlisting language="xml">
<![CDATA[
 <servlet id=>"jsp">
     <servlet-name>jsp</servlet-name>
     <servlet-class>org.apache.jasper.servlet.JspServlet</servlet-class>
     <init-param>
         <param-name>logVerbosityLevel</param-name>
         <param-value>DEBUG</param-value>
     </init-param>
     <init-param>
         <param-name>fork</param-name>
         <param-value>>false</param-value>
     </init-param>
     <init-param>
         <param-name>keepgenerated</param-name>
         <param-value>>true</param-value>
     </init-param>
     ...
     
     <load-on-startup>0</load-on-startup>
   </servlet>
 
   <servlet-mapping>
     <servlet-name>jsp</servlet-name>
     <url-pattern>*.jsp</url-pattern>
     <url-pattern>*.jspf</url-pattern>
     <url-pattern>*.jspx</url-pattern>
     <url-pattern>*.xsp</url-pattern>
     <url-pattern>*.JSP</url-pattern>
     <url-pattern>*.JSPF</url-pattern>
     <url-pattern>*.JSPX</url-pattern>
     <url-pattern>*.XSP</url-pattern>
   </servlet-mapping>
   
   <servlet id=>"my-servlet">
     <servlet-name>myServlet</servlet-name>
     <servlet-class>com.acme.servlet.MyServlet</servlet-class>
      ...

]]>
        </programlisting>
      </informalexample>
    </section>
  </section>
  <section xml:id="using-jstl-taglibs-for-jetty7-jetty8">
    <title>Using JSTL Taglibs for Jetty 7.x and 8.x</title>
    <para>There are some differences in how you use JSTL taglibs in Jetty 7 and Jetty 8.</para>
    <section xml:id="using-jstl-taglibs-for-jetty7.x">
      <title>Using JSTL Taglibs for Jetty 7.x</title>
      <para>The JSTL tags are present in the <code>org.apache.taglibs.standard.glassfish</code> Jar in <filename>
      $JETTY_HOME/lib/jsp</filename>. For the Jetty/JSP integration to find them, you need to configure a pattern that
      defines the names of files in the container's classpath that contain <filename>.tld</filename> files. You must
      define the pattern as a context attribute on <emphasis>each</emphasis> context that you deploy. The context
      attribute and pattern is:</para>
      <screen>
<![CDATA[
  attribute: org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern
  value: .*/.*jsp-api-[^/]*\.jar$|.*/.*jsp-[^/]*\.jar$|.*/.*taglibs[^/]*\.jar$
]]>
      </screen>
      <para>If you are using the Jetty deployers (that is, your <filename>start.ini</filename> file contains <filename>
      etc/jetty-deploy.xml</filename>), you don't need to do anything, as the pattern is pre-defined in <filename>
      etc/jetty-deploy.xml</filename>, and the deployer makes sure the attribute is set on each and every context it
      deploys. If you are NOT using the deployers, you need to configure the attribute on <emphasis>
      each</emphasis> context you set. Here's an example:</para>
      <informalexample>
        <programlisting language="xml">
<![CDATA[
<New class="org.eclipse.jetty.webapp.WebAppContext">
  <Arg><Ref refid="Contexts"/></Arg>
  <Arg><SystemProperty name="jetty.home" default="."/>/webapps/test.war</Arg>
  <Arg>/test</Arg>
   <Call name="setAttribute">
            <Arg>org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern</Arg>
            <Arg>.*/.*jsp-api-[^/]*\.jar$|.*/.*jsp-[^/]*\.jar$|.*/.*taglibs[^/]*\.jar$</Arg>
   </Call>
</New>
]]>
        </programlisting>
      </informalexample>
      <note>You can use the <filename>org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern</filename> for more
      than identifying Jars that contain tlds. Its purpose is to supply a pattern of names of Jars on the container's
      classpath whose /META-INF directories should be scanned for resources, for fragments, or for TLDs.</note>
    </section>
    <section xml:id="using-jstl-taglibs-for-jetty8.x">
      <title>Using JSTL Taglibs for Jetty 8.x</title>
      <para>The version of JSP 2.2 engine that Jetty uses employs a Servlet 3.0 way of finding TLDs ( <link
      xl:href="http://docs.oracle.com/javaee/6/api/javax/servlet/ServletContainerInitializer.html">
      ServletContainerInitializer</link>), and thus does <emphasis>not</emphasis> require that you define <code>
      org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern</code>.</para>
    </section>
  </section>
  <section xml:id="using-jsf-taglibs">
    <title>Using JSF Taglibs</title>
    <para>The following sections provide information about using JSF taglibs with Jetty Standalone and the Jetty Maven
    Plugin.</para>
    <section xml:id="using-jsf-taglibs-with-jetty-standalone">
      <title>Using JSF Taglibs with Jetty Standalone</title>
      <para>If you want to use JSF with your webapp, you need to copy the jsf implementation Jar (whichever Jar
      contains the <filename>META-INF/*.tld</filename> files from your chosen JSF implementation) into <filename>
      $JETTY_HOME/lib/jsp</filename>. This is because the version of the JSP engine from Glassfish that we are using
      <emphasis>requires</emphasis> that the JSF tags are on the container's classpath, and <emphasis>not</emphasis> on
      the webapp's classpath.</para>
      <para>If you are using Jetty 7.x, add the JSF implementation Jar to the set of container Jars that are scanned
      for TLDs. The set of Jars is specified as a Java Pattern as the value of the <code>ContextAttribute
      org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern</code>. You must add a pattern that matches the name
      of the implementation Jar.</para>
      <para>You can set this <code>ContextAttribute</code> on just a particular webapp, or for all webapps.</para>
      <para>To set it on just one webapp, create or edit a [[Jetty/Feature/ContextDeployer|context xml]] //TODO xref//
      file that describes your webapp. For example, assuming the implementation Jar is called <code>
      javax.faces-2.1.6.jar</code>:</para>
      <informalexample>
        <programlisting language="xml">
<![CDATA[
<Configure class="org.eclipse.jetty.webapp.WebAppContext">

    <Call name="setAttribute">
      <Arg>org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern</Arg>
      <Arg>.*/.*javax.faces-[^/]*\.jar$|.*/.*jsp-api-[^/]*\.jar$|.*/.*jsp-[^/]*\.jar$|.*/.*taglibs[^/]*\.jar$</Arg>
    </Call>

</Configure>
]]>
        </programlisting>
      </informalexample>
      <para>If you're deploying via code, the equivalent is to call the <link
      xl:href="http://download.eclipse.org/jetty/stable-7/apidocs/org/eclipse/jetty/webapp/WebAppContext.html">
        <code>WebAppContext.setAttribute(String name, String value)</code>
      </link> method.</para>
      <para>If you want to use JSF with all of your webapps, <xref linkend="using-deployment-manager" />, edit
      <filename>$JETTY_HOME/etc/jetty-deploy.xml</filename>. For example, assuming the implementation Jar is named
      <code>javax.faces-2.1.6.jar</code>:</para>
      <informalexample>
        <programlisting language="xml">
<![CDATA[
 <New id="DeploymentManager" class="org.eclipse.jetty.deploy.DeploymentManager">
          <Set name="contexts">
            <Ref refid="Contexts" />
          </Set>
          <Call name="setContextAttribute">
            <Arg>org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern</Arg>
            <Arg>.*/.*javax.faces-[^/]*\.jar$|.*/.*jsp-api-[^/]*\.jar$|.*/.*jsp-[^/]*\.jar$|.*/.*taglibs[^/]*\.jar$</Arg>
          </Call>
]]>
        </programlisting>
      </informalexample>
      <para>If you are using Jetty 8.x you do not need to add this pattern because Servlet Spec. 3.0 uses a different
      method to find TLD descriptors.</para>
    </section>
    <section xml:id="using-jsf-taglibs-with-jetty-maven-plugin">
      <title>Using JSF Taglibs with Jetty Maven Plugin</title>
      <para>For Jetty versions prior to 7.5.0, your JSF Jars should be normal webapp dependencies. You do not need to
      do anything else to use Jetty with JSF.</para>
      <para>From versions 7.5.0 and later, the version of the JSP engine from Glassfish that we are using requires that
      the JSF tags be on the container classpath, and not on the webapp classpath, so you need to make your JSF Jars
      dependencies of the plugin and <emphasis>not</emphasis> the webapp itself. For example:</para>
      <informalexample>
        <programlisting language="xml">
<![CDATA[
   <plugin>
    <groupId>org.mortbay.jetty</groupId>
    <artifactId>jetty-maven-plugin</artifactId>
    <configuration>
       <webAppConfig>
         <contextPath>/${artifactId}</contextPath>
       </webAppConfig>
       <scanIntervalSeconds>5</scanIntervalSeconds>
    </configuration>
    <dependencies>
      <dependency>
        <groupId>com.sun.faces</groupId>
        <artifactId>jsf-api</artifactId>
        <version>2.0.8</version>
      </dependency>
      <dependency>
        <groupId>com.sun.faces</groupId>
        <artifactId>jsf-impl</artifactId>
        <version>2.0.8</version>
     </dependency>
    </dependencies>
  </plugin>
]]>
        </programlisting>
      </informalexample>
      <para>For versions 7.5.0 to 7.6.1, the Jetty Maven plugin does not scan the JSF dependency Jars for the TLDs
      containing the startup listeners. If you are using these versions, we recommend you upgrade to a more recent
      version. If this is not possible, you should define the relevant listener in your <filename>
      web.xml</filename>:</para>
      <para>For MyFaces:</para>
      <informalexample>
        <programlisting language="xml">
<![CDATA[
 <listener>
     <listener-class>org.apache.myfaces.webapp.StartupServletContextListener</listener-class>
 </listener>
]]>
        </programlisting>
      </informalexample>
      <para>For Mojarra:</para>
      <informalexample>
        <programlisting language="xml">
<![CDATA[
  <listener>
       <listener-class>com.sun.faces.config.ConfigureListener</listener-class>
    </listener>
]]>
        </programlisting>
      </informalexample>
      <para>For version 7.6.2 and later, the Jetty Maven plugin ensures that the TLDs containing the startup listeners
      from the two most common JSF implementations (Mojarra and MyFaces) are automatically detected.</para>
    </section>
  </section>
</section>
