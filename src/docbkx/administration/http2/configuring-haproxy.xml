<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2015 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section xml:id="http2-configuring-haproxy" version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">

    <title>Configuring HAProxy and Jetty</title>

    <para>Typical website deployments have Apache (or Nginx) configured as reverse proxy
        to talk to one or more backend Jetty instances.
        This configuration cannot be used for HTTP/2 because Apache does not yet support
        HTTP/2 (nor does Nginx).</para>
    <para><link xl:href="http://haproxy.org">HAProxy</link> is an open source solution
        that offers load balancing and proxying for TCP and HTTP based application, and
        can be used as a replacement for Apache (or Nginx) when these are used as reverse
        proxies, and has the major benefit that supports HTTP/2. It also offers load
        balancing and a ton of other features, so you can probably use it as a replacement
        for Apache (or Nginx).</para>
    <para>The deployment proposed here will have HAProxy play the role that Apache (or Nginx)
        usually do: to perform the TLS offloading (that is, decrypt and encrypt TLS)
        and then forwarding the now clear-text traffic to a
        backend Jetty server, speaking either HTTP/1.1 or HTTP/2.</para>
    <para>The instructions that follow are for Linux.</para>

    <section xml:id="http2-haproxy-install">
        <title>Installing HAProxy</title>

        <para>You will need HAProxy 1.5 or later, because it provides support for SSL
            and ALPN, both required by HTTP/2. Most Linux distributions have the HAProxy
            package available to be installed out of the box. For example on Ubuntu 15.04:</para>
        <informalexample>
            <programlisting language="shell">
$ sudo apt-get install haproxy
            </programlisting>
        </informalexample>
        <para>Alternatively you can download the HAProxy source code and build it on
            your environment, by following the README bundled with the HAProxy source
            code tarball.</para>
        <note>
            <para>HAProxy supports ALPN only if built with OpenSSL 1.0.2 or greater.
            Alternatively, HAProxy supports NPN when built with OpenSSL 1.0.1 or greater.
            You must upgrade OpenSSL if you have a version earlier than 1.0.1.</para>
            <para>Use <code>haproxy -vv</code> to know with which OpenSSL version HAProxy
            has been built.</para>
        </note>
    </section>

    <section xml:id="http2-haproxy-ssl">
        <title>Setup SSL for HAProxy</title>

        <para>HAProxy will perform the TLS decryption and encryption much more efficiently
            than a Java implementation.</para>
        <para>HAProxy will need a single file containing the X509 certificates and the private
            key, all in <link xl:href="https://en.wikipedia.org/wiki/X.509">PEM format</link>,
            with the following order:</para>
        <orderedlist>
            <listitem>
                <para>The site certificate; this certificate's Common Name refers to the
                site domain (for example: CN=*.webtide.com) and it's signed by Certificate
                Authority #1.</para>
            </listitem>
            <listitem>
                <para>The Certificate Authority #1 certificate; this certificate may be signed
                by Certificate Authority #2.</para>
            </listitem>
            <listitem>
                <para>The Certificate Authority #2 certificate; this certificate may be signed
                by Certificate Authority #3; and so on until the Root Certificate Authority.</para>
            </listitem>
            <listitem>
                <para>The Root Certificate Authority certificate.</para>
            </listitem>
            <listitem>
                <para>The private key corresponding to the site certificate.</para>
            </listitem>
        </orderedlist>

        <para>Let's use <code>keytool</code> to generate a self signed certificate:</para>
        <informalexample>
            <programlisting language="shell">
$ keytool -genkeypair -keyalg RSA -keystore keystore.p12 -storetype pkcs12 -storepass storepwd -ext SAN=DNS:domain.com
What is your first and last name?
[Unknown]:  *.domain.com
What is the name of your organizational unit?
[Unknown]:  Unit
What is the name of your organization?
[Unknown]:  Domain
What is the name of your City or Locality?
[Unknown]:  Torino
What is the name of your State or Province?
[Unknown]:  TO
What is the two-letter country code for this unit?
[Unknown]:  IT
Is CN=*.domain.com, OU=Unit, O=Domain, L=Torino, ST=TO, C=IT correct?
[no]:  yes
            </programlisting>
        </informalexample>
        <para>The above command will generate a self signed certificate and private key
            for <code>domain.com</code> and subdomains, stored
            in the <code>keystore.p12</code> file in PKCS#12 format. We need to extract
            the certificate and the private key in PEM format.</para>
        <para>To extract the certificate into <code>certificate.pem</code>:</para>
        <informalexample>
            <programlisting language="shell">
$ keytool -exportcert -keystore keystore.p12 -storetype pkcs12 -storepass storepwd -rfc -file certificate.pem
            </programlisting>
        </informalexample>
        <para>To export the private key into <code>private_key.pem</code>:</para>
        <informalexample>
            <programlisting language="shell">
$ openssl pkcs12 -in keystore.p12 -nodes -nocerts -out private_key.pem -passin pass:storepwd
            </programlisting>
        </informalexample>
        <para>At this point you just need to concatenate the two files into one, in the correct order:</para>
        <informalexample>
            <programlisting language="shell">
$ cat certificate.pem private_key.pem > domain.pem
            </programlisting>
        </informalexample>
        <para>The <code>domain.pem</code> file will be used later by HAProxy.</para>
    </section>

    <section xml:id="http2-haproxy-cfg">
        <title>HAProxy Configuration File</title>

        <para>Now we can setup <code>haproxy.cfg</code> to configure HAProxy.
            This is a minimal configuration:</para>
        <informalexample>
            <programlisting>
global
tune.ssl.default-dh-param 1024

defaults
timeout connect 10000ms
timeout client 60000ms
timeout server 60000ms

frontend fe_http
mode http
bind *:80
# Redirect to https
redirect scheme https code 301

frontend fe_https
mode tcp
bind *:443 ssl no-sslv3 crt domain.pem ciphers TLSv1.2 alpn h2,http/1.1
default_backend be_http

backend be_http
mode tcp
server domain 127.0.0.1:8282
            </programlisting>
        </informalexample>
        <para>The HAProxy configuration file works in the following way.
            The <code>fe_http</code> front-end accepts connections on port 80
            and redirects them to use the <code>https</code> scheme.</para>
        <para>The <code>fe_https</code> front-end accepts connections on port
            443 and it is where the TLS decryption/encryption happens.
            You must specify the path to the PEM file containing
            the TLS key material (the <code>crt domain.pem</code> part), the
            ciphers that are suitable for HTTP/2 (the <code>ciphers TLSv1.2</code>
            part), and the ALPN (or NPN if you are using old OpenSSL versions)
            protocols supported (the <code>alpn h2,http/1.1</code> part).
            This front-end then forwards the now decrypted bytes to the
            back-end in <code>mode tcp</code>. The <code>mode tcp</code>)
            means that HAProxy will not try to interpret the bytes
            as HTTP/1.1 but just opaquely forward them to the back-end.</para>
        <para>The <code>be_http</code> back-end will forward (again in
            <code>mode tcp</code>) the clear-text bytes to a Jetty connector
            that talks clear-text HTTP/2 and HTTP/1.1 on port 8282.</para>
    </section>

    <section xml:id="http2-haproxy-jetty">
        <title>Setup Jetty for HTTP/2 and HTTP/1.1</title>

        <para>The Jetty setup follows the usual steps of having Jetty installed
            in the <code>JETTY_HOME</code> directory, creating a <code>JETTY_BASE</code>
            directory and initializing it using Jetty's command line tools.
            You must enable the <code>http2c</code> module, that is the module that
            speaks clear-text HTTP/2. Since the <code>http2c</code> module
            depends on the <code>http</code> module, the <code>http</code>
            module will be enabled transitively, and the final setup will
            therefore support both HTTP/2 and HTTP/1.1 in clear text.</para>
        <para>Additionally, you will also enable the <code>deploy</code>
            module to be able to deploy a sample web application:</para>
        <informalexample>
            <programlisting language="shell">
$ JETTY_BASE=haproxy-jetty-http2
$ mkdir $JETTY_BASE
$ cd $JETTY_BASE
$ java -jar $JETTY_HOME/start.jar --add-to-start=http2c,deploy
            </programlisting>
        </informalexample>
        <para>Now let's deploy a demo web application and start Jetty:</para>
        <informalexample>
            <programlisting language="shell">
$ cd $JETTY_BASE
$ cp $JETTY_HOME/demo-base/webapps/async-rest.war $JETTY_BASE/webapps/
$ java -jar $JETTY_HOME/start.jar jetty.http.host=127.0.0.1 jetty.http.port=8282
            </programlisting>
        </informalexample>
        <para>Now you can browse <link xl:href="https://domain.com/async-rest">https://domain.com/async-rest</link>
            (replace <code>domain.com</code> with your own domain, or with
            <code>localhost</code>, to make this example work).</para>
        <note>
            <para>You want the Jetty connector that listens on port 8282 to be
                available only to HAProxy, and not to remote clients.</para>
            <para>For this reason, you want to specify the <code>jetty.http.host</code>
                property on the command line (or in <code>start.ini</code> to make
                this setting persistent) to bind the Jetty connector only on the
                loopback interface (127.0.0.1), making it available to HAProxy but
                not to remote clients.</para>
            <para>If your Jetty instance runs on a different machine and/or on a
                different (sub)network, you may want to adjust both the back-end
                section of the HAProxy configuration file and the
                <code>jetty.http.host</code> property to match accordingly.</para>
        </note>
        <para>Browsers supporting HTTP/2 will connect to HAProxy, which will decrypt
            the traffic and send it to Jetty. Likewise, HTTP/1.1 clients will connect
            to HAProxy, which will decrypt the traffic and send it to Jetty.</para>
        <para>The Jetty connector, configured with the <code>http2c</code> module
            (and therefore transitively with the <code>http</code> module) is able
            to distinguish whether the incoming bytes are HTTP/2 or HTTP/1.1 and
            will handle the request accordingly.</para>
        <para>The response is relayed back to HAProxy, which will encrypt it and
            send it back to the remote client.</para>
        <para>This configuration offers you efficient TLS offloading, HTTP/2 support
            and transparent fallback to HTTP/1.1 for clients that don't support
            HTTP/1.1.</para>
    </section>

</section>
