<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="quickstart-webapp" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Quickstart Webapps</title>

  <para>The auto discovery features of the Servlet specification can make
  deployments slow and uncertain. Auto discovery of Web Application
  configuration can be useful during the development of a webapp as it allows
  new features and frameworks to be enabled simply by dropping in a jar file.
  However, for deployment, the need to scan the contents of many jars can have
  a significant impact of the start time of a webapp.</para>

  <para>From Jetty release 9.2.0.v20140526, we have included the quickstart
  module that allows a webapp to be pre-scanned and preconfigured. This means
  that all the scanning is done prior to deployment and all configuration is
  encoded into an effective <filename>web.xml</filename>, called
  <filename>WEB-INF/quickstart-web.xml</filename>, which can be inspected to
  understand what will be deployed before deploying. Not only does the
  quickstart-web.xml contain all the discovered Servlets, Filters and
  Constraints, but it also encodes as context parameters all
  discovered:</para>

  <itemizedlist>
    <listitem>
      <para>ServletContainerInitializers</para>
    </listitem>

    <listitem>
      <para>HandlesTypes classes</para>
    </listitem>

    <listitem>
      <para>Taglib Descriptors</para>
    </listitem>
  </itemizedlist>

  <para>With the quickstart mechanism, jetty is able to entirely bypass all
  scanning and discovery modes and start a webapp in a predictable and fast
  way. Tests have shown that webapps that took many seconds to scan and deploy
  can now be deployed in a few hundred milliseconds.</para>

  <section>
    <title>Setting up Quickstart</title>

    <para>To use quickstart the module has to be available to your jetty
    instance. In a maven project this is done just by adding a dependency on
    the artifact ID jetty-quickstart or with a standard jetty distribution you
    can run the command:</para>

    <screen><![CDATA[$ java -jar $JETTY_HOME/start.jar --add-to-startd=quickstart]]></screen>

    <para>Also the webapps you deploy need to be instances of <link
    xl:href="@JDURL@/org/eclipse/jetty/quickstart/QuickStartWebApp.html"><literal>org.eclipse.jetty.quickstart.QuickStartWebApp</literal></link>
    rather than the normal
    <literal>org.eclipse.jetty.webapp.WebAppContext</literal>. If your web
    application already has a <filename>webapps/myapp.xml</filename> file,
    then you can simply change the class in the Configure element, otherwise
    you can create an <filename>webapps/myapp.xml</filename> file as
    follows:</para>

    <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure_9_0.dtd">
<Configure class="org.eclipse.jetty.quickstart.QuickStartWebApp">
  <Set name="war"><Property name="jetty.webapps" default="."/>/benchmark.war</Set>
  <Set name="contextPath">/benchmark</Set>
  <Set name="autoPreconfigure">true</Set>
</Configure>]]></programlisting>
  </section>

  <section>
    <title>Preconfiguring the web application</title>

    <para>If the QuickStateWebApp method setAutoPreconfigure(true) is called
    (see example in myapp.xml above), then the first time the webapp is
    deployed a <filename>WEB-INF/quickstart-web.xml</filename> file will be
    generated that contains the effective <filename>web.xml</filename> for all
    the discovered configuration. On subsequent deployments, all the discovery
    steps are skipped and the <filename>quickstart-web.xml</filename> is used
    directly to configure the web Application.</para>

    <para>It is also possible to preconfigure a war file manually by running
    the class <link
    xl:href="@JDURL@/org/eclipse/jetty/quickstart/PreconfigureQuickStartWar.html">org.eclipse.jetty.quickstart.PreconfigureQuickStartWar</link>
    simply with the jetty-all-uber (aggregate) jar:</para>

    <screen><![CDATA[$ java -cp jetty-all-@project.version@-uber.jar org.eclipse.jetty.quickstart.PreconfigureQuickStartWar myapp.war]]></screen>

    <para>This will create the <filename>quickstart-web.xml</filename> file
    before the first deployment. Note that this can also be a good debugging
    tool for discovered configuration and if run with debug turned on the
    origin of every element is included in the
    <filename>quickstart-web.xml</filename> file. Run the class with no
    arguments to see other options for running it.</para>
  </section>

  <section>
    <title>Avoiding TLD Scans with precompiled JSPs</title>

    <para>Of course precompiling JSPs is an excellent way to improve the start
    time of a web application. Since jetty 9.2.0, the apache Jasper JSP
    implementation has been used and has been augmented to allow the TLD scan
    to be skipped. This can be done by adding a context-param to the
    <filename>web.xml</filename> file (this is done automatically by the Jetty
    Maven JSPC plugin):</para>

    <programlisting><![CDATA[<context-param>
  <param-name>org.eclipse.jetty.jsp.precompiled</param-name>
  <param-value>true</param-value>
</context-param>]]></programlisting>
  </section>

  <section>
    <title>Bypassing start.jar</title>

    <para>The jetty start.jar mechanism is a very powerful and flexible
    mechanism for constructing a classpath and executing a configuration
    encoded in jetty XML format. However, this mechanism does take some time
    to build the classpath. The start.jar mechanism can be bypassed by using
    the <command>â€“dry-run</command> option to generate and reuse a complete
    command line to start jetty at a later time:</para>

    <screen><![CDATA[$ RUN=$(java -jar $JETTY_HOME/start.jar --dry-run)
$ eval $RUN]]></screen>

    <para>Note that <command>--dry-run</command> may create a properties file
    in the temp directory and include it on the generated command line. If so,
    then a copy of the temporary properties file should be taken and the
    command line updated with it's new persistent location.</para>
  </section>
</section>
