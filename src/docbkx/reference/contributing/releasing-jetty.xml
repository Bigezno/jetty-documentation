<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="releasing-jetty" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Releasing Jetty</title>

  <para>There are a number of steps to releasing jetty. It is not just limited
  to running a couple of maven commands and then moving onto bigger and better
  things. There are a number of process related issues once the fun maven bits
  have been completed.</para>

  <section>
    <title>Jetty Release Notes</title>

    <para>This release script is for jetty-9 (to release jetty-7 or jetty-8
    see older documentation).</para>

    <orderedlist>
      <listitem>
        <para>Pick your version identification strings.</para>

        <para>These follow a strict format and will be used when prompted
        during step <xref linkend="prepare-release-step"/> below.</para>

        <screen>Release Version                : 9.0.0.v20130322  (v[year][month][day])
Next Development Version       : 9.0.1-SNAPSHOT
Tag Name                       : jetty-9.9.0.v20130322        </screen>
      </listitem>

      <listitem>
        <para>We use the 'release-9' branch to avoid problems with other
        developers actively working on the master branch.</para>

        <screen>// Get all of the remotes
$ git pull origin
// Create a local tracking branch (if you haven't already)
$ git branch --track release-9 refs/remotes/origin/release-9
// Check out your local tracking branch.
$ git checkout release-9
// Merge from master into the branch (this becomes your point in time
// from master that you will be releasing from)
$ git merge --no-ff master</screen>
      </listitem>

      <listitem>
        <para>Update the VERSION.txt with changes from the git logs, this
        populates the resolves issues since the last release.</para>

        <screen>$ mvn -N -Pupdate-version        </screen>
      </listitem>

      <listitem>
        <para>Edit the VERSION.txt file to set the 'Release Version' at the
        top alongside the Date of this release.</para>

        <screen>$ vi VERSION.txt        </screen>
      </listitem>

      <listitem>
        <para>Make sure everything is commit'd and pushed to
        git.eclipse.org</para>

        <screen>$ git commit -m "Updating VERSION.txt top section" VERSION.txt
$ git push origin release-9        </screen>
      </listitem>

      <listitem xml:id="prepare-release-step">
        <para>Prepare the Release</para>

        <para>NOTE: This step updates the &lt;version&gt; elements in the
        pom.xml files, does a test build with these new versions, and then
        commits the pom.xml changes to your local git repo.  The <code>eclipse-release</code> profile is required on the prepare in order to bring in the jetty aggregates as that profile defines a module which is ignored otherwise.</para>

        <screen><![CDATA[
          $ mvn release:prepare -DreleaseVersion=9.0.0.v20130322 \
                      -DdevelopmentVersion=9.0.1-SNAPSHOT \
                      -Dtag=jetty-9.0.0.v20130322 \
                      -Peclipse-release        
                      ]]>
        </screen>
      </listitem>

      <listitem>
        <para>Perform the Release</para>

        <para>NOTE: This step performs the release and deploys it to a
        oss.sonatype.org staging repository.</para>

        <screen>$ mvn release:perform</screen>
      </listitem>

      <listitem>
        <para>Set up files for next development versions.</para>

        <para>Edit <filename>VERSION.txt</filename> for 'Next Development
        Version' at the top. Do not date this line.</para>

        <para>Make sure everything is commit'd and pushed to
        git.eclipse.org</para>

        <screen>$ vi VERSION.txt
$ git commit -m "Updating VERSION.txt top section" VERSION.txt
$ git push origin release-9</screen>
      </listitem>

      <listitem>
        <para>Close the staging repository on oss.sonatype.org</para>
      </listitem>

      <listitem>
        <para>Announce stage to the mailing list for testing.</para>
      </listitem>

      <listitem>
        <para>Once the staged repository has been approved by the rest of the
        committers.</para>

        <orderedlist>
          <listitem>
            <para>Release the staging repository to maven central on
            oss.sonatype.org</para>
          </listitem>

          <listitem>
            <para>Merge back the changes in release-9 to master<screen>$ git checkout master
$ git merge --no-ff release-9
$ git push origin master</screen></para>
          </listitem>
        </orderedlist>
      </listitem>
    </orderedlist>
  </section>

  <section>
    <title>Building and Deploying Aggregate Docs</title>

    <para>Define the jetty.eclipse.website server entry in your
    .m2/settings.xml file. You'll need to have access to the dev.eclipse.org
    machine to perform these actions. If you don't know if you have access to
    this then you probably don't and will need to ask a project leader for
    help.</para>

    <para>To build and deploy the aggregate javadoc and jxr bits:</para>

    <screen>cd target/checkout
mvn -Paggregate-site javadoc:aggregate jxr:jxr
mvn -N site:deploy    </screen>

    <para>This will generate the aggregate docs and deploy them to the
    <filename>/home/www/jetty/&lt;project version&gt;/jetty-project</filename>
    directory on download.eclipse.org. The last step is to ssh to that machine
    and adjust the placement of the apidocs and xref directories to remove the
    jetty-project folder from the url so that we maintain a clean and
    consistent api url scheme.</para>

    <screen>ssh $COMMITTER_ID@dev.eclipse.org
cd /home/data/httpd/download.eclipse.org/jetty/&lt;VERSION&gt;
mv jetty-project/apidocs .
mv jetty-project/xref .
rmdir jetty-project    </screen>

    <para>The end result should be api documents accessible from
    http://download.eclipse.org/jetty/&lt;project version&gt;/api-docs and
    http://download.eclipse.org/jetty/&lt;project version&gt;/xref</para>
  </section>

  <section>
    <title>Deploying Distribution Files</title>

    <para>Since we also provide alternative locations to download jetty
    distributions we need to copy these into place. There are a couple of
    scripts that will take care of this although they need to be localized to
    your particular execution environment and you need to have authorization
    to put stuff where it needs to go. These scripts are located at: <link
    xl:href="http://git.eclipse.org/c/jetty/org.eclipse.jetty.admin.git/tree/release-scripts">
    http://git.eclipse.org/c/jetty/org.eclipse.jetty.admin.git/tree/release-scripts</link>.
    Once these are setup you can deploy a release to eclipse and codehaus with
    the following incantation.</para>

    <screen>$ ./promote-to-eclipse.sh 9.0.0.v20130322
$ ./promote-to-codehaus.sh 9.0.0.v20130322 9.0.0    </screen>

    <para>Each of these scripts will download all of the relevant files from
    maven central and then copy them into the correct location on eclipse and
    codehaus infrastructure. On the eclipse side of it they will also adjust
    the documentation links if they remain broken as well as regenerate all of
    the html files on the eclipse download site.</para>
  </section>

  <section>
    <title>Updating Stable Links</title>

    <para>Since we are not allowed to have symbolic links on the download site
    we have to log into the machine manually and remove the previous stable
    directory and update it with a new release. Maintaining the conventions we
    use on the site will allow all 'stable' links to be stable and not needed
    to update to the latest major Jetty build version:</para>

    <screen>$ ssh &lt;user&gt;@build.eclipse.org
$ cd ~downloads/jetty/
$ rm -Rf stable-9
$ cp -r &lt;version&gt; stable-9
$ ./index.sh   </screen>

    <para>This needs to be done for all Eclipse Jetty releases (regardless of
    version). In addition we have to work to reduce the footprint of jetty on
    the primary eclipse download resources so we want to move older releases
    to the eclipse archive site.</para>

    <screen>$ cd ~/downloads/jetty
$ mv &lt;old release&gt; /home/data/httpd/archive.eclipse.org/jetty/    </screen>
  </section>
</section>
