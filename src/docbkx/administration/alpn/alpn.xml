<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0" xml:id="alpn" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
        >
  <section xml:id="alpn-introduction">
    <title>Introducing ALPN</title>

    <para>The development of new web protocols such as SPDY and HTTP/2
    raised the need of protocol negotiation within a Transport Layer
    Security (TLS) handshake.
    Two protocol negotiation solutions have been proposed: an older one,
    called NPN (see <xref linkend="npn-chapter" />) and a newer one, called
    <link xl:href="http://tools.ietf.org/html/draft-ietf-tls-applayerprotoneg">ALPN</link>
    (Application Layer Protocol Negotiation).</para>

    <para>ALPN is going to replace NPN very soon, and major browsers already
    support ALPN, as well as major servers such as Jetty.</para>

    <para>The Jetty project provides an implementation of the TLS
    extension for ALPN for OpenJDK 7 and OpenJDK 8.
    ALPN allows the application layer to negotiate which protocol
    to use over the secure connection.</para>

    <para>Any protocol can be negotiated by ALPN within a TLS connection.
    The protocols that are most commonly negotiated are HTTP/2 (for browsers
    that support it) and, historically, SPDY.
    The ALPN implementation is therefore not HTTP/2 or SPDY specific in any way.
    Jetty's ALPN implementation, although hosted
    under the umbrella of the Jetty project, is independent of Jetty (the
    Servlet Container); you can use the ALPN implementation in any other Java
    network server.</para>
  </section>

  <section xml:id="alpn-starting">
    <title>Starting the JVM</title>

    <para>To enable ALPN support, start the JVM as follows:</para>

    <informalexample>
      <programlisting language="plain"><![CDATA[java -Xbootclasspath/p:<path_to_alpn_boot_jar> ...]]></programlisting>
    </informalexample>

    <para>where <filename>path_to_alpn_boot_jar</filename> is the path on the
    file system for the ALPN Boot Jar file, for example, one at the Maven
    coordinates <code>org.mortbay.jetty.alpn:alpn-boot</code>.</para>

    <section xml:id="alpn-osgi">
      <title>Starting in OSGi</title>

      <para>To use ALPN in an OSGi environment, in addition to putting the ALPN
      jar on the boot classpath for the container, you will also need to
      deploy the jetty-osgi-alpn jar. This jar contains a Fragment-Host
      directive that ensures the ALPN classes will be available from the system
      bundle.</para>

      <para>You can download the
      <link xl:href="http://central.maven.org/maven2/org/eclipse/jetty/osgi/jetty-osgi-alpn/">jetty-osgi-alpn jar</link>
      from Maven Central.
      </para>
    </section>
  </section>

  <section xml:id="alpn-understanding">
    <title>Understanding the ALPN API</title>

    <para>Applications need to interact with ALPN TLS extension protocol
    negotiations. For example, server applications need to know whether the
    client supports ALPN, and client applications needs to know whether the
    server supports ALPN.</para>

    <para>To implement this interaction, Jetty's ALPN implementation provides
    an API to applications, hosted at Maven coordinates
    <code>org.eclipse.jetty.alpn:alpn-api</code>. You need to declare this dependency as
    provided, because the <code>alpn-boot</code> Jar already includes it (see the previous
    section), and it is therefore available from the boot classpath.</para>

    <para>The API consists of a single class,
    <code>org.eclipse.jetty.alpn.ALPN</code>, and applications need to
    register instances of <code>SSLSocket</code> or <code>SSLEngine</code>
    with a <code>ClientProvider</code> or <code>ServerProvider</code>
    (depending on whether the application is a client application or server
    application). Refer to <code>ALPN</code> Javadocs and to the examples below
    for further details about client and server provider methods.</para>
  </section>

  <section xml:id="alpn-client-example">
    <title>Client Example</title>

    <example label="Client Example">
      <programlisting language="java"><![CDATA[
SSLContext sslContext = ...;
final SSLSocket sslSocket = (SSLSocket)context.getSocketFactory().createSocket("localhost", server.getLocalPort());

ALPN.put(sslSocket, new ALPN.ClientProvider()
{
    @Override
    public boolean supports()
    {
        return true;
    }

    @Override
    public List<String> protocols()
    {
        return Arrays.asList("h2", "http/1.1");
    }

    @Override
    public void unsupported()
    {
        ALPN.remove(sslSocket);
    }

    @Override
    public void selected(String protocol)
    {
        ALPN.remove(sslSocket);
        System.out.println("Protocol Selected is: " + protocol);
    }
});
]]></programlisting>
    </example>

    <para>The ALPN implementation calls
    <code>ALPN.ClientProvider</code> methods <code>supports()</code>,
    <code>protocols()</code>, <code>unsupported()</code> and
    <code>selected(String)</code>,
    so that the client application can:</para>

    <itemizedlist>
      <listitem>
        <para>decide whether to support ALPN.</para>
      </listitem>

      <listitem>
        <para>provide the protocols supported.</para>
      </listitem>

      <listitem>
        <para>know whether the server supports ALPN.</para>
      </listitem>

      <listitem>
        <para>know the protocol chosen by the server.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="alpn-server-example">
    <title>Server Example</title>

    <para>The example for SSLEngine is identical, and you just need to replace
    the SSLSocket instance with an SSLEngine instance.</para>

    <example label="Server Example">
      <programlisting language="java"><![CDATA[
final SSLSocket sslSocket = ...;
ALPN.put(sslSocket, new ALPN.ServerProvider()
{
    @Override
    public void unsupported()
    {
        ALPN.remove(sslSocket);
    }

    @Override
    public String select(List<String> protocols);
    {
        ALPN.remove(sslSocket);
        return protocols.get(0);
    }
});
]]></programlisting>
    </example>

    <para>The ALPN implementation calls
    <code>ALPN.ServerProvider</code> methods <code>unsupported()</code>,
    and <code>select(List&lt;String&gt;),</code> so that the
    server application can:</para>

    <itemizedlist>
      <listitem>
        <para>know whether the client supports ALPN.</para>
      </listitem>

      <listitem>
        <para>select one of the protocols the client supports.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="alpn-implementation">
    <title>Implementation Details</title>

    <para>It is important that implementations of <code>ALPN.ServerProvider</code>
    and <code>ALPN.ClientProvider</code> remove the <code>sslSocket</code>
    or <code>sslEngine</code> when the negotiation is complete, like shown in
    the examples above.</para>

    <para>Failing to do so will cause a memory leak.</para>
  </section>

  <section xml:id="alpn-tests">
    <title>Unit Tests</title>

    <para>You can write and run unit tests that use the ALPN implementation.
    The solution that we use with Maven is to specify an additional command
    line argument to the Surefire plugin:</para>

    <informalexample>
      <programlisting language="xml"><![CDATA[
<project>

<properties>
    <alpn-version>1.1.1.v20121030</alpn-version>
</properties>

<build>
    <plugins>
        <plugin>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
                <argLine>
                    -Xbootclasspath/p:${settings.localRepository}/org/mortbay/jetty/alpn/alpn-boot/${alpn-version}/alpn-boot-${alpn-version}.jar
                </argLine>
            </configuration>
        </plugin>

        ...

    </plugins>
</build>

...

</project>
]]></programlisting>
    </informalexample>
  </section>

  <section xml:id="alpn-debugging">
    <title>Debugging</title>

    <para>You can enable debug logging for the ALPN implementation in this
    way:</para>

    <screen><![CDATA[ALPN.debug = true;]]></screen>

    <para>Since the ALPN class is in the boot classpath, we chose not
    to use logging libraries because we do not want to override application
    logging library choices; therefore the logging is performed directly on
    <code>System.err.</code></para>
  </section>

  <section xml:id="alpn-license-details">
    <title>License Details</title>

    <para>The ALPN implementation relies on modification of a few OpenJDK
    classes and on a few new classes that need to live in the
    <filename>sun.security.ssl</filename> package. These classes are released
    under the same GPLv2+exception license of OpenJDK.</para>

    <para>The ALPN class and its nested classes are released under same license as the
    classes of the Jetty project.</para>
  </section>

  <section xml:id="alpn-versions">
    <title>Versions</title>

    <para>The ALPN implementation, relying on modifications of OpenJDK classes,
    updates every time there are updates to the modified OpenJDK
    classes.</para>

    <table frame="all" xml:id="alpn-openjdk-versions">
      <title>ALPN vs. OpenJDK versions</title>

      <tgroup align="left" cols="2" colsep="1" rowsep="1">
        <colspec colname="alpn"/>

        <colspec colname="openjdk"/>

        <thead>
          <row>
            <entry>OpenJDK version</entry>
            <entry>ALPN version</entry>
          </row>
        </thead>

        <tbody>
          <row>
              <entry>1.7.0u40</entry>
              <entry>7.1.0.v20141016</entry>
          </row>
          <row>
              <entry>1.7.0u45</entry>
              <entry>7.1.0.v20141016</entry>
          </row>
          <row>
              <entry>1.7.0u51</entry>
              <entry>7.1.0.v20141016</entry>
          </row>
          <row>
              <entry>1.7.0u55</entry>
              <entry>7.1.0.v20141016</entry>
          </row>
          <row>
              <entry>1.7.0u60</entry>
              <entry>7.1.0.v20141016</entry>
          </row>
          <row>
              <entry>1.7.0u65</entry>
              <entry>7.1.0.v20141016</entry>
          </row>
          <row>
              <entry>1.7.0u67</entry>
              <entry>7.1.0.v20141016</entry>
          </row>
          <row>
              <entry>1.7.0u71</entry>
              <entry>7.1.2.v20141202</entry>
          </row>
          <row>
              <entry>1.7.0u72</entry>
              <entry>7.1.2.v20141202</entry>
          </row>
          <row>
              <entry>1.7.0u75</entry>
              <entry>7.1.3.v20150130</entry>
          </row>
          <row>
              <entry>1.7.0u76</entry>
              <entry>7.1.3.v20150130</entry>
          </row>
          <row>
              <entry>1.7.0u79</entry>
              <entry>7.1.3.v20150130</entry>
          </row>
          <row>
              <entry>1.7.0u80</entry>
              <entry>7.1.3.v20150130</entry>
          </row>
          <row>
              <entry>1.8.0</entry>
              <entry>8.1.0.v20141016</entry>
          </row>
          <row>
              <entry>1.8.0u05</entry>
              <entry>8.1.0.v20141016</entry>
          </row>
          <row>
              <entry>1.8.0u11</entry>
              <entry>8.1.0.v20141016</entry>
          </row>
          <row>
              <entry>1.8.0u20</entry>
              <entry>8.1.0.v20141016</entry>
          </row>
          <row>
              <entry>1.8.0u20</entry>
              <entry>8.1.0.v20141016</entry>
          </row>
          <row>
              <entry>1.8.0u25</entry>
              <entry>8.1.2.v20141202</entry>
          </row>
          <row>
              <entry>1.8.0u31</entry>
              <entry>8.1.3.v20150130</entry>
          </row>
          <row>
              <entry>1.8.0u40</entry>
              <entry>8.1.3.v20150130</entry>
          </row>
          <row>
              <entry>1.8.0u45</entry>
              <entry>8.1.3.v20150130</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section xml:id="alpn-build">
    <info>
      <title>How to build ALPN</title>
    </info>

    <para>This section is for Jetty developers that need to update the ALPN
    implementation with the OpenJDK versions.</para>

    <para>Clone the OpenJDK repository with the following command:</para>

    <screen><![CDATA[
$ hg clone http://hg.openjdk.java.net/jdk7u/jdk7u jdk7u # OpenJDK 7
$ hg clone http://hg.openjdk.java.net/jdk8u/jdk8u jdk8u # OpenJDK 8
$ cd !$
$ ./get_source.sh
  ]]></screen>

    <para>To update the source to a specific tag, use the following
    command:</para>

    <screen><![CDATA[
$ ./make/scripts/hgforest.sh update <tag-name>
  ]]></screen>

    <para>The list of OpenJDK tags can be obtained from these pages:
    <link xl:href="http://hg.openjdk.java.net/jdk7u/jdk7u/tags">OpenJDK 7</link> /
    <link xl:href="http://hg.openjdk.java.net/jdk8u/jdk8u/tags">OpenJDK 8</link>.</para>

    <para>Then you need to compare and incorporate the OpenJDK source changes
    into the modified OpenJDK classes at the <link
    xl:href="https://github.com/jetty-project/jetty-alpn">ALPN GitHub
    Repository</link>, branch <code>openjdk7</code> for OpenJDK 7 and
    branch <code>master</code> for OpenJDK 8.</para>
  </section>
</section>
