<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
xml:id="quickstart-config-how" xmlns="http://docbook.org/ns/docbook"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
xmlns:xl="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg"
xmlns:ns2="http://www.w3.org/1998/Math/MathML" xmlns:ns="http://docbook.org/ns/docbook">
  <title>How to Configure Jetty</title>
  <para>To understand Jetty configuration, you need to understand the "How" and the "What". This section covers how to
  configure Jetty in terms of what mechanisms exist to perform configuration. The <link
  linkend="quickstart-config-what">next section</link> gives an overview of the action components and fields that you
  can configure with these mechanisms.</para>
  <section>
    <title>Jetty POJO Configuration</title>
    <para>The main components of Jetty are simply Plain Old Java Objects (<link
    xl:href="http://en.wikipedia.org/wiki/Plain_Old_Java_Object">POJOs</link>); the process of configuring Jetty is
    mostly the process of instantiating, assembling and setting fields on the Jetty POJOs. You can achieve this either
    by:</para>
    <itemizedlist>
      <listitem>
        <para>Writing Java code to directly instantiate and assemble Jetty objects. This is referred to as <xref
        linkend="embedding-jetty" />.</para>
      </listitem>
      <listitem>
        <para>Using Jetty XML configuration, which is an <link
        xl:href="http://en.wikipedia.org/wiki/Inversion_of_Control">Inversion of Control (IoC)</link> framework, to
        instantiate and assemble Jetty objects. as XML objects</para>
      </listitem>
      <listitem>
        <para>Using a third party <link xl:href="http://en.wikipedia.org/wiki/Inversion_of_Control">
        IoC</link> framework like <link xl:href="http://en.wikipedia.org/wiki/Spring_Framework">Spring</link>, to
        instantiate and assemble Jetty objects as Spring beans.</para>
      </listitem>
    </itemizedlist>
    <para>Because the main Jetty configuration is done by IoC, the <link
    xl:href="http://download.eclipse.org/jetty/stable-9/apidocs/">Jetty API documentation</link> is the ultimate
    configuration reference.</para>
  </section>
  <section>
    <title>Other Configuration Files</title>
    <para>Some Jetty Components do have configuration files that are not IoC.</para>
    <variablelist>
      <varlistentry>
        <term>
          <filename>web.xml</filename>
        </term>
        <listitem>
          <para>The <link xl:href="http://en.wikipedia.org/wiki/Servlet">Servlet</link> Specification defines the <link
          xl:href="http://en.wikipedia.org/wiki/Web.xml">
            <filename>web.xml</filename>
          </link> deployment descriptor that defines and configures the filters, servlets and resources a <link
          xl:href="http://en.wikipedia.org/wiki/Web_application">web application</link> uses. The Jetty WebAppContext
          component uses this XML format to:</para>
          <itemizedlist>
            <listitem>
              <para>Set up the default configuration of a web application context.</para>
            </listitem>
            <listitem>
              <para>Interpret the application-specific configuration supplied with a web application in the <filename>
              WEB-INF/web.xml</filename> file.</para>
            </listitem>
            <listitem>
              <para>Interpret descriptor fragments included in the <filename>META-INF</filename> directory of Jar files
              within <filename>WEB-INF/lib</filename></para>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Property Files</term>
        <listitem>
          <para>Standard <link xl:href="http://en.wikipedia.org/wiki/Java_properties">Java property files</link> are
          also used for Jetty configuration in several ways:</para>
          <itemizedlist>
            <listitem>
              <para>To parameterize Jetty IoC XML via the use of the Property element.</para>
            </listitem>
            <listitem>
              <para>To configure the default logging mechanism (StdErrLog). You can also plug in other logging
              frameworks, and also use property files (for example, log4j).</para>
            </listitem>
            <listitem>
              <para>As a simple database for login usernames and credentials.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <filename>Start.ini</filename>
        </term>
        <listitem>
          <para>The Jetty Start mechanism uses an <filename>ini</filename> file to hold command line arguments that
          would otherwise have to be passed to the command to start Jetty.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>Example Jetty Configuration</title>
    <para>An example of a Jetty server assembled and configured in embedded style is:</para>
    <programlisting language="rjava">
      <filename>
      http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/plain/examples/embedded/src/main/java/org/eclipse/jetty/embedded/ExampleServer.java</filename>
    </programlisting>
    <para>You can achieve the exact same server configuration with the Jetty XML file:</para>
    <programlisting language="fetch">
      <filename>
      http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/plain/examples/embedded/src/main/resources/exampleserver.xml</filename>
    </programlisting>
    <para>In practise, most commonly used Jetty features have XML files that are included in the standard distribution
    in the <filename>etc</filename> directory. Thus configuring Jetty is often a matter of just editing existing XML
    files and altering the configuration values within them.</para>
  </section>
  <section>
    <title>Configuring the Jetty Distribution</title>
    <para>With a normal distribution of Jetty, the configuration mechanisms introduced above are typically used as
    follows:</para>
    <variablelist>
      <varlistentry>
        <term>
          <filename>$JETTY_HOME/start.ini</filename>
        </term>
        <listitem>
          <para>Used to enable/disable Jetty features by setting OPTIONS that setup the classpath, and declaring which
          configuration files to include on the command line.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <filename>$JETTY_HOME/lib/*.xml</filename>
        </term>
        <listitem>
          <para>Jetty IoC XML files that configure individual features; for example <filename>jetty.xml</filename> (for
          the server), <filename>jetty-http.xml,</filename> <filename>jetty-https.xml,</filename> <filename>
          jetty-jmx.xml</filename>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <filename>$JETTY_HOME/webapps/*</filename>
        </term>
        <listitem>
          <para>The directory in which standard WAR files, web applications and context IoC XML files are
          deployed.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</section>
