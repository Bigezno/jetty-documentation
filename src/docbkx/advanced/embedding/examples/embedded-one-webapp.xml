<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0" xml:id="embedded-one-webapp"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1998/Math/MathML"
         xmlns:ns4="http://www.w3.org/2000/svg"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Web Application</title>
  <para>
    This example shows how to deploy a simple webapp with an embedded instance of jetty.  This is useful when you want to manage the lifecycle of a server programmatically, either within a production application or as a simple way to deploying and debugging a full scale application deployement.  In many ways it is easier then traditional deployment since you control the classpath yourself, making this easy to wire up in a test case in maven and issue requests using your favorite http client library (like our Jetty client found in <xref linkend="http-client"/>).
  </para>
  <example>
    <title><link xl:href="@GITURL@/examples/embedded/src/main/java/org/eclipse/jetty/embedded/OneWebApp.java">OneWebApp.java</link></title> 
  <programlisting language="rjava">
    <filename>
      @GITURL@/examples/embedded/src/main/java/org/eclipse/jetty/embedded/OneWebApp.java
    </filename>
  </programlisting>
  </example>
  <section>
    <title>Walkthrough</title>
    <variablelist>
      <varlistentry>
        <term>Line 12: Create Server Object</term>
        <listitem>
          <para>
            Create a basic jetty server object that will listen on port 8080.  Note that if you set this to port 0 then a randomly available port will be assigned that you can either look in the logs for the port, or programmatically obtain it for use in test cases.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Line 13 - 15: Create and Configure WebAppContext</term>
        <listitem>
          <para>
            The WebAppContext is the entity that controls the environment in which a web application lives and breathes.  In this example the context path is being set to <code>"/"</code> so it is suitable for serving root context requests and then we see it setting the location of the war.  A whole host of other configurations are available, ranging from configuring to support annotation scanning in the webapp (through PlusConfiguration) to choosing where the webapp will unpack itself.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Lines 16: Add as Handler</term>
        <listitem>
          <para>
            A WebAppContext is a ContextHandler as well so it needs to be set to the server so it is aware of where to send the appropriate requests.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Lines 17 - 20: Login Service</term>
        <listitem>
          <para>
            Since this example is for our test webapp, we need to setup a LoginService so this shows how to create a very simple hashmap based one.  The name of the LoginService needs to correspond to what is configured in the webapp's <filename>web.xml</filename> and since it has a lifecycle of its own we register it as a bean with the Jetty server object so it can be started and stopped according to the lifecycle of the server itself.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Lines 21, 22: Start Server</term>
        <listitem>
          <para>
            Start things up!  By using the server.join() the server thread will join with the current thread.  See
            <link xl:href="http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Thread.html#join()">Thread.join()</link>
            for more details.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>
      After you have started things up you should be able to navigate to http://localhost:8080/ and you are good to go.
    </para>
  </section>
  <section>
    <title>Maven Coordinates</title>
    <para>
      To use this example in your project you will need the following maven dependencies declared.
    </para>
    <informalexample>
      <programlisting language="xml">
<![CDATA[
<dependency>
  <groupId>org.eclipse.jetty</groupId>
  <artifactId>jetty-webapp</artifactId>
  <version>${project.version}</version>
</dependency>
]]>
      </programlisting>
    </informalexample>
  </section>
</section>
