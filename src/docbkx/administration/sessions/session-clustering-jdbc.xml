<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="session-clustering-jdbc"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Session Clustering with a Database</title>

  <para>Jetty can support session clustering by persisting sessions to a
  shared database. Each Jetty instance locally caches sessions for which it
  has received requests, writing any changes to the session through to the
  database as the request exits the server. Sessions must obey the
  Serialization contract, and servlets must call the Session.setAttribute()
  method to ensure that changes are persisted.</para>

  <para>The persistent session mechanism works in conjunction with a load
  balancer that supports stickiness. Stickiness can be based on various data
  items, such as source IP address or characteristics of the session ID or a
  load-balancer specific mechanism. For those load balancers that examine the
  session ID, the Jetty persistent session mechanism appends a node ID to the
  session ID, which can be used for routing.</para>

  <para>In this type of solution, the database can become both a bottleneck
  and a single point of failure. Jetty takes steps to reduce the load on the
  database (discussed below), but in a heavily loaded environment you might
  need to investigate other optimization strategies such as local caching and
  database replication. You should also consult your database vendor's
  documentation for information on how to ensure high availability and
  failover of your database.</para>

  <section>
    <title>Configuration</title>

    <para>There are two components to session management in Jetty: a session
    ID manager and a session manager.</para>

    <itemizedlist>
      <listitem>
        <para>The session ID manager ensures that session IDs are unique
        across all webapps hosted on a Jetty instance, and thus there can only
        be one session ID manager per Jetty instance.</para>
      </listitem>

      <listitem>
        <para>The session manager handles the session lifecycle
        (create/update/invalidate/expire) on behalf of a web application, so
        there is one session manager per web application instance.</para>
      </listitem>
    </itemizedlist>

    <para>These managers also cooperate and collaborate with the
    <code>org.eclipse.jetty.server.session.SessionHandler</code> to enable
    cross-context dispatch.</para>
  </section>

  <section>
    <title>Configuring the JDBCSessionIdManager</title>

    <para>You need to configure an
    <code>org.eclipse.jetty.server.session.JDBCSessionIdManager</code>
    instance, either in embedded code or in a <filename>jetty.xml</filename>
    file. Here is an example of a jetty.xml setup:</para>

    <informalexample>
      <programlisting language="xml">
        
&lt;Set name="sessionIdManager"&gt;
        &lt;New id="jdbcidmgr" class="org.eclipse.jetty.server.session.JDBCSessionIdManager"&gt;
          &lt;Arg&gt;
            &lt;Ref id="Server"/&gt;
          &lt;/Arg&gt;
          &lt;Set name="workerName"&gt;fred&lt;/Set&gt;
          &lt;Set name="DatasourceName"&gt;javax.sql.DataSource/default&lt;/Set&gt;
          &lt;Set name="scavengeInterval"&gt;60&lt;/Set&gt;
        &lt;/New&gt;
      &lt;/Set&gt;
      &lt;Call name="setAttribute"&gt;
        &lt;Arg&gt;jdbcIdMgr&lt;/Arg&gt;
        &lt;Arg&gt;
          &lt;Ref id="jdbcidmgr"/&gt;
        &lt;/Arg&gt;
      &lt;/Call&gt;
      
    </programlisting>
    </informalexample>

    <para>Notice that the JDBCSessionIdManager needs access to a database. The
    <filename>jetty.xml</filename> above configures it with the name of a
    <code>javax.sql.DataSource</code> that is defined elsewhere. Consult Jetty
    Naming Resources for more information on how to configure database access
    with Jetty. If you don't want to use a DataSource, you can configure JDBC
    Driver information instead. Here's an example:</para>

    <informalexample>
      <programlisting language="xml">
      
&lt;Set name="sessionIdManager"&gt;
      &lt;New id="jdbcidmgr" class="org.eclipse.jetty.server.session.JDBCSessionIdManager"&gt;
        &lt;Arg&gt;
          &lt;Ref id="Server"/&gt;
        &lt;/Arg&gt;
        &lt;Set name="workerName"&gt;fred&lt;/Set&gt;
        &lt;Call name="setDriverInfo"&gt;j
          &lt;Arg&gt;com.mysql.jdbc.Driver&lt;/Arg&gt;
          &lt;Arg&gt;jdbc:mysql://127.0.0.1:3306/sessions?user=janb&lt;/Arg&gt;
        &lt;/Call&gt;
        &lt;Set name="scavengeInterval"&gt;60&lt;/Set&gt;
      &lt;/New&gt;
    &lt;/Set&gt;
    &lt;Call name="setAttribute"&gt;
      &lt;Arg&gt;jdbcIdMgr&lt;/Arg&gt;
      &lt;Arg&gt;
        &lt;Ref id="jdbcidmgr"/&gt;
      &lt;/Arg&gt;
    &lt;/Call&gt;
    
  </programlisting>
    </informalexample>

    <para>As Jetty configuration files are direct mappings of XML to Java, it
    is straightforward to see how to do this in code, but here's an example
    anyway:</para>

    <informalexample>
      <programlisting language="java">
    
Server server = new Server();
     ...
JDBCSessionIdManager idMgr = new JDBCSessionIdManager(server);
idMgr.setWorkerName("fred");
idMgr.setDriverInfo("com.mysql.jdbc.Driver", "jdbc:mysql://127.0.0.1:3306/sessions?user=janb");
idMgr.setScavengeInterval(60);
server.setSessionIdManager(idMgr);
 </programlisting>
    </informalexample>

    <para>You must configure the JDBCSessionIdManager with a workerName that
    is unique across the cluster. Typically the name relates to the physical
    node on which the instance is executing. If this name is not unique, your
    load balancer might fail to distribute your sessions correctly.</para>

    <para>You can also configure how often the persistent session mechanism
    sweeps the database looking for old, expired sessions with the
    scavengeInterval setting. The default value is 10mins. We recommend that
    you not increase the frequency because doing so increases the load on the
    database with very little gain; old, expired sessions can harmlessly sit
    in the database.</para>

    <section>
      <title>Configuring the Database Schema</title>

      <para>You may find it necessary to change the names of the tables and
      columns that the JDBC Session management uses to store the session
      information. The defaults used are:</para>

      <para><table border="1">
          <caption>Default Values for Session Id Table</caption>

          <colgroup width="16%"/>

          <colgroup width="84%"/>

          <tr>
            <td>table name</td>

            <td>JettySessionIds</td>
          </tr>

          <tr>
            <td>columns</td>

            <td>id</td>
          </tr>
        </table><table border="1">
          <caption>Default Values for Session Table</caption>

          <colgroup width="15%"/>

          <colgroup width="85%"/>

          <tr>
            <td>table name</td>

            <td>JettySessions</td>
          </tr>

          <tr>
            <td>columns</td>

            <td>rowId, sessionId, contextPath, virtualHost, lastNode,
            accessTime, lastAccessTime, createTime, cookieTime, lastSavedTime,
            expiryTime, maxInterval, map</td>
          </tr>
        </table>To change these values, use the <link
      xl:href="@JDURL@/org/eclipse/jetty/server/session/SessionIdTableSchema.html">org.eclipse.jetty.server.session.SessionIdTableSchema</link>
      and <link
      xl:href="@JDURL@/org/eclipse/jetty/server/session/SessionTableSchema.html">org.eclipse.jetty.server.session.SessionTableSchema</link>
      classes. These classes have getter/setter methods for the table name and
      all columns.</para>

      <para>Here's an example of changing the name of JettySessionsId table
      and its single column. This example will use java code, but as explained
      above, you may also do this via a jetty xml configuration file:</para>

      <programlisting language="java">JDBCSessionIdManager idManager = new JDBCSessionIdManager(server);

SessionIdTableSchema idTableSchema = new SessionIdTableSchema();
idTableSchema.setTableName("mysessionids");
idTableSchema.setIdColumn("theid");
idManager.setSessionIdTableSchema(idTableSchema);</programlisting>

      <para>In a similar fashion, you can change the names of the table and
      columns for the JettySessions table. <emphasis
      role="bold">Note</emphasis> that both the SessionIdTableSchema and the
      SessionTableSchema instances are set on the JDBCSessionIdManager
      class.</para>

      <programlisting language="java">JDBCSessionIdManager idManager = new JDBCSessionIdManager(server);

SessionTableSchema sessionTableSchema = new SessionTableSchema();
sessionTableSchema.setTableName("mysessions");
sessionTableSchema.setIdColumn("mysessionid");
sessionTableSchema.setAccessTimeColumn("atime");
sessionTableSchema.setContextPathColumn("cpath");
sessionTableSchema.setCookieTimeColumn("cooktime");
sessionTableSchema.setCreateTimeColumn("ctime");
sessionTableSchema.setExpiryTimeColumn("extime");
sessionTableSchema.setLastAccessTimeColumn("latime");
sessionTableSchema.setLastNodeColumn("lnode");
sessionTableSchema.setLastSavedTimeColumn("lstime");
sessionTableSchema.setMapColumn("mo");
sessionTableSchema.setMaxIntervalColumn("mi");           
idManager.setSessionTableSchema(sessionTableSchema);</programlisting>
    </section>
  </section>

  <section>
    <title>Configuring the JDBCSessionManager</title>

    <para>The way you configure a JDBCSessionManager depends on whether you're
    configuring from a context xml file or a
    <filename>jetty-web.xml</filename> file or code. The basic difference is
    how you get a reference to the Jetty
    <code>org.eclipse.jetty.server.Server</code> instance.</para>

    <para>From a context xml file, you reference the Server instance as a
    Ref:</para>

    <informalexample>
      <programlisting language="xml">
    
&lt;Ref name="Server" id="Server"&gt;
    &lt;Call id="jdbcIdMgr" name="getAttribute"&gt;
      &lt;Arg&gt;jdbcIdMgr&lt;/Arg&gt;
    &lt;/Call&gt;
  &lt;/Ref&gt;

  &lt;Set name="sessionHandler"&gt;
    &lt;New class="org.eclipse.jetty.server.session.SessionHandler"&gt;
      &lt;Arg&gt;
        &lt;New id="jdbcmgr" class="org.eclipse.jetty.server.session.JDBCSessionManager"&gt;
          &lt;Set name="idManager"&gt;
            &lt;Ref id="jdbcIdMgr"/&gt;
          &lt;/Set&gt;
        &lt;/New&gt;
      &lt;/Arg&gt;
    &lt;/New&gt;
  &lt;/Set&gt;
  
</programlisting>
    </informalexample>

    <para>From a <filename>WEB-INF/jetty-web.xml</filename> file, you can
    reference the Server instance directly:</para>

    <informalexample>
      <programlisting language="xml">
  
&lt;Get name="server"&gt;
  &lt;Get id="jdbcIdMgr" name="sessionIdManager"/&gt;
&lt;/Get&gt;
&lt;Set name="sessionHandler"&gt;
  &lt;New class="org.eclipse.jetty.server.session.SessionHandler"&gt;
    &lt;Arg&gt;
      &lt;New class="org.eclipse.jetty.server.session.JDBCSessionManager"&gt;
        &lt;Set name="idManager"&gt;
          &lt;Ref id="jdbcIdMgr"/&gt;
        &lt;/Set&gt;
      &lt;/New&gt;
    &lt;/Arg&gt;
  &lt;/New&gt;
&lt;/Set&gt;

</programlisting>
    </informalexample>

    <para>If you're embedding this in code:</para>

    <informalexample>
      <programlisting language="java">

//assuming you have already set up the JDBCSessionIdManager as shown earlier
//and have a reference to the Server instance:
 
WebAppContext wac = new WebAppContext();
 ... //configure your webapp context
JDBCSessionManager jdbcMgr = new JDBCSessionManager();
jdbcMgr.setIdManager(server.getSessionIdManager());
wac.setSessionHandler(jdbcMgr);

</programlisting>
    </informalexample>
  </section>
</section>
