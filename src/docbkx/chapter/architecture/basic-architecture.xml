<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE section PUBLIC '-//OASIS//DTD DocBook XML V5.0//EN'
'http://www.oasis-open.org/docbook/xml/5.0b5/dtd/docbook.dtd'
>
<section xml:id="basic-architecture" version="5.0"
xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink"
xmlns:xi="http://www.w3.org/2001/XInclude"
xmlns:svg="http://www.w3.org/2000/svg"
xmlns:mth="http://www.w3.org/1998/Math/MathML"
xmlns:xhtml="http://www.w3.org/1999/xhtml"
xmlns:db="http://docbook.org/ns/docbook">
  <title>Jetty 7 Architecture</title>
  <section>
    <title>View from 20,000 feet</title>
    <para>The Jetty Server is the plumbing between a collection of Connectors
    that accept HTTP connections, and a collection of Handlers that service
    requests from the connections and produce responses, with the work being
    done by threads taken from a thread pool.</para>
    <mediaobject>
      <info>
        <othercredit>
          <orgname>jetty simple high level architecture</orgname>
        </othercredit>
      </info>
      <imageobject>
        <imagedata align="center" width="6in" format="PNG"
        fileref="images/jetty-high-level-architecture.png" />
      </imageobject>
    </mediaobject>
    <para>While the jetty request/responses are derived from the Servlet API,
    the full features of the servlet API are only available if the appropriate
    handlers are configured. For example, the session API on the request is
    inactive unless the request has been passed to a Session Handler. The
    concept of a Servlet itself is implemented by a Servlet Handler. If
    servlets are not required, there is very little overhead in the use of the
    servlet request/response APIs. Thus you can build a Jetty server using only
    connectors and handlers, without using Servlets.</para>
    <para>The job of configuring jetty is the job of building a network of
    connectors and handlers and providing their individual configurations. As
    Jetty components are simply Plain Old Java Objects (POJOs), you can
    accomplish this assembly and configuration of components by a variety of
    techniques:</para>
    <itemizedlist>
      <listitem>In code. See the examples in the Jetty 7 Latest Source
      XRef.</listitem>
      <listitem>With Jetty XML - dependency injection style XML
      format.</listitem>
      <listitem>With your dependency injection framework of choice: Spring or
      XBean.</listitem>
      <listitem>Using Jetty WebApp and Context Deployers.</listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Patterns</title>
    <para>The implementation of Jetty follows some fairly standard patterns.
    Most abstract concepts such as Connector, Handler and Buffer are captured
    by interfaces. Generic handling for those interfaces is then provided in an
    Abstract implementation such as AbstractConnector, AbstractHandler and
    AbstractBuffer.</para>
    <mediaobject>
      <info>
        <othercredit>
          <orgname>jetty simple high level architecture patterns</orgname>
        </othercredit>
      </info>
      <imageobject>
        <imagedata align="center" width="6in" format="PNG"
        fileref="images/basic-architecture-patterns.png" />
      </imageobject>
    </mediaobject>
    <para>The JSR77 inspired life cycle of most jetty components is represented
    by LifeCycle interface and the AbstractLifeCycle implementation used as the
    base of many Jetty components.</para>
    <para>Jetty provides its own IO Buffering abstract over String, byte arrays
    and NIO buffers. This allows for greater portability of Jetty as well as
    hiding some of the complexity of the NIO layer and its advanced
    features.</para>
  </section>
  <section>
    <title>Connectors</title>
    <para>This diagram is a little out of date, as a Connection interface has
    been extracted out of HttpConnector to allow support for the AJP
    protocol.</para>
    <para>The connectors represent the protocol handlers that accept
    connections, parse requests and generate responses. The different types of
    connectors available are based on the protocols, scheduling model and IO
    APIs used:</para>
    <mediaobject>
      <info>
        <othercredit>
          <orgname>jetty simple high level architecture patterns</orgname>
        </othercredit>
      </info>
      <imageobject>
        <imagedata align="center" width="6in" format="PNG"
        fileref="images/basic-architecture-connectors.png" />
      </imageobject>
    </mediaobject>
    <itemizedlist>
      <listitem>SocketConnector - for few busy connections or when NIO is not
      available</listitem>
      <listitem>BlockingChannelConnector - for few busy connections when NIO is
      available</listitem>
      <listitem>SelectChannelConnector - for many mostly idle connections or
      asynchronous handling of Ajax requests</listitem>
      <listitem>SslSocketConnector - SSL without NIO</listitem>
      <listitem>SslSelectChannelConnector - SSL with non blocking NIO
      support</listitem>
      <listitem>AJPConnector AJP protocol support for connections from apache
      mod_jk or mod_proxy_ajp</listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Handlers</title>
    <para>The Handler is the component that deals with received requests. The
    core API of a handler is the handle method:</para>
    <mediaobject>
      <info>
        <othercredit>
          <orgname>jetty simple high level architecture handlers</orgname>
        </othercredit>
      </info>
      <imageobject>
        <imagedata align="center" width="6in" format="PNG"
        fileref="images/basic-architecture-handlers.png" />
      </imageobject>
    </mediaobject>
    <informalexample>
      <programlisting language="java">
<![CDATA[
public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
]]>
      </programlisting>
    </informalexample>
    <para>Parameters:</para>
    <itemizedlist>
      <listitem>target&#8218;&#196;&#236;The target of the request, either a
      URI or a name.</listitem>
      <listitem>baseRequest&#8218;&#196;&#236;The original unwrapped request
      object.</listitem>
      <listitem>request&#8218;&#196;&#236;The request either as the Request
      object or a wrapper of that request. You can use the
      HttpConnection.getCurrentConnection() method to access the Request object
      if required.</listitem>
      <listitem>response&#8218;&#196;&#236;The response as the Response object
      or a wrapper of that request. You can use the
      HttpConnection.getCurrentConnection() method to access the Response
      object if required.</listitem>
    </itemizedlist>
    <para>An implementation of this method can handle the request, pass the
    request onto another handler (or servlet) or it might modify and/or wrap
    the request and then pass it on. This gives three styles of Handler:</para>
    <itemizedlist>
      <listitem>Coordinating Handlers - Handlers that route requests to other
      handlers (eg HandlerCollection, ContextHandlerCollection)</listitem>
      <listitem>Filtering Handlers - Handlers that augment a request and pass
      it on to other handlers (eg. HandlerWrapper, ContextHandler,
      SessionHandler)</listitem>
      <listitem>Generating Handlers - Handlers that produce content (eg
      ResourceHandler and ServletHandler)</listitem>
    </itemizedlist>
    <section>
      <title>Nested Handlers and Handlers Called Sequentially</title>
      <para>You can combine handlers to handle different aspects of a request
      by nesting them, calling them in sequence, or by combining the two
      models.</para>
      <mediaobject>
        <info>
          <othercredit>
            <orgname>jetty simple high level architecture nested
            handlers</orgname>
          </othercredit>
        </info>
        <imageobject>
          <imagedata align="center" width="6in" format="PNG"
          fileref="images/basic-architecture-nested-handlers.png" />
        </imageobject>
      </mediaobject>
      <para>Handlers called in sequence perform actions that do not depend on
      the next invocation, nor on the handler order. They handle a request and
      generate the response without interacting with other handlers. The main
      class for this model is Handler Collection.</para>
      <para>Nested handlers are called according to a before/invokeNext/after
      pattern. The main class for nested handlers is Handler Wrapper. Nested
      handlers are much more common than those called in sequence.</para>
      <para>See also 
      <xref linkend="writing-handlers" />
      .</para>
    </section>
  </section>
  <section>
    <title>Servlet Handler</title>
    <para>The ServletHandler is a Handler that generates content by passing the
    request to any configured Filters and then to a Servlet mapped by a URI
    pattern.</para>
    <mediaobject>
      <info>
        <othercredit>
          <orgname>jetty simple high level architecture servlet
          handler</orgname>
        </othercredit>
      </info>
      <imageobject>
        <imagedata align="center" width="6in" format="PNG"
        fileref="images/basic-architecture-servlet-handler.png" />
      </imageobject>
    </mediaobject>
    <para>A ServletHandler is normally deployed within the scope of a servlet
    Context, which is a ContextHandler that provides convenience methods for
    mapping URIs to servlets.</para>
    <para>Filters and Servlets can also use a RequestDispatcher to reroute a
    request to another context or another servlet in the current
    context.</para>
  </section>
  <section>
    <title>Context</title>
    <para>Contexts are handlers that group other handlers below a particular
    URI context path or a virtual host. Typcially a context can have :</para>
    <itemizedlist>
      <listitem>A context path that defines which requests are handled by the
      context (eg /myapp )</listitem>
      <listitem>A resource base for static content (a docroot)</listitem>
      <listitem>A class loader to obtain classes specific to the context
      (typically docroot/WEB-INF/classes)</listitem>
      <listitem>Virtual host names</listitem>
    </itemizedlist>
    <para>Contexts implementations include:</para>
    <itemizedlist>
      <listitem>ContextHandler</listitem>
      <listitem>Servlet Context</listitem>
      <listitem>Web Application Context</listitem>
    </itemizedlist>
    <para>A web application context combines handlers for security, session and
    servlets in a single unit that can be configured with a web.xml
    descriptor.</para>
  </section>
  <section>
    <title>Web Application</title>
    <para>A Web App Context is a derivation of the servlet Context that
    supports the standardized layout of a web application and configuration of
    session, security, listeners, filter, servlets and JSP via a web.xml
    descriptor normally found in the WEB-INF directory of a
    webapplication.</para>
    <mediaobject>
      <info>
        <othercredit>
          <orgname>jetty simple high level web application</orgname>
        </othercredit>
      </info>
      <imageobject>
        <imagedata align="center" width="6in" format="PNG"
        fileref="images/basic-architecture-web-application.png" />
      </imageobject>
    </mediaobject>
    <para>Essentially the WebAppContext is a convenience class that assists the
    construction and configuration of other handlers to achieve a standard web
    application configuration.</para>
    <para>Configuration is actually done by pluggable implementations of the
    Configuration class and the prime among these is
    WebXmlConfiguration.</para>
  </section>
</section>
