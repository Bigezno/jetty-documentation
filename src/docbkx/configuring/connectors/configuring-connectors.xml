<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0" xml:id="jetty-connectors"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1999/xhtml"
         xmlns:ns3="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Connector Configuration Overview</title>

  <para>Connectors are the mechanism through which Jetty accepts network
  connections for various protocols. Configuring a connector is a combination
  of configuring the following:</para>

  <itemizedlist>
    <listitem>
      <para>Network parameters on the connector itself (for example: the
      listening port).</para>
    </listitem>

    <listitem>
      <para>Services the connector uses (for example: executors,
      schedulers).</para>
    </listitem>

    <listitem>
      <para>Connection factories that instantiate and configure the protocol
      for an accepted connection.</para>
    </listitem>
  </itemizedlist>

  <para>Jetty primarily uses a single connector type called <link
  xl:href="@JDURL@/org/eclipse/jetty/server/ServerConnector.html">ServerConnector</link>.</para>

  <note>
    <para>Prior to Jetty 9, the type of the connector specified both the
    protocol and the implementation used (for example, selector-based non
    blocking I/O vs blocking I/O, or SSL connector vs non-SSL connector).
    Jetty 9 has only a selector-based non blocking I/O connector, and a
    collection of <link
    xl:href="@JDURL@/org/eclipse/jetty/server/ConnectionFactory.html"><code>ConnectionFactories</code></link>
    now configure the protocol on the connector.</para>
  </note>

  <para>The standard Jetty distribution comes with the following Jetty XML
  files that create and configure connectors; you should examine them as you
  read this section:</para>

  <variablelist>
    <varlistentry>
      <term><link
      xl:href="@GITURL@/jetty-server/src/main/config/etc/jetty-http.xml"><filename>jetty-http.xml</filename></link></term>

      <listitem>
        <para>Instantiates a <link
        xl:href="@JDURL@/org/eclipse/jetty/server/ServerConnector.html"><code>ServerConnector</code></link>
        that accepts HTTP connections (that may be upgraded to WebSocket
        connections).</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link
      xl:href="@GITURL@/jetty-server/src/main/config/etc/jetty-ssl.xml"><filename>jetty-ssl.xml</filename></link></term>

      <listitem>
        <para>Instantiates a <link
        xl:href="@JDURL@/org/eclipse/jetty/server/ServerConnector.html"><code>ServerConnector</code></link>
        that accepts SSL/TLS connections. On it's own, this connector is not
        functional and requires one or more of the following files to also be
        configured to add <link
        xl:href="@JDURL@/org/eclipse/jetty/server/ConnectionFactory.html"><code>ConnectionFactories</code></link>
        to make the connector functional.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link
      xl:href="@GITURL@/jetty-server/src/main/config/etc/jetty-https.xml"><filename>jetty-https.xml</filename></link></term>

      <listitem>
        <para>Adds a <link
        xl:href="@JDURL@/org/eclipse/jetty/server/HttpConnectionFactory.html"><code>HttpConnectionFactory</code></link>
        to the <link
        xl:href="@JDURL@/org/eclipse/jetty/server/ServerConnector.html"><code>ServerConnector</code></link>
        configured by <code>jetty-ssl.xml</code> which combine to provide
        support for HTTPS.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link
      xl:href="@GITURL@/jetty-http2/http2-server/src/main/config/etc/jetty-http2.xml"><filename>jetty-http2.xml</filename></link></term>

      <listitem>
        <para>Adds a <link
        xl:href="@JDURL@/org/eclipse/jetty/http2/server/HTTP2ServerConnectionFactory.html"><code>Http2ServerConnectionFactory</code></link>
        to the <link
        xl:href="@JDURL@/org/eclipse/jetty/server/ServerConnector.html"><code>ServerConnector</code></link>
        configured by <code>jetty-ssl.xml to support the http2
        protocol.</code> Also prepends either <code>protonego-alpn.xml</code>
        or <code>protonego-npn.xml</code> so that the next protocol can be
        negotiated, which allows the same SSL port to handle multiple
        protocols.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><link
      xl:href="@GITURL@/jetty-alpn/jetty-alpn-server/src/main/config/etc/jetty-alpn.xml"><filename>jetty-alpn.xml</filename></link></term>

      <listitem>
        <para>Adds an <link
        xl:href="@JDURL@/org/eclipse/jetty/alpn/server/ALPNServerConnectionFactory.html"><code>ALPNServerConnectionFactory</code></link>
        to the <link
        xl:href="@JDURL@/org/eclipse/jetty/server/ServerConnector.html"><code>ServerConnector</code></link>
        configured by <code>jetty-ssl.xml</code> which allows the one SSL
        connector to support multiple protocols with the ALPN extension used
        to select the protocol to be used for each connection.</para>
      </listitem>
    </varlistentry>

  </variablelist>

  <para>Typically you need to configure very little on connectors other than
  set the listening port (see <link
  linkend="jetty-connectors-network-settings">Network Settings</link>), and
  perhaps enable <code>X-Forwarded-For</code> customization (see <link
  linkend="jetty-connectors-http-configuration">HTTP Configuration</link>).
  Most other settings are for expert configuration only.</para>

  <section>
    <title>Constructing a <code>ServerConnector</code></title>

    <para>The services a <link
    xl:href="@JDURL@/org/eclipse/jetty/server/ServerConnector.html"><code>ServerConnector</code></link>
    instance uses are set by constructor injection and once instantiated
    cannot be changed. Most of the services may be defaulted with null or 0
    values so that a reasonable default is used, thus for most purposes only
    the Server and the connection factories need to be passed to the connector
    constructor. In Jetty XML (that is, in <link
    xl:href="@GITURL@/jetty-server/src/main/config/etc/jetty-http.xml"><filename>jetty-http.xml</filename></link>),
    you can do this with:</para>

    <informalexample>
      <programlisting language="xml"><![CDATA[<New class="org.eclipse.jetty.server.ServerConnector">
  <Arg name="server"><Ref refid="Server" /></Arg>
  <Arg name="factories">
    <Array type="org.eclipse.jetty.server.ConnectionFactory">
      <!-- insert one or more factories here -->
    </Array>
  </Arg>
  <!-- set connector fields here -->
</New> ]]></programlisting>
    </informalexample>

    <para>You can see the other arguments that can be passed when constructing
    a <code>ServerConnector</code> in the <link
    xl:href="@JDURL@/org/eclipse/jetty/server/ServerConnector.html#ServerConnector%28org.eclipse.jetty.server.Server,%20java.util.concurrent.Executor,%20org.eclipse.jetty.util.thread.Scheduler,%20org.eclipse.jetty.io.ByteBufferPool,%20int,%20int,%20org.eclipse.jetty.server.ConnectionFactory...%29">Javadoc</link>.
    Typically the defaults are sufficient for almost all deployments.</para>
  </section>

  <section xml:id="jetty-connectors-network-settings">
    <title>Network Settings.</title>

    <para>You configure connector network settings by calling setters on the
    connector before it is started. For example, you can set the port with the
    Jetty XML:</para>

    <informalexample>
      <programlisting language="xml"><![CDATA[<New class="org.eclipse.jetty.server.ServerConnector">
  <Arg name="server"><Ref refid="Server" /></Arg>
  <Arg name="factories"><!-- insert one or more factories here --></Arg>

  <Set name="port">8080</Set>
</New>   ]]></programlisting>
    </informalexample>

    <para>Values in Jetty XML can also be parameterized so that they may be
    passed from property files or set on the command line. Thus typically the
    port is set within Jetty XML, but uses the <code>Property</code> element
    to be customizable:</para>

    <informalexample>
      <programlisting language="xml"><![CDATA[<New class="org.eclipse.jetty.server.ServerConnector">
  <Arg name="server"><Ref refid="Server" /></Arg>
  <Arg name="factories"><!-- insert one or more factories here --></Arg>

  <Set name="port"><Property name="jetty.http.port" default="8080"/></Set>
</New>  ]]></programlisting>
    </informalexample>

    <para>The network settings that you can set on the <link
    xl:href="@JDURL@/org/eclipse/jetty/server/ServerConnector.html"><code>ServerConnector</code></link>
    include:</para>

    <table>
      <title>Connector Configuration</title>

      <tgroup cols="2">
        <colspec colwidth="22*"/>

        <colspec colwidth="78*"/>

        <thead>
          <row>
            <entry>Field</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>host</entry>

            <entry>The network interface this connector binds to as an IP
            address or a hostname. If null or 0.0.0.0, bind to all
            interfaces.</entry>
          </row>

          <row>
            <entry>port</entry>

            <entry>The configured port for the connector or 0 a random
            available port may be used (selected port available via
            <code>getLocalPort()</code>).</entry>
          </row>

          <row>
            <entry>idleTimeout</entry>

            <entry>The time in milliseconds that the connection can be idle
            before it is closed.</entry>
          </row>

          <row>
            <entry>defaultProtocol</entry>

            <entry>The name of the default protocol used to select a
            <code>ConnectionFactory</code> instance. This defaults to the
            first <code>ConnectionFactory</code> added to the
            connector.</entry>
          </row>

          <row>
            <entry>stopTimeout</entry>

            <entry>The time in milliseconds to wait before gently stopping a
            connector.</entry>
          </row>

          <row>
            <entry>acceptQueueSize</entry>

            <entry>The size of the pending connection backlog. The exact
            interpretation is JVM and operating system specific and you can
            ignore it. Higher values allow more connections to wait pending an
            acceptor thread. Because the exact interpretation is deployment
            dependent, it is best to keep this value as the default unless
            there is a specific connection issue for a specific OS that you
            need to address.</entry>
          </row>

          <row>
            <entry>reuseAddress</entry>

            <entry>Allow the server socket to be rebound even if in <link
            xl:href="http://www.ssfnet.org/Exchange/tcp/tcpTutorialNotes.html">TIME_WAIT</link>.
            For servers it is typically OK to leave this as the default
            true.</entry>
          </row>

          <row>
            <entry>soLingerTime</entry>

            <entry>A value &gt;=0 set the socket <link
            xl:href="http://stackoverflow.com/questions/3757289/tcp-option-so-linger-zero-when-its-required">
            SO_LINGER</link> value in milliseconds. Jetty attempts to gently
            close all TCP/IP connections with proper half close semantics, so
            a linger timeout should not be required and thus the default is
            -1.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section xml:id="jetty-connectors-http-configuration">
    <title>HTTP Configuration</title>

    <para>The <link
    xl:href="@JDURL@/org/eclipse/jetty/server/HttpConfiguration.html">HttpConfiguration</link>
    class holds the configuration for <link
    xl:href="@JDURL@/org/eclipse/jetty/server/HttpChannel.html">
    <code>HTTPChannel</code> </link>s, which you can create 1:1 with each HTTP
    connection or 1:n on a multiplexed HTTP/2 connection. Thus a
    <code>HTTPConfiguration</code> object is injected into both the HTTP and
    HTTP/2 connection factories. To avoid duplicate configuration, the standard
    Jetty distribution creates the common <code>HttpConfiguration</code>
    instance in <link
    xl:href="@GITURL@/jetty-server/src/main/config/etc/jetty.xml">
    <filename>jetty.xml</filename> </link>, which is a <code>Ref</code>
    element then used in <link
    xl:href="@GITURL@/jetty-server/src/main/config/etc/jetty-http.xml"><filename>jetty-http.xml</filename></link>,
    <link
    xl:href="@GITURL@/jetty-server/src/main/config/etc/jetty-https.xml"><filename>jetty-https.xml</filename></link>
    and in <link
    xl:href="@GITURL@/jetty-http2/http2-server/src/main/config/etc/jetty-http2.xml"><filename>jetty-http2.xml</filename></link></para>

    <para>A typical configuration of <link
    xl:href="@JDURL@/org/eclipse/jetty/server/HttpConfiguration.html">
    HttpConfiguration</link> is:</para>

    <informalexample>
      <programlisting language="xml"><![CDATA[<New id="httpConfig" class="org.eclipse.jetty.server.HttpConfiguration">
  <Set name="secureScheme">https</Set>
  <Set name="securePort"><Property name="jetty.ssl.port" default="8443" /></Set>
  <Set name="outputBufferSize">32768</Set>
  <Set name="requestHeaderSize">8192</Set>
  <Set name="responseHeaderSize">8192</Set>
</New>]]></programlisting>
    </informalexample>

    <para>This example HttpConfiguration may be used by reference to the ID
    "httpConfig":</para>

    <informalexample>
      <programlisting language="xml"><![CDATA[<Call name="addConnector">
  <Arg>
    <New class="org.eclipse.jetty.server.ServerConnector">
      <Arg name="server"><Ref refid="Server" /></Arg>
      <Arg name="factories">
        <Array type="org.eclipse.jetty.server.ConnectionFactory">
          <Item>
            <New class="org.eclipse.jetty.server.HttpConnectionFactory">
              <Arg name="config"><Ref refid="httpConfig" /></Arg>
            </New>
          </Item>
        </Array>
      </Arg>
      <!-- ... -->
    </New>
  </Arg>
</Call>]]></programlisting>
    </informalexample>

    <para>For SSL based connectors (in <filename>jetty-https.xml</filename>
    and <filename>jetty-http2.xml</filename>), the common "httpConfig"
    instance is used as the basis to create an SSL specific configuration with
    ID "sslHttpConfig":</para>

    <informalexample>
      <programlisting language="xml"><![CDATA[<New id="sslHttpConfig" class="org.eclipse.jetty.server.HttpConfiguration">
  <Arg><Ref refid="httpConfig"/></Arg>
  <Call name="addCustomizer">
    <Arg><New class="org.eclipse.jetty.server.SecureRequestCustomizer"/></Arg>
  </Call>
</New>]]></programlisting>
    </informalexample>

    <para>This adds a <code><link
    xl:href="@JDURL@/org/eclipse/jetty/server/SecureRequestCustomizer.html"><code>SecureRequestCustomizer</code></link></code>
    which adds SSL Session IDs and certificate information as request
    attributes.</para>
  </section>

  <section>
    <title>SSL Context Configuration</title>

    <para>The SSL/TLS connectors for HTTPS and HTTP/2 require a certificate to
    establish a secure connection. Jetty holds certificates in standard JVM
    keystores and are configured as keystore and truststores on a <link
    xl:href="@JDURL@/org/eclipse/jetty/util/ssl/SslContextFactory.html">
    <code>SslContextFactory</code> </link> instance that is injected into an
    <link
    xl:href="@JDURL@/org/eclipse/jetty/server/SslConnectionFactory.html">
    <code>SslConnectionFactory</code> </link> instance. An example using the
    keystore distributed with Jetty (containing a self signed test
    certificate) is in <link
    xl:href="@GITURL@/jetty-server/src/main/config/etc/jetty-https.xml">
    <filename>jetty-https.xml</filename></link>. Read more about SSL
    keystores in <link linkend="configuring-ssl">Configuring
    SSL</link>.</para>
  </section>

  <section>
    <title>Proxy / Load Balancer Connection Configuration</title>

    <para>Often a Connector needs to be configured to accept connections from
    an intermediary such as a Reverse Proxy and/or Load Balancer deployed in
    front of the server. In such environments, the TCP/IP connection
    terminating on the server does not originate from the client, but from the
    intermediary, so that the Remote IP and port number can be reported
    incorrectly in logs and in some circumstances the incorrect server address
    and port may be used.</para>

    <para>Thus Intermediaries typically implement one of several de facto
    standards to communicate to the server information about the orginal
    client connection terminating on the intermediary. Jetty supports the
    <code><link
    xl:href="https://en.wikipedia.org/wiki/X-Forwarded-For">X-Forwarded-For</link></code>
    header and the <link
    xl:href="http://www.haproxy.org/download/1.5/doc/proxy-protocol.txt">Proxy
    Protocol</link> mechanisms as described below.</para>

    <note>
      <para>The XML files in the jetty distribution contain commented out
      examples of both the <code><link
      xl:href="https://en.wikipedia.org/wiki/X-Forwarded-For">X-Forwarded-For</link></code>
      and <link
      xl:href="http://www.haproxy.org/download/1.5/doc/proxy-protocol.txt">Proxy
      Protocol</link> mechanisms. When using those examples, it is recommended
      that the XML in the jetty distribution is not edited. Rather the files
      should be copied into a jetty base directory and then modified.</para>
    </note>

    <section>
      <title>X-Forward-for Configuration</title>

      <para>The <code><link
      xl:href="https://en.wikipedia.org/wiki/X-Forwarded-For">X-Forwarded-for</link></code>
      header and associated headers are a defacto standard where
      intermediaries add HTTP headers to each request they forward to describe
      the originating connection. These headers can be interpreted by an
      instance of <link
      xl:href="@JDURL@/org/eclipse/jetty/server/ForwardedRequestCustomizer.html"><code>ForwardedRequestCustomizer</code></link>
      which can be added to a HttpConfiguration as follows:</para>

      <para><informalexample>
          <programlisting language="xml"><![CDATA[<New id="httpConfig" class="org.eclipse.jetty.server.HttpConfiguration">
  <Set name="outputBufferSize">32768</Set>
  <Set name="requestHeaderSize">8192</Set>
  <Set name="responseHeaderSize">8192</Set>

  <Call name="addCustomizer">
    <Arg><New class="org.eclipse.jetty.server.ForwardedRequestCustomizer"/></Arg>
  </Call>
</New>]]></programlisting>
        </informalexample></para>
    </section>

    <section>
      <title>Proxy Protocol</title>

      <para>The <link
      xl:href="http://www.haproxy.org/download/1.5/doc/proxy-protocol.txt">Proxy
      Protocol</link> is a defacto standard created by HAProxy and used by
      environments such as Amazon Elastic Cloud. This mechanism is independent
      of any protocol, so it can be used for HTTP2, TLS etc. The
      information about the client connection is sent as a small data frame on
      each newly established connection. In Jetty, this protocol can be
      handled by the <link
      xl:href="@JDURL@/org/eclipse/jetty/server/ProxyConnectionFactory.html"><code>ProxyConnectionFactory</code></link>
      which parses the data frame and then instantiates the next
      ConnectionFactory on the connection with and EndPoint that has been
      customized with the data obtained about the orginal client connection.
      The connection factory can be added to any <link
      xl:href="@JDURL@/org/eclipse/jetty/server/ServerConnector.html"><code>ServerConnector</code></link>
      and should be the first <link
      xl:href="@JDURL@/org/eclipse/jetty/server/ConnectionFactory.html"><code>ConnectionFactory</code></link>.
      An example of adding the factory to a HTTP connector is:</para>

      <para><informalexample>
          <programlisting language="xml"><![CDATA[<Call name="addConnector">
  <Arg>
    <New class="org.eclipse.jetty.server.ServerConnector">
      <Arg name="server"><Ref refid="Server" /></Arg>
      <Arg name="factories">
        <Array type="org.eclipse.jetty.server.ConnectionFactory">
          <Item>
            <New class="org.eclipse.jetty.server.ProxyConnectionFactory"/>
          </Item>
          <Item>
            <New class="org.eclipse.jetty.server.HttpConnectionFactory">
              <Arg name="config"><Ref refid="httpConfig" /></Arg>
            </New>
          </Item>
        </Array>
      </Arg>
      <Set name="host"><Property name="jetty.host" /></Set>
      <Set name="port"><Property name="jetty.http.port" default="80" /></Set>
    </New>
  </Arg>
</Call>
]]></programlisting>
        </informalexample></para>
    </section>
  </section>
</section>
