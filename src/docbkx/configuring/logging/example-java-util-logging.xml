<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="example-logging-java-util-logging"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Example: Logging with Java's java.util.logging</title>

  <para>This page describes how to Configure Jetty for Logging with Java's
  <literal><link
  xl:href="http://docs.oracle.com/javase/7/docs/api/java/util/logging/package-summary.html">java.util.logging</link></literal>.</para>

  <para>The basic configuration for Logging with java.util.logging is to use
  <link xl:href="http://slf4j.org/manual.html">Slf4j</link> and the <link
  xl:href="http://slf4j.org/manual.html#swapping">Slf4j binding layer for
  java.util.logging</link>.</para>

  <simplesect>
    <title>The Required JARs</title>

    <para>There will be 2 JARs you will need to download</para>

    <para><variablelist>
        <varlistentry>
          <term><filename><link
          xl:href="http://repo1.maven.org/maven2/org/slf4j/slf4j-jdk14/1.6.6/slf4j-jdk14-1.6.6.jar">slf4j-jdk14-1.6.6.jar</link></filename></term>

          <listitem>
            <para>This is the Slf4j binding layer for JDK 1.4 logging (also
            known as java.util.logging)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><filename><link
          xl:href="http://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.6.6/slf4j-api-1.6.6.jar">slf4j-api-1.6.6.jar</link></filename></term>

          <listitem>
            <para>This is the basic Slf4j API that Jetty's Slf4jLog
            implementation uses.</para>
          </listitem>
        </varlistentry>
      </variablelist></para>
  </simplesect>

  <simplesect>
    <title>Configuring Server Classpath</title>

    <para>In order for the Server to use these new JARs you will need to put
    them into place and tell Jetty to load them on each startup.</para>

    <para>Create a ${jetty.home}/lib/logging/ directory and place the 2 files
    you downloaded there.</para>

    <screen language="bash"><![CDATA[[jetty-distribution-9.0.0.v20130308]$ ls -l ]]><emphasis
        role="bold">lib/logging/</emphasis><![CDATA[
total 40
-rw-rw-r-- 1 jetty jetty 26176 Mar 11 16:38 ]]><emphasis role="bold">slf4j-api-1.6.6.jar</emphasis><![CDATA[
-rw-rw-r-- 1 jetty jetty  8845 Mar 11 16:38 ]]><emphasis role="bold">slf4j-jdk14-1.6.6.jar</emphasis><![CDATA[
]]></screen>

    <para>Next, we need to edit the ${jetty.home}/start.ini to get jetty to
    load these logging files into the Server classpath.</para>

    <para>Edit the start.ini and check for the following entries. (Add them to
    the end if missing)</para>

    <programlisting language="properties"><![CDATA[# Configure java.util.logging from resources/logging.properties
]]><emphasis role="bold">etc/jetty-jdk-logging.xml</emphasis><![CDATA[
# Adding lib/logging to server classpath
]]><emphasis role="bold">OPTIONS=logging</emphasis><![CDATA[
]]></programlisting>

    <para>Now verify that the 2 jars will be loaded by server classpath</para>

    <screen><![CDATA[[jetty-distribution-9.0.0.v20130308]$ ]]><emphasis
        role="bold">java -jar start.jar --version</emphasis><![CDATA[ | grep logging
Active Options: [Server, client, ext, jmx, jsp, ]]><emphasis role="bold">logging</emphasis><![CDATA[, resources, websocket]
18:                1.6.6 | ${jetty.home}/lib/logging/]]><emphasis role="bold">slf4j-api-1.6.6.jar</emphasis><![CDATA[
19:                1.6.6 | ${jetty.home}/lib/logging/]]><emphasis role="bold">slf4j-jdk14-1.6.6.jar</emphasis><![CDATA[
]]></screen>
  </simplesect>

  <simplesect>
    <title>Configuring Server Logging</title>

    <para>If you have a
    <filename>${jetty.home}/resources/jetty-logging.properties</filename>,
    make sure it contains just the following</para>

    <para><programlisting language="properties"><![CDATA[# Configure Jetty for SLf4j Logging
org.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.Slf4jLog]]></programlisting></para>

    <para>This will tell Jetty to use the Slf4jLog implementation for its
    internal Logging.</para>
  </simplesect>

  <simplesect>
    <title>Configuring java.util.logging</title>

    <para>You'll need a
    <filename>${jetty.home}/resources/logging.properties</filename> file to
    define what you want java.util.logging to do, and finally a way to have
    java.util.logging use this configuration.</para>

    <para>Example
    <filename>${jetty.home}/resources/logging.properties</filename>
    file</para>

    <para><programlisting language="properties"><![CDATA[handlers=java.util.logging.FileHandler, java.util.logging.ConsoleHandler
java.util.logging.ConsoleHandler.level=INFO
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter

java.util.logging.FileHandler.level=INFO
java.util.logging.FileHandler.pattern=logs/jetty.log

# Write 10MB before rotating this file
java.util.logging.FileHandler.limit=10000000

# Number of rotating files to be used
java.util.logging.FileHandler.count=4
java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter

.level=INFO]]></programlisting>Finally, you'll want a way for this
    java.util.logging configuration to take effect on server start.</para>

    <para>Contents of etc/jetty-jdk-logging.xml file that we added earlier to
    the start.ini</para>

    <programlisting language="xml"><![CDATA[<?xml version="1.0"?>
<!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure_9_0.dtd">

<Configure id="Server" class="org.eclipse.jetty.server.Server">
  <Call id="logMgr" class="java.util.logging.LogManager" name="getLogManager">
    <Call name="readConfiguration">
      <Arg class="java.io.InputStream">
        <New class="java.io.FileInputStream">
          <Arg class="java.lang.String"><Property name="jetty.home" default="."/>]]><emphasis
        role="bold">/resources/logging.properties</emphasis><![CDATA[</Arg>
        </New>
      </Arg>
    </Call>
  </Call>
</Configure>]]></programlisting>
  </simplesect>

  <simplesect>
    <title>Scripted Installation of java.util.logging</title>

    <programlisting language="bash"><![CDATA[#!/bin/bash
# -------------------------------------------
# FOR DEMONSTRATION PURPOSES ONLY
# USE AT YOUR OWN RISK
# ------------------------------------------- 

if [ ! -f start.ini ] ; then
    echo "ERROR: Not in \${jetty.home} directory"
    exit -1
fi

if [ -d lib/logging ] ; then
    echo "ERROR: Existing lib/logging directory exists."
    echo "       Remove any existing logging implementations"
    echo "       before running this script, as conflicting logging"
    echo "       implementations can cause problems."
    echo "       Then remove the lib/logging directory entirely."
    exit -1
fi

mkdir lib/logging
pushd lib/logging

curl -O http://repo1.maven.org/maven2/org/slf4j/slf4j-jdk14/1.6.6/slf4j-jdk14-1.6.6.jar
curl -O http://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.6.6/slf4j-api-1.6.6.jar

popd

echo "Creating etc/jetty-jdk-logging.xml"
cat << EOFX > etc/jetty-jdk-logging.xml
<?xml version="1.0"?>
<!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure_9_0.dtd">

<Configure id="Server" class="org.eclipse.jetty.server.Server">
  <Call id="logMgr" class="java.util.logging.LogManager" name="getLogManager">
    <Call name="readConfiguration">
      <Arg class="java.io.InputStream">
        <New class="java.io.FileInputStream">
          <Arg class="java.lang.String"><Property name="jetty.home" default="."/>/resources/logging.properties</Arg>
        </New>
      </Arg>
    </Call>
  </Call>
</Configure>
EOFX

if (grep -E "OPTIONS=.*logging.*" start.ini) 
then
    echo "Logging already present in start.ini"
else
    echo "Adding logging to start.ini"
    cat << EOFI >> start.ini
# Configure java.util.logging from resources/logging.properties
etc/jetty-jdk-logging.xml
# Adding lib/logging to server classpath
OPTIONS=logging
EOFI
fi

echo "Rewriting resources/jetty-logging.properties"
cat << EOFP > resources/jetty-logging.properties
org.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.Slf4jLog
EOFP

echo "Rewriting resources/logging.properties"
cat << EOFJ > resources/logging.properties
handlers=java.util.logging.FileHandler, java.util.logging.ConsoleHandler
java.util.logging.ConsoleHandler.level=INFO
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter

java.util.logging.FileHandler.level=INFO
java.util.logging.FileHandler.pattern=logs/jetty.log

# Write 10MB before rotating this file
java.util.logging.FileHandler.limit=10000000

# Number of rotating files to be used
java.util.logging.FileHandler.count=4
java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter

.level=INFO
EOFJ

]]></programlisting>
  </simplesect>
</section>
