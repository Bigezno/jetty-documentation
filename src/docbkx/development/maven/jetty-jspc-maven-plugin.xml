<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="jetty-jspc-maven-plugin"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Jetty Jspc Maven Plugin</title>

  <para>This plugin will help you pre-compile your jsps and works in
  conjunction with the maven war plugin to put them inside an assembled
  war.</para>

  <section xml:id="jspc-config">
    <title>Configuration</title>

    <para>Here's the basic setup required to put the jspc plugin into your
    build:</para>

    <informalexample>
      <programlisting language="xml">

&lt;plugin&gt;
  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
   &lt;artifactId&gt;jetty-jspc-maven-plugin&lt;/artifactId&gt;
   &lt;version&gt;9.1.0.RC1&lt;/version&gt;
   &lt;executions&gt;
     &lt;execution&gt;
       &lt;id&gt;jspc&lt;/id&gt;
       &lt;goals&gt;
         &lt;goal&gt;jspc&lt;/goal&gt;
       &lt;/goals&gt;
       &lt;configuration&gt;
       &lt;/configuration&gt;
     &lt;/execution&gt;
   &lt;/executions&gt;
 &lt;/plugin&gt;
 
      </programlisting>
    </informalexample>

    <para>The configurable parameters are as follows:</para>

    <variablelist>
      <varlistentry>
        <term>webXmlFragment</term>

        <listitem>
          <para>Default value: ${basedir}/target/webfrag.xml</para>

          <para>File into which to generate the servlet declarations. Will be
          merged with an existing web.xml.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>webAppSourceDirectory</term>

        <listitem>
          <para>Default value: ${basedir}/src/main/webapp</para>

          <para>Root of resources directory where jsps, tags etc are
          located.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>webXml</term>

        <listitem>
          <para>Default value:
          ${basedir}/src/main/webapp/WEB-INF/web.xml</para>

          <para>The web.xml file to use to merge with the generated
          fragments.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>includes</term>

        <listitem>
          <para>Default value: **\/*.jsp, **\/*.jspx</para>

          <para>The comma separated list of patterns for file extensions to be
          processed.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>excludes</term>

        <listitem>
          <para>Default value: **\/.svn\/**</para>

          <para>The comma separated list of patterns for file extensions to be
          skipped.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>classesDirectory</term>

        <listitem>
          <para>Default value: ${project.build.outputDirectory}</para>

          <para>Location of classes for the webapp.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>generatedClasses</term>

        <listitem>
          <para>Default value: ${project.build.outputDirectory}</para>

          <para>Location to put the generated classes for the jsps.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>insertionMarker</term>

        <listitem>
          <para>Default value: <emphasis>none</emphasis></para>

          <para>A marker string in the src web.xml file which indicates where
          to merge in the generated web.xml fragment. Note that the marker
          string will NOT be preserved during the insertion. Can be left
          blank, in which case the generated fragment is inserted just before
          the line containing &lt;/web-app&gt;.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>useProvidedScope</term>

        <listitem>
          <para>Default value: false</para>

          <para>If true, jars of dependencies marked with
          &lt;scope&gt;provided&lt;/scope&gt; will be placed on the
          compilation classpath.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>mergeFragment</term>

        <listitem>
          <para>Default value: true</para>

          <para>Whether or not to merge the generated fragment file with the
          source web.xml. The merged file will go into the same directory as
          the webXmlFragment.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>keepSources</term>

        <listitem>
          <para>Default value: false</para>

          <para>If true, the generated .java files are not deleted at the end
          of processing.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>tldJarNamePatterns</term>

        <listitem>
          <para>Default value:
          .*taglibs[^/]*\.jar|.*jstl-impl[^/]*\.jar$</para>

          <para>Patterns of jars on the 'system' (ie container) path that
          contain tlds. Use | to separate each pattern.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>jspc</term>

        <listitem>
          <para>Default value: the org.apache.jasper.JspC instance being
          configured.</para>

          <para>The JspC class actually performs the precompilation. All
          setters on the JspC class are available. You can <link
          xl:href="http://repo1.maven.org/maven2/org/glassfish/web/javax.servlet.jsp/2.3.2/javax.servlet.jsp-2.3.2-javadoc.jar">download</link>
          the <link linkend="???">javadoc</link> <link
          xl:href="http://repo1.maven.org/maven2/org/glassfish/web/javax.servlet.jsp/2.3.2/javax.servlet.jsp-2.3.2-javadoc.jar">here</link>.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>Taking all the default settings, here's how to configure the war
    plugin to use the generated web.xml that includes all of the jsp servlet
    declarations:</para>

    <informalexample>
      <programlisting language="xml">

&lt;plugin&gt;
  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
  &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
  &lt;configuration&gt;
    &lt;webXml&gt;${basedir}/target/web.xml&lt;/webXml&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;

      </programlisting>
    </informalexample>
  </section>

  <section xml:id="jspc-production-precompile">
    <title>Precompiling only for Production Build</title>

    <para>As compiling jsps is usually done during preparation for a
    production release and not usually done during development, it is more
    convenient to put the plugin setup inside a &lt;profile&gt; which which
    can be deliberately invoked during prep for production.</para>

    <para>For example, the following profile will only be invoked if the flag
    -Dprod is present on the run line:</para>

    <informalexample>
      <programlisting language="xml">

&lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;prod&lt;/id&gt;
      &lt;activation&gt;
        &lt;property&gt;&lt;name&gt;prod&lt;/name&gt;&lt;/property&gt;
      &lt;/activation&gt;
      &lt;build&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
          &lt;artifactId&gt;jetty-jspc-maven-plugin&lt;/artifactId&gt;
          &lt;version&gt;9.1.0.RC1&lt;/version&gt;
          &lt;!-- put your configuration in here --&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
          &lt;!-- put your configuration in here --&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
      &lt;/build&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
  
      </programlisting>
    </informalexample>

    <para>So, the following invocation would cause your code to be compiled,
    the jsps to be compiled, the &lt;servlet&gt; and &lt;servlet-mapping&gt;s
    inserted in the web.xml and your webapp assembled into a war:</para>

    <screen>

$ mvn -Dprod package

    </screen>
  </section>

  <section xml:id="jspc-overlay-precompile">
    <title>Precompiling Jsps with Overlaid Wars</title>

    <para>Precompiling jsps with an overlaid war requires a bit more
    configuration. This is because you need to separate the steps of unpacking
    the overlaid war and then repacking the final target war so the
    jetty-jspc-maven-plugin has the opportunity to access the overlaid
    resources.</para>

    <para>In the example we'll show, we will use an overlaid war. The overlaid
    war will provide the web.xml file but the jsps will be in src/main/webapp
    (ie part of the project that uses the overlay). We will unpack the
    overlaid war file, compile the jsps and merge their servlet definitions
    into the extracted web.xml, then war up the lot.</para>

    <para>Here's an example configuration of the war plugin that separate
    those phases into an unpack phase, and then a packing phase:</para>

    <informalexample>
      <programlisting language="xml">

&lt;plugin&gt;
    &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
    &lt;executions&gt;
      &lt;execution&gt;
        &lt;id&gt;unpack&lt;/id&gt;
        &lt;goals&gt;&lt;goal&gt;exploded&lt;/goal&gt;&lt;/goals&gt;
        &lt;phase&gt;generate-resources&lt;/phase&gt;
        &lt;configuration&gt;
          &lt;webappDirectory&gt;target/foo&lt;/webappDirectory&gt;
          &lt;overlays&gt;
            &lt;overlay /&gt;
            &lt;overlay&gt;
              &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
              &lt;artifactId&gt;test-jetty-webapp&lt;/artifactId&gt;
            &lt;/overlay&gt;
          &lt;/overlays&gt;
        &lt;/configuration&gt;
      &lt;/execution&gt;
      &lt;execution&gt;
        &lt;id&gt;pack&lt;/id&gt;
        &lt;goals&gt;&lt;goal&gt;war&lt;/goal&gt;&lt;/goals&gt;
        &lt;phase&gt;package&lt;/phase&gt;
        &lt;configuration&gt;
          &lt;warSourceDirectory&gt;target/foo&lt;/warSourceDirectory&gt;
          &lt;webXml&gt;target/web.xml&lt;/webXml&gt;
        &lt;/configuration&gt;
      &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;

      </programlisting>
    </informalexample>

    <para>Now you also need to configure the jetty-jspc-maven-plugin so that
    it can use the web.xml that was extracted by the war unpacking and merge
    in the generated definitions of the servlets. This is in
    target/foo/WEB-INF/web.xml. Using the default settings, the web.xml merged
    with the jsp servlet definitions will be put into target/web.xml.</para>

    <informalexample>
      <programlisting language="xml">

&lt;plugin&gt;
    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
     &lt;artifactId&gt;jetty-jspc-maven-plugin&lt;/artifactId&gt;
     &lt;version&gt;9.1.0.RC1&lt;/version&gt;
     &lt;executions&gt;
       &lt;execution&gt;
         &lt;id&gt;jspc&lt;/id&gt;
         &lt;goals&gt;
           &lt;goal&gt;jspc&lt;/goal&gt;
         &lt;/goals&gt;
         &lt;configuration&gt;
            &lt;webXml&gt;target/foo/WEB-INF/web.xml&lt;/webXml&gt;
            &lt;includes&gt;**/*.foo&lt;/includes&gt;
            &lt;excludes&gt;**/*.fff&lt;/excludes&gt;
        &lt;/configuration&gt;
      &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;

      </programlisting>
    </informalexample>
  </section>
</section>
