<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="jaas-support" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>JAAS Support</title>

  <para>JAAS implements a Java version of the standard Pluggable
  Authentication Module (PAM) framework.</para>

  <para>JAAS can be used for two purposes:</para>

  <itemizedlist>
    <listitem>
      <para>for authentication of users, to reliably and securely determine
      who is currently executing Java code, regardless of whether the code is
      running as an application, an applet, a bean, or a servlet; and</para>
    </listitem>

    <listitem>
      <para>for authorization of users to ensure they have the access control
      rights (permissions) required to do the actions performed.</para>
    </listitem>
  </itemizedlist>

  <para>JAAS authentication is performed in a pluggable fashion. This permits
  applications to remain independent from underlying authentication
  technologies. New or updated authentication technologies can be plugged
  under an application without requiring modifications to the application
  itself. Applications enable the authentication process by instantiating a
  LoginContext object, which in turn references a Configuration to determine
  the authentication technology(ies), or LoginModule(s), to be used in
  performing the authentication. Typical LoginModules may prompt for and
  verify a username and password. Others may read and verify a voice or
  fingerprint sample.</para>

  <para>See Java Authentication and Authorization Service (JAAS) <link
  xl:href="http://java.sun.com/javase/6/docs/technotes/guides/security/jaas/JAASRefGuide.html">Reference
  Guide</link> for more information about JAAS.</para>

  <section xml:id="jetty-jaas">
    <title>Jetty and JAAS</title>

    <para>Many application servers support JAAS as a means of bringing greater
    flexibility to the declarative security models of the J2EE (now known as
    the JavaEE) <link
    xl:href="http://java.sun.com/javaee/index.jsp">specification</link>. Jetty
    support for JAAS provides greater alternatives for servlet security, and
    increases the portability of web applications.</para>

    <para>The JAAS support aims to dictate as little as possible whilst
    providing a sufficiently flexible infrastructure to allow users to drop in
    their own custom <link
    xl:href="http://java.sun.com/j2se/1.4.2/docs/guide/security/jaas/JAASLMDevGuide.html">LoginModules</link>.</para>
  </section>

  <section xml:id="jaas-configuration">
    <title>Configuration</title>

    <para>Using JAAS with jetty is very simply a matter of declaring a
    <code>org.eclipse.jetty.jaas.JAASLoginService</code>, creating a jaas
    login module configuration file and specifying it on the jetty run line.
    Let's look at an example.</para>

    <section>
      <title>Step 1</title>

      <para>Configure a jetty <code><link
      xl:href="@JDURL@/org/eclipse/jetty/jaas/JAASLoginService.html">org.eclipse.jetty.jaas.JAASLoginService</link></code>
      to match the &lt;realm-name&gt; in your web.xml file. For example, if
      the <filename>web.xml</filename> contains a realm called "xyz" like
      so:</para>

      <informalexample xl:title="">
        <programlisting language="xml">&lt;login-config&gt;
  &lt;auth-method&gt;FORM&lt;/auth-method&gt;
  &lt;realm-name&gt;xyz&lt;/realm-name&gt;
  &lt;form-login-config&gt;
    &lt;form-login-page&gt;/login/login&lt;/form-login-page&gt;
    &lt;form-error-page&gt;/login/error&lt;/form-error-page&gt;
  &lt;/form-login-config&gt;
&lt;/login-config&gt;</programlisting>
      </informalexample>

      <para>Then you need to create a JAASLoginService with the matching name
      of "xyz":</para>

      <informalexample>
        <programlisting language="xml">&lt;New class="org.eclipse.jetty.jaas.JAASLoginService"&gt;
  &lt;Set name="Name"&gt;Test JAAS Realm&lt;/Set&gt;
  &lt;Set name="LoginModuleName"&gt;xyz&lt;/Set&gt;
&lt;/New&gt;</programlisting>
      </informalexample>

      <caution>
        <para>The name of the realm-name that you declare in
        <filename>web.xml</filename> must match exactly the name of your
        JAASLoginService.</para>
      </caution>

      <para>You can declare your JAASLoginService in a couple of different
      ways:</para>

      <orderedlist>
        <listitem>
          <para>If you have more than one webapp that you would like to use
          the same security infrastructure, then you can declare your
          JAASLoginService in a top-level jetty xml file as a bean that is
          added to the org.eclipse.jetty.server.Server. Here's an
          example:</para>

          <informalexample>
            <programlisting language="xml">&lt;Configure id="Server" class="org.eclipse.jetty.server.Server"&gt;

  &lt;Call name="addBean"&gt;
    &lt;Arg&gt;
      &lt;New class="org.eclipse.jetty.jaas.JAASLoginService"&gt;
        &lt;Set name="name"&gt;Test JAAS Realm&lt;/Set&gt;
        &lt;Set name="LoginModuleName"&gt;xyz&lt;/Set&gt;
      &lt;/New&gt;
    &lt;/Arg&gt;
  &lt;/Call&gt;

&lt;/Configure&gt;</programlisting>
          </informalexample>
        </listitem>

        <listitem>
          <para>Alternatively, you can use a JAASLoginService with just a
          specific webapp by creating a <link
          linkend="deployable-descriptor-file">context xml</link> file for the
          webapp, and specifying the JAASLoginService in it:</para>

          <informalexample>
            <programlisting language="xml">&lt;Configure class="org.eclipse.jetty.webapp.WebAppContext"&gt;

  &lt;Set name="securityHandler"&gt;
    &lt;New class="org.eclipse.jetty.security.ConstraintSecurityHandler"&gt;
     &lt;Set name="loginService"&gt;
       &lt;New class="org.eclipse.jetty.jaas.JAASLoginService"&gt;
         &lt;Set name="name"&gt;Test JAAS Realm&lt;/Set&gt;
         &lt;Set name="loginModuleName"&gt;xyz&lt;/Set&gt;
       &lt;/New&gt;
     &lt;/Set&gt;
    &lt;/New&gt;
  &lt;/Set&gt;

&lt;/Configure&gt;</programlisting>
          </informalexample>
        </listitem>
      </orderedlist>
    </section>

    <section xml:id="jaas-step-2">
      <title>Step 2</title>

      <para>Set up your <code>LoginModule</code> in a configuration file,
      following the <link
      xl:href="http://java.sun.com/j2se/1.4.2/docs/api/javax/security/auth/login/Configuration.html">syntax
      rules</link> :</para>

      <informalexample>
        <programlisting language="ini">xyz {
       com.acme.SomeLoginModule required debug=true;
    };</programlisting>
      </informalexample>

      <caution>
        <para>It is imperative that the application name on the first line is
        exactly the same as the <code>LoginModuleName</code> of your
        JAASLoginService.</para>
      </caution>

      <para>You may find it convenient to name this configuration file as
      <filename>etc/login.conf</filename> because, as we will see below, some
      of the wiring up for jaas has been done for you.</para>
    </section>

    <section>
      <title>Step 3</title>

      <para>You now need to invoke jetty with support for jaas. There are 2
      aspects to this:</para>

      <itemizedlist>
        <listitem>
          <para>adding jaas-related jars to the jetty container
          classpath</para>
        </listitem>

        <listitem>
          <para>setting the System property
          <code>java.security.auth.login.config</code></para>
        </listitem>
      </itemizedlist>

      <para>To accomplish the above, use the jetty <link
      linkend="startup-overview">startup</link> <link
      linkend="startup-modules">modules mechanism</link> to add the jaas <link
      linkend="startup-modules">module</link>:</para>

      <informalexample>
        <programlisting language="bash">java -jar start.jar --add-to-startd=jaas</programlisting>
      </informalexample>

      <note>
        <para>The top level of the distribution does not have the jaas module
        enabled by default. However, there are several <link
        linkend="demo-webapps-base">demo webapps</link> - including a jaas
        webapp - available in the <filename><link
        linkend="startup-base-and-home">demo-base</link></filename> directory
        of the distribution which has pre-enabled the jaas module.</para>
      </note>

      <para>Now you will have a file named
      <filename>start.d/jaas.ini</filename>, which contains:</para>

      <informalexample>
        <programlisting language="ini">--module=jaas
jaas.login.conf=etc/login.conf</programlisting>
      </informalexample>

      <para>The <code>jaas.login.conf</code> property refers to the location
      of your LoginModule configuration file that you established in <link
      linkend="jaas-step-2">Step 2</link>. If you called it
      <filename>etc/login.conf</filename>, then your work is done. Otherwise,
      change the value of the<code> jaas.login.conf</code> property to be the
      location of your LoginModule configuration file. Jetty will
      automatically use this property to set the value of the System property
      <code>java.security.auth.login.config.</code></para>
    </section>
  </section>

  <section>
    <title>A Closer Look at JAASLoginService</title>

    <para>To allow the greatest degree of flexibility in using JAAS with web
    applications, the <classname>JAASLoginService</classname> supports a
    couple of configuration options. Note that you don't ordinarily need to
    set these explicitly, as jetty has defaults which will work in 99% of
    cases. However, should you need to, you can configure:</para>

    <itemizedlist>
      <listitem>
        <para>a policy for role-based authorization (Default:
        <classname>o<link
        xl:href="@JDURL@/org/eclipse/jetty/jaas/StrictRoleCheckPolicy.html">rg.eclipse.jetty.jaas.StrictRoleCheckPolicy</link></classname>)</para>
      </listitem>

      <listitem>
        <para>a CallbackHandler (Default: <classname><link
        xl:href="@JDURL@/org/eclipse/jetty/jaas/callback/DefaultCallbackHandler.html">org.eclipse.jetty.jaas.callback.DefaultCallbackHandler</link></classname>)</para>
      </listitem>

      <listitem>
        <para>a list of classnames for the Principal implementation that
        equate to a user role (Default: <classname><link
        xl:href="@JDURL@/org/eclipse/jetty/jaas/JAASRole.html">org.eclipse.jetty.jaas.JAASRole</link></classname>)</para>
      </listitem>
    </itemizedlist>

    <para>Here's an example of setting each of these (to their default
    values):</para>

    <informalexample>
      <programlisting language="xml">&lt;New class="org.eclipse.jetty.jaas.JAASLoginService"&gt;
  &lt;Set name="Name"&gt;Test JAAS Realm&lt;/Set&gt;
  &lt;Set name="LoginModuleName"&gt;xyz&lt;/Set&gt;
  &lt;Set name="RoleCheckPolicy"&gt;
    &lt;New class="org.eclipse.jetty.jaas.StrictRoleCheckPolicy"/&gt;
  &lt;/Set&gt;
  &lt;Set name="CallbackHandlerClass"&gt;
       org.eclipse.jetty.jaas.callback.DefaultCallbackHandler
  &lt;/Set&gt;
  &lt;Set name="roleClassNames"&gt;
    &lt;Array type="java.lang.String"&gt;
      &lt;Item&gt;org.eclipse.jetty.jaas.JAASRole&lt;/Item&gt;
    &lt;/Array&gt;
  &lt;/Set&gt;
&lt;/New&gt;
</programlisting>
    </informalexample>

    <section>
      <title>RoleCheckPolicy</title>

      <para>The RoleCheckPolicy must be an implementation of the
      <classname><link
      xl:href="@JDURL@/org/eclipse/jetty/jaas/RoleCheckPolicy.html">org.eclipse.jetty.jaas.RoleCheckPolicy</link></classname>
      interface and its purpose is to help answer the question "is User X in
      Role Y" for role-based authorization requests. The default
      implementation distributed with jetty is the <classname><link
      xl:href="@JDURL@/org/eclipse/jetty/jaas/StrictRoleCheckPolicy.html">org.eclipse.jetty.jaas.StrictRoleCheckPolicy</link></classname>,
      which will assess a user as having a particular role iff that role is at
      the top of the stack of roles that have been temporarily pushed onto the
      user or if the user has no temporarily assigned roles, the role is
      amongst those configured for the user.</para>

      <para>Roles can be temporarily assigned to a user programmatically by
      using the pushRole(String rolename) method of the <classname><link
      xl:href="@JDURL@/org/eclipse/jetty/jaas/JAASUserPrincipal.html">org.eclipse.jetty.jaas.JAASUserPrincipal</link></classname>
      class.</para>

      <para>For the majority of webapps, the default StrictRoleCheckPolicy
      will be quite adequate, however you may provide your own implementation
      and set it on your JAASLoginService instance.</para>
    </section>

    <section>
      <title>CallbackHandler</title>

      <para>A CallbackHandler is responsible for interfacing with the user to
      obtain usernames and credentials to be authenticated.</para>

      <para>Jetty ships with the <classname><link
      xl:href="@JDURL@/org/eclipse/jetty/jaas/callback/DefaultCallbackHandler.html">org.eclipse.jetty.jaas.DefaultCallbackHandler</link></classname>
      which interfaces the information contained in the request to the
      Callbacks that are requested by LoginModules. You can replace this
      default with your own implementation if you have specific requirements
      not covered by the default.</para>
    </section>

    <section>
      <title>Role Principal Implementation Class</title>

      <para>When LoginModules authenticate a user, they usually also gather
      all of the roles that a user has and place them inside the JAAS Subject.
      As LoginModules are free to use their own implementation of the JAAS
      Principal to put into the Subject, jetty needs to know which Principals
      represent the user and which represent his/her roles when performing
      authorization checks on &lt;security-constraint&gt;s. The example
      LoginModules that ship with jetty all use the
      <classname>org.eclipse.jetty.jaas.JAASRole</classname> class. However,
      if you have plugged in some other LoginModules, you must configure the
      classnames of their role Principal implementations.</para>
    </section>

    <section>
      <title>Sample LoginModules</title>

      <itemizedlist>
        <listitem>
          <para><link
          xl:href="@JXURL@/org/eclipse/jetty/jaas/spi/JDBCLoginModule.html"><code>org.eclipse.jetty.jaas.spi.JDBCLoginModule</code></link></para>
        </listitem>

        <listitem>
          <para><link
          xl:href="@JXURL@/org/eclipse/jetty/jaas/spi/PropertyFileLoginModule.html"><code>org.eclipse.jetty.jaas.spi.PropertyFileLoginModule</code></link></para>
        </listitem>

        <listitem>
          <para><link
          xl:href="@JXURL@/org/eclipse/jetty/jaas/spi/DataSourceLoginModule.html"><code>org.eclipse.jetty.jaas.spi.DataSourceLoginModule</code></link></para>
        </listitem>

        <listitem>
          <para><link
          xl:href="@JXURL@/org/eclipse/jetty/jaas/spi/LdapLoginModule.html"><code>org.eclipse.jetty.jaas.ldap.LdapLoginModule</code></link></para>
        </listitem>
      </itemizedlist>

      <note>
        <title>Passwords/Credentials</title>

        <para>Passwords can be stored in clear text, obfuscated or
        checksummed. The class <link
        xl:href="@JDURL@/org/eclipse/jetty/util/security/Password.html"><classname>org.eclipse.jetty.util.security.Password</classname></link>
        should be used to generate all varieties of passwords,the output from
        which can be cut and pasted into property files or entered into
        database tables.</para>

        <para linkend="configuring-security-secure-passwords">See more on this
        under the Configuration section on <link
        linkend="configuring-security-secure-passwords">securing
        passwords</link>.</para>
      </note>
    </section>

    <section>
      <title>JDBCLoginModule</title>

      <para>The JDBCLoginModule stores user passwords and roles in a database
      that are accessed via JDBC calls. You can configure the JDBC connection
      information, as well as the names of the table and columns storing the
      username and credential, and the name of the table and columns storing
      the roles.</para>

      <para>Here is an example login module configuration file entry for it
      using an HSQLDB driver:</para>

      <informalexample>
        <programlisting language="ini">

jdbc {
      org.eclipse.jetty.jaas.spi.JDBCLoginModule required
      debug="true"
      dbUrl="jdbc:hsqldb:."
      dbUserName="sa"
      dbDriver="org.hsqldb.jdbcDriver"
      userTable="myusers"
      userField="myuser"
      credentialField="mypassword"
      userRoleTable="myuserroles"
      userRoleUserField="myuser"
      userRoleRoleField="myrole";
      };</programlisting>
      </informalexample>

      <para>There is no particular schema required for the database tables
      storing the authentication and role information. The properties
      userTable, userField, credentialField, userRoleTable, userRoleUserField,
      userRoleRoleField configure the names of the tables and the columns
      within them that are used to format the following queries:</para>

      <itemizedlist>
        <listitem>
          <para><code>select &lt;credentialField&gt; from &lt;userTable&gt;
          where &lt;userField&gt; =?</code></para>
        </listitem>

        <listitem>
          <para><code>select &lt;userRoleRoleField&gt; from
          &lt;userRoleTable&gt; where &lt;userRoleUserField&gt;
          =?</code></para>
        </listitem>
      </itemizedlist>

      <para>Credential and role information is lazily read from the database
      when a previously unauthenticated user requests authentication. Note
      that this information is only cached for the length of the authenticated
      session. When the user logs out or the session expires, the information
      is flushed from memory.</para>

      <para>Note that passwords can be stored in the database in plain text or
      encoded formats - see "Passwords/Credentials" note above.</para>
    </section>

    <section>
      <title>DataSourceLoginModule</title>

      <para>Similar to the JDBCLoginModule, but this LoginModule uses a
      DataSource to connect to the database instead of a jdbc driver. The
      DataSource is obtained by doing a jndi lookup on
      <code>java:comp/env/${dnJNDIName}</code></para>

      <para>Here is a sample login module configuration for it:</para>

      <informalexample>
        <programlisting language="ini">

ds {
     org.eclipse.jetty.jaas.spi.DataSourceLoginModule required
     debug="true"
     dbJNDIName="ds"
     userTable="myusers"
     userField="myuser"
     credentialField="mypassword"
     userRoleTable="myuserroles"
     userRoleUserField="myuser"
     userRoleRoleField="myrole";
    };
</programlisting>
      </informalexample>
    </section>

    <section>
      <title>PropertyFileLoginModule</title>

      <para>With this login module implementation, the authentication and role
      information is read from a property file.</para>

      <informalexample>
        <programlisting language="ini">

props {
        org.eclipse.jetty.jaas.spi.PropertyFileLoginModule required
        debug="true"
        file="/somewhere/somefile.props";
      };
</programlisting>
      </informalexample>

      <para>The file parameter is the location of a properties file of the
      same format as the etc/realm.properties example file. The format
      is:</para>

      <informalexample>
        <programlisting language="text">

&lt;username&gt;: &lt;password&gt;[,&lt;rolename&gt; ...]
</programlisting>
      </informalexample>

      <para>Here's an example:</para>

      <informalexample>
        <programlisting language="ini">

fred: OBF:1xmk1w261u9r1w1c1xmq,user,admin
harry: changeme,user,developer
tom: MD5:164c88b302622e17050af52c89945d44,user
dick: CRYPT:adpexzg3FUZAk,admin

</programlisting>
      </informalexample>

      <para>The contents of the file are fully read in and cached in memory
      the first time a user requests authentication.</para>
    </section>

    <section>
      <title>LdapLoginModule</title>

      <para>Here's an example:</para>

      <informalexample>
        <programlisting language="ini">

ldaploginmodule {
   org.eclipse.jetty.jaas.spi.LdapLoginModule required
   debug="true"
   contextFactory="com.sun.jndi.ldap.LdapCtxFactory"
   hostname="ldap.example.com"
   port="389"
   bindDn="cn=Directory Manager"
   bindPassword="directory"
   authenticationMethod="simple"
   forceBindingLogin="false"
   userBaseDn="ou=people,dc=alcatel"
   userRdnAttribute="uid"
   userIdAttribute="uid"
   userPasswordAttribute="userPassword"
   userObjectClass="inetOrgPerson"
   roleBaseDn="ou=groups,dc=example,dc=com"
   roleNameAttribute="cn"
   roleMemberAttribute="uniqueMember"
   roleObjectClass="groupOfUniqueNames";
   };

</programlisting>
      </informalexample>
    </section>
  </section>

  <section>
    <title>Writing your Own LoginModule</title>

    <para>If you want to implement your own custom LoginModule, there are two
    classes to be familiar with <classname><link
    xl:href="@JXURL@/org/eclipse/jetty/jaas/spi/AbstractLoginModule.html">org.eclipse.jetty.jaas.spi.AbstractLoginModule</link></classname>
    and <classname><link
    xl:href="@JXURL@/org/eclipse/jetty/jaas/spi/UserInfo.html">org.eclipse.jetty.jaas.spi.UserInfo</link></classname>.</para>

    <para>The
    <classname>org.eclipse.jetty.jaas.spi.AbstractLoginModule</classname>
    implements all of the
    <classname>javax.security.auth.spi.LoginModule</classname> methods. All
    you need to do is to implement the getUserInfo method to return a
    <classname>org.eclipse.jetty.jaas.UserInfo</classname> instance which
    encapsulates the username, password and role names (note: as
    java.lang.Strings) for a user.</para>

    <para>The AbstractLoginModule does not support any caching, so if you want
    to cache UserInfo (eg as does the
    <classname>org.eclipse.jetty.jaas.spi.PropertyFileLoginModule</classname>)
    then you must provide this yourself.</para>
  </section>

  <section>
    <title>Other Goodies</title>

    <section>
      <title>RequestParameterCallback</title>

      <para>As all servlet containers intercept and process a form submission
      with action j_security_check, it is usually not possible to insert any
      extra input fields onto a login form with which to perform
      authentication: you may only pass <code>j_username</code> and
      <code>j_password</code>. For those rare occasions when this is not good
      enough, and you require more information from the user in order to
      authenticate them, you can use the JAAS callback handler
      <classname><link
      xl:href="@JDURL@/org/eclipse/jetty/jaas/callback/RequestParameterCallback.html">org.eclipse.jetty.jaas.callback.RequestParameterCallback</link></classname>.
      This callback handler gives you access to all parameters that were
      passed in the form submission. To use it, in the login() method of your
      custom login module, add the RequestParameterCallback to the list of
      callback handlers the login module uses, tell it which params you are
      interested in, and then get the value of the parameter back. Here's an
      example:</para>

      <informalexample>
        <programlisting language="java">

public class FooLoginModule extends AbstractLoginModule
{


     public boolean login()
        throws LoginException
     {

        Callback[] callbacks = new Callback[3];
        callbacks[0] = new NameCallback();
        callbacks[1] = new ObjectCallback();

        //as an example, look for a param named "extrainfo" in the request
        //use one RequestParameterCallback() instance for each param you want to access
        callbacks[2] = new RequestParameterCallback ();
        ((RequestParameterCallback)callbacks[2]).setParameterName ("extrainfo");
        

        callbackHandler.handle(callbacks);
        String userName = ((NameCallback)callbacks[0]).getName();
        Object pwd = ((ObjectCallback)callbacks[1]).getObject();
        List paramValues = ((RequestParameterCallback)callbacks[2]).getParameterValues();

        //use the userName, pwd and the value(s) of the parameter named "extrainfo" to
        //authenticate the user

     }

</programlisting>
      </informalexample>
    </section>

    <section>
      <title>Example JAAS WebApp</title>

      <para>An example webapp using jaas can be found in our git repo:</para>

      <itemizedlist>
        <listitem>
          <para><link
          xl:href="http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/tree/tests/test-webapps/test-jaas-webapp">http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/tree/tests/test-webapps/test-jaas-webapp</link></para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
</section>
