<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="jetty-maven-plugin" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Configuring the Jetty Maven Plugin</title>

  <para>The Jetty Maven plugin is useful for rapid development and testing.
  You can add it to any webapp project that is structured according to the
  usual Maven defaults. The plugin can then periodically scan your project for
  changes and automatically redeploy the webapp if any are found. This makes
  the development cycle more productive by eliminating the build and deploy
  steps: you use your IDE to make changes to the project, and the running web
  container automatically picks them up, allowing you to test them straight
  away.</para>

  <important>
    <para>You need to use Maven 3 and Java 1.7 for this plugin.</para>
  </important>

  <section xml:id="get-up-and-running">
    <title>Quick Start: Get Up and Running</title>

    <para>First, add <code>jetty-maven-plugin</code> to your
    <filename>pom.xml</filename> definition:</para>

    <informalexample>
      <programlisting language="xml">

&lt;plugin&gt;
  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
  &lt;version&gt;&amp;#36;{project.version}&lt;/version&gt;
&lt;/plugin&gt;

      </programlisting>
    </informalexample>

    <para>Then, from the same directory as your root
    <filename>pom.xml</filename>, type:</para>

    <screen>mvn jetty:run</screen>

    <para>This starts Jetty and serves up your project on
    http://localhost:8080/.</para>

    <para>Jetty continues to run until you stop it. While it runs, it
    periodically scans for changes to your project files, so if you save
    changes and recompile your class files, Jetty redeploys your webapp, and
    you can instantly test the changes you just made.</para>

    <para>You can terminate the plugin with a <code>ctrl-c</code> in the
    terminal window where it is running.</para>
  </section>

  <section xml:id="running-and-deploying">
    <title>Supported Goals</title>

    <para>The Jetty Maven plugin has a number of distinct Maven goals.
    Arguably the most useful is the <code> run</code> goal that we saw in the
    Quick Start section which runs Jetty on your unassembled webapp. There are
    other goals which help you accomplish different tasks. For example, you
    might need to run your webapp in a forked instance of Jetty, rather than
    within the process running Maven; or you may need finer grained control
    over the maven lifecycle stage in which you wish to deploy your webapp.
    There are different goals to accomplish these tasks, as well as several
    others.</para>

    <para>To see a list of all goals supported by the Jetty Maven plugin,
    do:</para>

    <screen>mvn jetty:help</screen>

    <para>To see the detailed list of parameters that can be configured for a
    particular goal, in addition to its description, do:</para>

    <screen>mvn jetty:help -Ddetail=true -Dgoal= goal-name</screen>
  </section>

  <section xml:id="configuring-jetty-container">
    <title>Configuring the Jetty Container</title>

    <para>These configuration elements set up the Jetty environment in which
    your webapp executes. They are common to most goals:</para>

    <variablelist>
      <varlistentry>
        <term xml:id="maven-http-connector">httpConnector</term>

        <listitem>
          <para>Optional. If not specified, Jetty will create a <link
          xl:href="@JDURL@/org/eclipse/jetty/server/ServerConnector.html">ServerConnector</link>
          instance listening on port 8080. You can change this default port
          number by using the system property <code>jetty.port</code> on the
          command line, for example, <code>mvn -Djetty.port=9999
          jetty:run</code>. Alternatively, you can use this configuration
          element to set up the information for the ServerConnector. The
          following are the valid configuration sub-elements:</para>

          <variablelist>
            <varlistentry>
              <term>port</term>

              <listitem>
                <para>The port number for the connector to listen on. By
                default it is 8080.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>host</term>

              <listitem>
                <para>The particular interface for the connector to listen on.
                By default, all interfaces.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>name</term>

              <listitem>
                <para>The name of the connector, which is useful for <link
                linkend="serving-webapp-from-particular-port">configuring
                contexts to respond only on particular
                connectors</link>.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>idleTimeout</term>

              <listitem>
                <para>Maximum idle time for a connection.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>soLinger</term>

              <listitem>
                <para>The socket linger time.</para>
              </listitem>
            </varlistentry>
          </variablelist>

          <para>You could instead configure the connectors in a standard <link
          linkend="jetty-xml-config">jetty xml config file</link> and put its
          location into the <code> <link
          linkend="jettyXml">jettyXml</link></code> parameter. Note that since
          jetty-9.0 it is no longer possible to configure a <link
          linkend="maven-config-https">https connector</link> directly in the
          pom.xml: you need to <link linkend="maven-config-https">use jetty
          xml config files to do it</link>.</para>
        </listitem>
      </varlistentry>

      <varlistentry xml:id="jettyXml">
        <term>jettyXml</term>

        <listitem>
          <para>Optional. A comma separated list of locations of <filename>
          <link linkend="jetty-xml-config">jetty xml</link> </filename> files
          to apply in addition to any plugin configuration parameters. You
          might use it if you have other webapps, handlers, specific types of
          connectors etc., to deploy, or if you have other Jetty objects that
          you cannot configure from the plugin.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>scanIntervalSeconds</term>

        <listitem>
          <para>The pause in seconds between sweeps of the webapp to check for
          changes and automatically hot redeploy if any are detected.
          <emphasis role="bold">By default this is 0, which disables hot
          deployment scanning.</emphasis> A number greater than 0 enables
          it.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>reload</term>

        <listitem>
          <para>Default value is "automatic", used in conjunction with a
          non-zero <emphasis role="bold"> <emphasis>
          <code>scanIntervalSeconds</code> </emphasis> </emphasis> causes
          automatic hot redeploy when changes are detected. Set to "manual"
          instead to trigger scanning by typing a linefeed in the console
          running the plugin. This might be useful when you are doing a series
          of changes that you want to ignore until you're done. In that use,
          use the <code> reload</code> parameter.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>loginServices</term>

        <listitem>
          <para>Optional. A list of <code><link
          xl:href="@JDURL@/org/eclipse/jetty/security/LoginService.html">org.eclipse.jetty.security.LoginService</link></code>
          implementations. Note that there is no default realm. If you use a
          realm in your <filename>web.xml</filename> you can specify a
          corresponding realm here. You could instead configure the login
          services in a jetty xml file and add its location to the
          <code>jettyXml</code> parameter.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>requestLog</term>

        <listitem>
          <para>Optional. An implementation of the <code><link
          xl:href="@JDURL@/org/eclipse/jetty/server/RequestLog.html">org.eclipse.jetty.server.RequestLog</link></code>
          request log interface. An implementation that respects the NCSA
          format is available as <code>
          org.eclipse.jetty.server.NCSARequestLog</code>. There are three
          other ways to configure the RequestLog: <itemizedlist>
              <listitem>
                <para>In a jetty xml config file, as specified in the
                <code>jettyXml</code> parameter.</para>
              </listitem>

              <listitem>
                <para>In a context xml config file, as specified in the
                <code>contextXml</code> parameter.</para>
              </listitem>

              <listitem>
                <para>In the <code>webApp</code> element.</para>
              </listitem>
            </itemizedlist><parameter>See <link
          linkend="configuring-jetty-request-logs">Configuring Request
          Logs</link> for more information.</parameter></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>stopPort</term>

        <listitem>
          <para>Optional. Port to listen on for stop commands. Useful to use
          in conjunction with the <link linkend="jetty-stop-goal">stop</link>
          or <link linkend="jetty-run-forked-goal">run-forked</link>
          goals.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>stopKey</term>

        <listitem>
          <para>Optional. Used in conjunction with stopPort for stopping
          jetty. Useful when used in conjunction with the stop or run-forked
          goals.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>systemProperties</term>

        <listitem>
          <para>Optional.Allows you to configure System properties for the
          execution of the plugin. For more information, see <link
          linkend="sys_props">Setting System Properties</link>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>systemPropertiesFile</term>

        <listitem>
          <para>Optional. A file containing System properties to set for the
          execution of the plugin. By default, settings that you make here
          <emphasis role="bold">do not</emphasis> override any system
          properties already set on the command line, by the JVM, or in the
          POM via <code>systemProperties</code>. Read <link
          linkend="sys_props">Setting System Properties</link> for how to
          force overrides.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>skip</term>

        <listitem>
          <para>Default is false. If true, the execution of the plugin exits.
          Same as setting the SystemProperty <code> -Djetty.skip</code> on the
          command line. This is most useful when configuring Jetty for
          execution during integration testing and you want to skip the
          tests</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>useProvidedScope</term>

        <listitem>
          <para>Default value is <code>false</code>. If true, the dependencies
          with <code> &lt;scope&gt;provided&lt;/scope&gt;</code> are placed
          onto the <emphasis>container classpath</emphasis>. Be aware that
          this is NOT the webapp classpath, as "provided" indicates that these
          dependencies would normally be expected to be provided by the
          container. You should very rarely ever need to use this. Instead,
          you should copy the provided dependencies as explicit dependencies
          of the <code>plugin</code> instead.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>excludedGoals</term>

        <listitem>
          <para>Optional. A list of jetty plugin goal names that will cause
          the plugin to print an informative message and exit. Useful if you
          want to prevent users from executing goals that you know cannot work
          with your project.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <section xml:id="maven-config-https">
      <title>Configuring a Https Connector</title>

      <para>In order to configure a https connector, you need to use jetty xml
      configuration files. This example uses files copied directly from the
      jetty distribution etc/ directory, although you can of course make up
      your own xml file or files. We will use the following files:</para>

      <variablelist>
        <varlistentry>
          <term>jetty.xml</term>

          <listitem>
            <para>Sets up various characteristics of the <link
            xl:href="@GITURL@/jetty-server/src/main/java/org/eclipse/jetty/server/Server.java"><classname>org.eclipse.jetty.server.Server</classname></link>
            instance for the plugin to use. Importantly, it sets up the <link
            xl:href="@GITURL@/jetty-server/src/main/java/org/eclipse/jetty/server/HttpConfiguration.java"><classname>org.eclipse.jetty.server.HttpConfiguration</classname></link>
            element that we can refer to in subsequent xml files that
            configure the connectors. Here's the relevant section:</para>

            <informalexample>
              <programlisting language="xml">    &lt;New id="httpConfig" class="org.eclipse.jetty.server.HttpConfiguration"&gt;
      &lt;Set name="secureScheme"&gt;https&lt;/Set&gt;
      &lt;Set name="securePort"&gt;&lt;Property name="jetty.secure.port" default="8443" /&gt;&lt;/Set&gt;
      &lt;Set name="outputBufferSize"&gt;32768&lt;/Set&gt;
      &lt;Set name="requestHeaderSize"&gt;8192&lt;/Set&gt;
      &lt;Set name="responseHeaderSize"&gt;8192&lt;/Set&gt;
      &lt;Set name="sendServerVersion"&gt;true&lt;/Set&gt;
      &lt;Set name="sendDateHeader"&gt;false&lt;/Set&gt;
      &lt;Set name="headerCacheSize"&gt;512&lt;/Set&gt;

      &lt;!-- Uncomment to enable handling of X-Forwarded- style headers
      &lt;Call name="addCustomizer"&gt;
        &lt;Arg&gt;&lt;New class="org.eclipse.jetty.server.ForwardedRequestCustomizer"/&gt;&lt;/Arg&gt;
      &lt;/Call&gt;
      --&gt;
    &lt;/New&gt;
</programlisting>
            </informalexample>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>jetty-ssl.xml</term>

          <listitem>
            <para>Set up ssl which will be used by the https connector. Here's
            the <filename>jetty-ssl.xml</filename> file from the
            jetty-distribution:</para>

            <programlisting language="rxml"><filename>@GITURL@/jetty-server/src/main/config/etc/jetty-ssl.xml</filename></programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>jetty-https.xml</term>

          <listitem>
            <para>Set up the https connector using the HttpConfiguration from
            <filename>jetty.xml</filename> and the ssl configuration
            from<filename> jetty-ssl.xml</filename>:</para>

            <programlisting language="rxml"><filename>@GITURL@/jetty-server/src/main/config/etc/jetty-https.xml</filename></programlisting>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Now you need to let the plugin know to apply the files
      above:</para>

      <informalexample>
        <programlisting language="xml">&lt;plugin&gt;
  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
  &lt;configuration&gt;
    &lt;jettyXml&gt;jetty.xml,jetty-ssl.xml,jetty-https.xml&lt;/jettyXml&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;</programlisting>
      </informalexample>

      <caution>
        <para>Just like with an installed distribution of Jetty, the ordering
        of the xml files is significant.</para>
      </caution>

      <para>You can also use jetty xml files to configure a http connector for
      the plugin to use. Here we use the same
      <filename>jetty-http.xml</filename> file from the Jetty
      distribution:</para>

      <programlisting language="rxml"><filename>@GITURL@/jetty-server/src/main/config/etc/jetty-http.xml</filename></programlisting>

      <para>Now we add it to the list of configs for the plugin to
      apply:</para>

      <informalexample>
        <programlisting language="xml">&lt;plugin&gt;
  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
  &lt;configuration&gt;
    &lt;jettyXml&gt;jetty.xml,jetty-http.xml,jetty-ssl.xml,jetty-https.xml&lt;/jettyXml&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;</programlisting>
      </informalexample>

      <para>Alternatively, you can use the <link
      linkend="maven-http-connector"><emphasis
      role="bold">httpConnector</emphasis></link> configuration element inside
      the pom instead as described above.</para>
    </section>
  </section>

  <section xml:id="configuring-your-webapp">
    <title>Configuring Your WebApp</title>

    <para>These configuration parameters apply to your webapp. They are common
    to almost all goals.</para>

    <variablelist>
      <varlistentry>
        <term>webApp</term>

        <listitem>
          <para>Represents an extension to the class <link
          xl:href="@JDURL@/org/eclipse/jetty/webapp/WebAppContext.hml"><classname>org.eclipse.jetty.webapp.WebAppContext</classname></link>.
          You can use any of the setter methods on this object to configure
          your webapp. Here are a few of the most useful ones:</para>

          <variablelist>
            <varlistentry>
              <term>contextPath</term>

              <listitem>
                <para>The context path for your webapp. By default, this is
                set to <code>/</code>.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>descriptor</term>

              <listitem>
                <para>The path to the <filename>web.xml</filename> file for
                your webapp.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>defaultsDescriptor</term>

              <listitem>
                <para>The path to a <filename>webdefault.xml</filename> file
                that will be applied to your webapp before the
                <filename>web.xml</filename>. If you don't supply one, Jetty
                uses a default file baked into the
                <code>jetty-webapp.jar</code>.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>overrideDescriptor</term>

              <listitem>
                <para>The path to a <filename>web.xml</filename> file that
                Jetty applies after reading your <filename>
                web.xml</filename>. You can use this to replace or add
                configuration.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>tempDirectory</term>

              <listitem>
                <para>The path to a dir that Jetty can use to expand or copy
                jars and jsp compiles when your webapp is running. The default
                is
                <filename>${project.build.outputDirectory}/tmp</filename>.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>baseResource</term>

              <listitem>
                <para>The path from which Jetty serves static resources.
                Defaults to <filename> src/main/webapp</filename>.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>resourceBases</term>

              <listitem>
                <para>Use instead of <filename>baseResource</filename> if you
                have multiple dirs from which you want to serve static
                content. This is an array of dir names.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>baseAppFirst</term>

              <listitem>
                <para>Defaults to "true". Controls whether any overlaid wars
                are added before or after the original base resource(s) of the
                webapp. See the section on <link
                linkend="using-overlaid-wars">overlaid wars</link> for more
                information.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>contextXml</term>

        <listitem>
          <para>The path to a context xml file that is applied to your webapp
          AFTER the <code> webApp</code> element.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section xml:id="jetty-run-goal">
    <title>jetty:run</title>

    <para>The <code>run</code> goal runs on a webapp that does not have to be
    built into a WAR. Instead, Jetty deploys the webapp from its sources. It
    looks for the constituent parts of a webapp in the Maven default project
    locations, although you can override these in the plugin configuration.
    For example, by default it looks for:</para>

    <itemizedlist>
      <listitem>
        <para>resources in
        <filename>${basedir}/src/main/webapp</filename></para>
      </listitem>

      <listitem>
        <para>classes in
        <filename>${project.build.outputDirectory}</filename></para>
      </listitem>

      <listitem>
        <para><filename>web.xml</filename> in
        <filename>${basedir}/src/main/webapp/WEB-INF/</filename></para>
      </listitem>
    </itemizedlist>

    <para>The plugin automatically ensures the classes are rebuilt and
    up-to-date before deployment. If you change the source of a class and your
    IDE automatically compiles it in the background, the plugin picks up the
    changed class.</para>

    <para>You do not need to assemble the webapp into a WAR, saving time
    during the development cycle. Once invoked, you can configure the plugin
    to run continuously, scanning for changes in the project and automatically
    performing a hot redeploy when necessary. Any changes you make are
    immediately reflected in the running instance of Jetty, letting you
    quickly jump from coding to testing, rather than going through the cycle
    of: code, compile, reassemble, redeploy, test.</para>

    <para>Here is a small example, which turns on scanning for changes every
    ten seconds, and sets the webapp context path to "/test":</para>

    <informalexample>
      <programlisting language="xml">

&lt;plugin&gt;
  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
  &lt;configuration&gt;
    &lt;scanIntervalSeconds&gt;10&lt;/scanIntervalSeconds&gt;
    &lt;webApp&gt;
      &lt;contextPath&gt;/test&lt;/contextPath&gt;
    &lt;/webApp&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;
      
      </programlisting>
    </informalexample>

    <section xml:id="configuring-additional-parameters">
      <title>Configuration</title>

      <para>In addition to the <emphasis role="bold"> <code>webApp</code>
      </emphasis> element that is common to most goals, the
      <code>jetty:run</code> goal supports:</para>

      <variablelist>
        <varlistentry>
          <term>classesDirectory</term>

          <listitem>
            <para>Location of your compiled classes for the webapp. You should
            rarely need to set this parameter. Instead, you should set
            <code>build outputDirectory</code> in your
            <filename>pom.xml</filename>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>testClassesDirectory</term>

          <listitem>
            <para>Location of the compiled test classes for your webapp. By
            default this is <filename>
            ${project.build.testOutputDirectory}</filename>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>useTestScope</term>

          <listitem>
            <para>If true, the classes from <code>testClassesDirectory</code>
            and dependencies of scope "test" are placed first on the
            classpath. By default this is false.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>webAppSourceDirectory</term>

          <listitem>
            <para>By default, this is set to
            <filename>${basedir}/src/main/webapp</filename>. If your static
            sources are in a different location, set this parameter
            accordingly.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>jettyEnvXml</term>

          <listitem>
            <para>Optional. Location of a <filename>jetty-env.xml</filename>
            file, which allows you to make JNDI bindings that satisfy
            <code>env-entry</code>, <code>resource-env-ref</code>, and <code>
            resource-ref</code> linkages in the <filename>web.xml</filename>
            that are scoped only to the webapp and not shared with other
            webapps that you might be deploying at the same time (for example,
            by using a <code> jettyConfig</code> file).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>scanTargets</term>

          <listitem>
            <para>Optional. A list of files and directories to periodically
            scan in addition to those the plugin automatically scans.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>scanTargetPatterns</term>

          <listitem>
            <para>Optional. If you have a long list of extra files you want
            scanned, it is more convenient to use pattern matching expressions
            to specify them instead of enumerating them with the <code>
            scanTargetsList</code> of <code>scanTargetPatterns</code>, each
            consisting of a directory, and including and/or excluding
            parameters to specify the file matching patterns.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Here's an example:</para>

      <informalexample>
        <programlisting language="xml">

&lt;project&gt;
... 
  &lt;plugins&gt;
... 
    &lt;plugin&gt;
      &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
      &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;webAppSourceDirectory&gt;&amp;#36;{basedir}/src/staticfiles&lt;/webAppSourceDirectory&gt;
        &lt;webApp&gt;
          &lt;contextPath&gt;/&lt;/contextPath&gt;
          &lt;descriptor&gt;&amp;#36;{basedir}/src/over/here/web.xml&lt;/descriptor&gt;
          &lt;jettyEnvXml&gt;&amp;#36;{basedir}/src/over/here/jetty-env.xml&lt;/jettyEnvXml&gt;
        &lt;/webApp&gt;
        &lt;classesDirectory&gt;&amp;#36;{basedir}/somewhere/else&lt;/classesDirectory&gt;
        &lt;scanTargets&gt;
          &lt;scanTarget&gt;src/mydir&lt;/scanTarget&gt;
          &lt;scanTarget&gt;src/myfile.txt&lt;/scanTarget&gt;
        &lt;/scanTargets&gt;
        &lt;scanTargetPatterns&gt;
          &lt;scanTargetPattern&gt;
            &lt;directory&gt;src/other-resources&lt;/directory&gt;
            &lt;includes&gt;
              &lt;include&gt;**/*.xml&lt;/include&gt;
              &lt;include&gt;**/*.properties&lt;/include&gt;
            &lt;/includes&gt;
            &lt;excludes&gt;
              &lt;exclude&gt;**/myspecial.xml&lt;/exclude&gt;
              &lt;exclude&gt;**/myspecial.properties&lt;/exclude&gt;
            &lt;/excludes&gt;
          &lt;/scanTargetPattern&gt;
        &lt;/scanTargetPatterns&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/project&gt;
        
        </programlisting>
      </informalexample>

      <para>If, for whatever reason, you cannot run on an unassembled webapp,
      the goals <code>run-war</code> and <code> run-exploded</code> work on
      unassembled webapps.</para>
    </section>
  </section>

  <section xml:id="running-assembled-webapp-as-war">
    <title>jetty:run-war</title>

    <para>This goal first packages your webapp as a WAR file and then deploys
    it to Jetty. If you set a non-zero <code> scanInterval</code>, Jetty
    watches your <filename>pom.xml</filename> and the WAR file; if either
    changes, it redeploys the war.</para>

    <section xml:id="configuring-war">
      <title>Configuration</title>

      <variablelist>
        <varlistentry>
          <term>war</term>

          <listitem>
            <para>The location of the built WAR file. This defaults to <code>
            ${project.build.directory}/${project.build.finalName}.war</code>.
            If this is not sufficient, set it to your custom location.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Here's how to set it:</para>

      <informalexample>
        <programlisting language="xml">

&lt;project&gt;
... 
  &lt;plugins&gt;
...
    &lt;plugin&gt;
      &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
      &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;war&gt;&amp;#36;{basedir}/target/mycustom.war&lt;/war&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/project&gt;
        
        </programlisting>
      </informalexample>
    </section>
  </section>

  <section xml:id="running-assembled-webapp-as-expanded-war">
    <title>jetty:run-exploded</title>

    <para>The run-exploded goal first assembles your webapp into an exploded
    WAR file and then deploys it to Jetty. If you set a non-zero
    <code>scanInterval</code>, Jetty watches your <filename>pom.xml,
    WEB-INF/lib, WEB-INF/</filename> classes and
    <filename>WEB-INF/web.xml</filename> for changes and redeploys when
    necessary.</para>

    <section xml:id="configuring-exploded-war">
      <title>Configuration</title>

      <variablelist>
        <varlistentry>
          <term>war</term>

          <listitem>
            <para>The location of the exploded WAR. This defaults to <code>
            ${project.build.directory}/${project.build.finalName}</code>, but
            you can override the default by setting this parameter.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Here's how to set it:</para>

      <informalexample>
        <programlisting language="xml">

&lt;project&gt; 
... 
  &lt;plugins&gt;
... 
    &lt;plugin&gt;
      &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
      &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;war&gt;&amp;#36;{basedir}/target/myfunkywebapp&lt;/war&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/project&gt;
        
        </programlisting>
      </informalexample>
    </section>
  </section>

  <section xml:id="deploy-war-running-pre-assembled-war">
    <title>jetty:deploy-war</title>

    <para>This is basically the same as <code>jetty:run-war</code>, but
    without assembling the WAR of the current module. Unlike
    <code>run-war</code>, the phase in which this plugin executes is not bound
    to the "package" phase. For example, you might want to start Jetty on the
    "test-compile" phase and stop Jetty on the "test-phase".</para>

    <section>
      <title>Configuration</title>

      <variablelist>
        <varlistentry>
          <term>war</term>

          <listitem>
            <para>The location of the WAR file. This defaults to <code>
            ${project.build.directory}/${project.build.finalName}</code>, but
            you can override the default by setting this parameter.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Here's the configuration:</para>

      <informalexample>
        <programlisting language="xml">

&lt;project&gt;
... 
  &lt;plugins&gt;
... 
  &lt;plugin&gt;
    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
    &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
    &lt;configuration&gt;
      &lt;war&gt;&amp;#36;{basedir}/target/mycustom.war&lt;/war&gt;
    &lt;/configuration&gt;
    &lt;executions&gt;
      &lt;execution&gt;
        &lt;id&gt;start-jetty&lt;/id&gt;
        &lt;phase&gt;test-compile&lt;/phase&gt;
        &lt;goals&gt;
          &lt;goal&gt;deploy-war&lt;/goal&gt;
        &lt;/goals&gt;
        &lt;configuration&gt;
          &lt;daemon&gt;true&lt;/daemon&gt;
          &lt;reload&gt;manual&lt;/reload&gt;
        &lt;/configuration&gt;
      &lt;/execution&gt;
      &lt;execution&gt;
        &lt;id&gt;stop-jetty&lt;/id&gt;
        &lt;phase&gt;test&lt;/phase&gt;
        &lt;goals&gt;
          &lt;goal&gt;stop&lt;/goal&gt;
        &lt;/goals&gt;
      &lt;/execution&gt;
     &lt;/executions&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/project&gt;
        
        </programlisting>
      </informalexample>
    </section>
  </section>

  <section xml:id="jetty-run-forked-goal">
    <title>jetty:run-forked</title>

    <para>This goal allows you to start the webapp in a new JVM, optionally
    passing arguments to that new JVM.</para>

    <section>
      <title>Configuration</title>

      <para>NOTE: unfortunately, unlike most of the other goals, this one does
      NOT support a <emphasis role="bold"> webApp</emphasis> parameter to
      configure the webapp. Therefore, if your webapp requires a lot of
      configuration, it will be difficult to switch between eg
      <code>jetty:run</code> and <code> jetty:run-forked</code>
      executions.</para>

      <para>The available configuration parameters are:</para>

      <variablelist>
        <varlistentry>
          <term>jettyXml</term>

          <listitem>
            <para>The locations of jetty xml configuration files used to
            configure the container in the new JVM.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>contextXml</term>

          <listitem>
            <para>Optional. The location of a context xml file to configure
            the webapp in the new JVM.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>contextPath</term>

          <listitem>
            <para>Optional. The context path for the webapp in the new JVM.
            Defaults to <filename> /${project.artifactId}</filename>.
            Overrides a setting inside a <code>contextXml</code> file.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>webAppSourceDirectory</term>

          <listitem>
            <para>Optional. The location of the static resources for your
            webapp. Defaults to <filename> src/main/webapp</filename>.
            Overrides a <code>Set name="baseResource"</code> setting inside a
            <code> contextXml</code> file.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>resourceBases</term>

          <listitem>
            <para>Optional. An array of directories containing static content
            that form the resource base for your webapp, in conjunction with
            the <filename>webAppSourceDirectory</filename>. See also <code>
            baseAppFirst</code>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>baseAppFirst</term>

          <listitem>
            <para>Defaults to "true". Controls whether the
            <filename>webAppSourceDirectory</filename> or <filename>
            resourceBases</filename> are first on the list of resources that
            form the base resource for the webapp.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>webXml</term>

          <listitem>
            <para>The location of the <filename>web.xml</filename> file.
            Defaults to <filename> src/main/webapp/WEB-INF/web.xml</filename>.
            Overrides a <code>Set name="descriptor"</code> inside a
            <filename>contextXml</filename> file.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>tmpDirectory</term>

          <listitem>
            <para>Temporary directory to use for the webapp. Defaults to
            <code> ${project.build.directory}/tmp</code>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>classesDirectory</term>

          <listitem>
            <para>The location of the compiled classes for the webapp.
            Defaults to <filename>
            ${project.build.outputDirectory}</filename>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>testClassesDirectory</term>

          <listitem>
            <para>The location of the compiled test classes for the webapp.
            Defaults to <filename>
            ${project.build.testOutputDirectory}</filename>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>useTestScope</term>

          <listitem>
            <para>–Defaults to "false". If true, the test classes and
            dependencies of <code> &lt;scope&gt;test&gt;/scope&gt;</code> are
            placed on the webapp's classpath.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>useProvidedScope</term>

          <listitem>
            <para>Defaults to "false". If true, the dependencies of scope
            "provided" are placed on the jetty container's classpath.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>stopPort</term>

          <listitem>
            <para>Mandatory. A port number for jetty to listen on to receive a
            stop command to cause it to shutdown. If configured, the stopKey
            is used to authenticate an incoming stop command.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>stopKey</term>

          <listitem>
            <para>Mandatory. A string value that has to be sent to the
            <code>stopPort</code> to authenticate the stop command.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>skip</term>

          <listitem>
            <para>Optional. Defaults to false. If true, the execution of this
            plugin is skipped.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>jvmArgs</term>

          <listitem>
            <para>Optional. A string representing arbitrary arguments to pass
            to the forked JVM.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>To deploy your unassembled web app to Jetty running in a new
      JVM:</para>

      <screen>mvn jetty:run-forked</screen>

      <para>Jetty continues to execute until you either:</para>

      <itemizedlist>
        <listitem>
          <para>Press <code>cntrl-c</code> in the terminal window to stop the
          plugin, which also stops the forked JVM.</para>
        </listitem>

        <listitem>
          <para>Use jetty:stop to stop the forked JVM, which also stops the
          plugin.</para>
        </listitem>
      </itemizedlist>

      <note>
        <para>If you want to set a custom port, you need to specify it in a
        <filename>jetty.xml</filename> file rather than setting the connector
        and port tags. You can specify the location of the
        <filename>jetty.xml</filename> using the <code>jettyXml</code>
        parameter.</para>
      </note>
    </section>
  </section>

  <section xml:id="jetty-start-goal">
    <title>jetty:start</title>

    <para>This goal is for use with an execution binding in your
    <filename>pom.xml</filename>. It is similar to the <code>jetty:run</code>
    goal, however it does NOT first execute the build up until the
    "test-compile" phase to ensure that all necessary classes and files of the
    webapp have been generated. This is most useful when you want to control
    the start and stop of Jetty via execution bindings in your
    <filename>pom.xml</filename>.</para>

    <para>For example, you can configure the plugin to start your webapp at
    the beginning of your unit tests and stop at the end. To do this, you need
    to set up a couple of <code>execution</code> scenarios for the Jetty
    plugin and use the <code>&lt;daemon&gt;true&lt;/daemon&gt; </code>
    configuration option to force Jetty to execute only while Maven is
    running, instead of running indefinitely. You use the
    <code>pre-integration-test</code> and <code>post-integration-test</code>
    Maven build phases to trigger the execution and termination of
    Jetty:</para>

    <informalexample>
      <programlisting language="xml">

&lt;plugin&gt;
  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
  &lt;configuration&gt;
    &lt;scanIntervalSeconds&gt;10&lt;/scanIntervalSeconds&gt;
    &lt;stopKey&gt;foo&lt;/stopKey&gt;
    &lt;stopPort&gt;9999&lt;/stopPort&gt;
  &lt;/configuration&gt;
  &lt;executions&gt;
    &lt;execution&gt;
      &lt;id&gt;start-jetty&lt;/id&gt;
      &lt;phase&gt;pre-integration-test&lt;/phase&gt;
      &lt;goals&gt;
        &lt;goal&gt;start&lt;/goal&gt;
      &lt;/goals&gt;
      &lt;configuration&gt;
        &lt;scanIntervalSeconds&gt;0&lt;/scanIntervalSeconds&gt;
        &lt;daemon&gt;true&lt;/daemon&gt;
      &lt;/configuration&gt;
    &lt;/execution&gt;
    &lt;execution&gt;
      &lt;id&gt;stop-jetty&lt;/id&gt;
      &lt;phase&gt;post-integration-test&lt;/phase&gt;
       &lt;goals&gt;
         &lt;goal&gt;stop&lt;/goal&gt;
       &lt;/goals&gt;
     &lt;/execution&gt;
  &lt;/executions&gt;
&lt;/plugin&gt;
      
      </programlisting>
    </informalexample>

    <para>Of course, you can use this goal from the command line ( <code>mvn
    jetty:start</code>), however you need to be sure that all generated
    classes and files for your webapp are already present first.</para>
  </section>

  <section xml:id="jetty-stop-goal">
    <title>jetty:stop</title>

    <para>The stop goal stops a running instance of jetty. To use it, you need
    to configure the plugin with a special port number and key. That same port
    number and key will also be used by the <code> <link
    linkend="jetty-start-goal">start</link> </code> goal.</para>

    <variablelist>
      <varlistentry>
        <term>stopPort</term>

        <listitem>
          <para>A port number for jetty to listen on to receive a stop command
          to cause it to shutdown.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>stopKey</term>

        <listitem>
          <para>A string value sent to the <code>stopPort</code> to validate
          the stop command.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>stopWait</term>

        <listitem>
          <para>The maximum time in seconds that the plugin will wait for
          confirmation that jetty has stopped. If false or not specified, the
          plugin does not wait for confirmation but exits after issuing the
          stop command. <emphasis role="bold">This parameter is available only
          since jetty-9.5.</emphasis></para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>Here's a configuration example:</para>

    <informalexample>
      <programlisting language="xml">

&lt;plugin&gt;
  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
  &lt;configuration&gt;
    &lt;stopPort&gt;9966&lt;/stopPort&gt;
    &lt;stopKey&gt;foo&lt;/stopKey&gt;
    &lt;stopWait&gt;10&lt;/stopWait&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;
      
      </programlisting>
    </informalexample>

    <para>Then, while Jetty is running (in another window), type:</para>

    <screen>mvn jetty:stop</screen>

    <para>The <code>stopPort</code> must be free on the machine you are
    running on. If this is not the case, you get an "Address already in use"
    error message after the "Started SelectedChannelConnector ..."
    message.</para>
  </section>

  <section xml:id="using-overlaid-wars">
    <title>Using Overlaid wars</title>

    <para>If your webapp depends on other war files, the<link
    linkend="jetty-run-goal">jetty:run</link> and <link
    linkend="jetty-run-forked-goal">jetty:run-forked</link> goals are able to
    merge resources from all of them. It can do so based on the settings of
    the <link xl:href="http://maven.apache.org/plugins/maven-war-plugin/">
    maven-war-plugin</link>, or if your project does not use the <link
    xl:href="http://maven.apache.org/plugins/maven-war-plugin/">maven-war-plugin</link>
    to handle the overlays, it can fall back to a simple algorithm to
    determine the ordering of resources.</para>

    <section>
      <title>With maven-war-plugin</title>

      <para>The maven-war-plugin has a rich set of capabilities for merging
      resources. The jetty:run and jetty:run-forked goals are able to
      interpret most of them and apply them during execution of your
      unassembled webapp. This is probably best seen by looking at a concrete
      example.</para>

      <para>Suppose your webapp depends on the following wars:</para>

      <para><informalexample>
          <programlisting language="xml">

&lt;dependency&gt;
  &lt;groupId&gt;com.acme&lt;/groupId&gt;
  &lt;artifactId&gt;X&lt;/artifactId&gt;
  &lt;type&gt;war&lt;/type&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;com.acme&lt;/groupId&gt;
  &lt;artifactId&gt;Y&lt;/artifactId&gt;
  &lt;type&gt;war&lt;/type&gt;
&lt;/dependency&gt;
          
          </programlisting>
        </informalexample></para>

      <para><parameter>Containing:</parameter> <informalexample>
          <programlisting language="text">

WebAppX: 

 /foo.jsp 
 /bar.jsp 
 /WEB-INF/web.xml 

WebAppY: 

 /bar.jsp
 /baz.jsp
 /WEB-INF/web.xml
 /WEB-INF/special.xml
        
        </programlisting>
        </informalexample>They are configured for the <link
      xl:href="http://maven.apache.org/plugins/maven-war-plugin/overlays.html">maven-war-plugin</link>:
      <informalexample>
          <para><programlisting language="xml">&lt;plugin&gt;
  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
  &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
  &lt;configuration&gt;
    &lt;overlays&gt;
      &lt;overlay&gt;
        &lt;groupId&gt;com.acme&lt;/groupId&gt;
        &lt;artifactId&gt;X&lt;/artifactId&gt;
        &lt;excludes&gt;
          &lt;exclude&gt;bar.jsp&lt;/exclude&gt;
        &lt;/excludes&gt;
      &lt;/overlay&gt;
      &lt;overlay&gt;
        &lt;groupId&gt;com.acme&lt;/groupId&gt;
        &lt;artifactId&gt;Y&lt;/artifactId&gt;
        &lt;excludes&gt;
          &lt;exclude&gt;baz.jsp&lt;/exclude&gt;
        &lt;/excludes&gt;
      &lt;/overlay&gt;
      &lt;overlay&gt;
      &lt;/overlay&gt;
    &lt;/overlays&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;</programlisting></para>
        </informalexample>Then executing jetty:run would yield the following
      ordering of resources: <code>com.acme.X.war : com.acme.Y.war:
      ${project.basedir}/src/main/webapp</code>. Note that the current
      project's resources are placed last in the ordering due to the empty
      &lt;overlay/&gt; element in the maven-war-plugin. You can either use
      that, or specify the
      <code>&lt;baseAppFirst&gt;false&lt;/baseAppFirst&gt;</code> parameter to
      the jetty-maven-plugin.</para>

      <para>Moreover, due to the <code>exclusions</code> specified above, a
      request for the resource <code> bar.jsp</code> would only be satisfied
      from <code>com.acme.Y.war.</code> Similarly as <code>baz.jsp</code> is
      excluded, a request for it would result in a 404 error.</para>
    </section>

    <section>
      <title>Without maven-war-plugin</title>

      <para>The algorithm is fairly simple, is based on the ordering of
      declaration of the dependent wars, and does not support exclusions. The
      configuration parameter <code>&lt;baseAppFirst&gt;</code> (see the
      section on <link linkend="configuring-your-webapp">Configuring Your
      Webapp</link> for more information) can be used to control whether your
      webapp's resources are placed first or last on the resource path at
      runtime.</para>

      <para>For example, suppose our webapp depends on these two wars:</para>

      <informalexample>
        <programlisting language="xml">&lt;dependency&gt;
  &lt;groupId&gt;com.acme&lt;/groupId&gt;
  &lt;artifactId&gt;X&lt;/artifactId&gt;
  &lt;type&gt;war&lt;/type&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;com.acme&lt;/groupId&gt;
  &lt;artifactId&gt;Y&lt;/artifactId&gt;
  &lt;type&gt;war&lt;/type&gt;
&lt;/dependency&gt;</programlisting>
      </informalexample>

      <para>Suppose the webapps contain:</para>

      <informalexample>
        <programlisting language="text">WebAppX: 

 /foo.jsp 
 /bar.jsp 
 /WEB-INF/web.xml 

WebAppY: 

 /bar.jsp 
 /baz.jsp
 /WEB-INF/web.xml 
 /WEB-INF/special.xml
        </programlisting>
      </informalexample>

      <para>Then our webapp has available these additional resources:</para>

      <informalexample>
        <programlisting language="text">
/foo.jsp (X) 
/bar.jsp (X) 
/baz.jsp (Y) 
/WEB-INF/web.xml (X)
/WEB-INF/special.xml (Y)
                </programlisting>
      </informalexample>
    </section>
  </section>

  <section xml:id="configuring-security-settings">
    <title>Configuring Security Settings</title>

    <para>You can configure LoginServices in the plugin. Here's an example of
    setting up the HashLoginService for a webapp:</para>

    <informalexample>
      <programlisting language="xml">
&lt;plugin&gt;
  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
  &lt;configuration&gt;
    &lt;scanIntervalSeconds&gt;10&lt;/scanIntervalSeconds&gt;
    &lt;webApp&gt;
      &lt;contextPath&gt;/test&lt;/contextPath&gt;
    &lt;/webApp&gt;
    &lt;loginServices&gt;
      &lt;loginService implementation="org.eclipse.jetty.security.HashLoginService"&gt;
        &lt;name&gt;Test Realm&lt;/name&gt;
        &lt;config&gt;&amp;#36;{basedir}/src/etc/realm.properties&lt;/config&gt;
      &lt;/loginService&gt;
    &lt;/loginServices&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;
           </programlisting>
    </informalexample>
  </section>

  <section xml:id="using-multiple-webapp-root-directories">
    <title>Using Multiple Webapp Root Directories</title>

    <para>If you have external resources that you want to incorporate in the
    execution of a webapp, but which are not assembled into WARs, you can't
    use the overlaid wars method described above, but you can tell Jetty the
    directories in which these external resources are located. At runtime,
    when Jetty receives a request for a resource, it searches all the
    locations to retrieve the resource. It's a lot like the overlaid war
    situation, but without the war. Here's a configuration example:</para>

    <informalexample>
      <programlisting language="xml">
&lt;configuration&gt;
  &lt;webApp&gt;
    &lt;contextPath&gt;/&amp;#36;{build.finalName}&lt;/contextPath&gt;
    &lt;baseResource implementation="org.eclipse.jetty.util.resource.ResourceCollection"&gt;
      &lt;resourcesAsCSV&gt;src/main/webapp,/home/johndoe/path/to/my/other/source,/yet/another/folder&lt;/resourcesAsCSV&gt;
    &lt;/baseResource&gt;
  &lt;/webApp&gt;
&lt;/configuration&gt;      
      </programlisting>
    </informalexample>
  </section>

  <section xml:id="running-more-than-one-webapp">
    <title>Running More than One Webapp</title>

    <para>You can use either a <filename>jetty.xml</filename> file to
    configure extra (pre-compiled) webapps that you want to deploy, or you can
    use the <code>&lt;contextHandlers&gt;</code> configuration element to do
    so. If you want to deploy webapp A, and webapps B and C in the same Jetty
    instance:</para>

    <para>Putting the configuration in webapp A's <code>pom.xml</code>:</para>

    <informalexample>
      <programlisting language="xml">
&lt;plugin&gt;
  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
  &lt;configuration&gt;
    &lt;scanIntervalSeconds&gt;10&lt;/scanIntervalSeconds&gt;
    &lt;webApp&gt;
      &lt;contextPath&gt;/test&lt;/contextPath&gt;
    &lt;/webApp&gt;
    &lt;contextHandlers&gt;
      &lt;contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext"&gt;
        &lt;war&gt;&amp;#36;{basedir}../../B.war&lt;/war&gt;
        &lt;contextPath&gt;/B&lt;/contextPath&gt;
      &lt;/contextHandler&gt;
      &lt;contextHandler implementation="org.eclipse.jetty.webapp.WebAppContext"&gt;
        &lt;war&gt;&amp;#36;{basedir}../../C.war&lt;/war&gt;
        &lt;contextPath&gt;/B&lt;/contextPath&gt;
      &lt;/contextHandler&gt;
    &lt;/contextHandlers&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;
            </programlisting>
    </informalexample>

    <para>Alternatively, add a <filename>jetty.xml</filename> file to webapp
    A. Copy the <filename> jetty.xml</filename> file from the jetty
    distribution, and then add WebAppContexts for the other 2 webapps:</para>

    <informalexample>
      <programlisting language="xml">
&lt;Ref refid="Contexts"&gt;
  &lt;Call name="addHandler"&gt;
    &lt;Arg&gt;
      &lt;New class="org.eclipse.jetty.webapp.WebAppContext"&gt;
        &lt;Set name="contextPath"&gt;/B&lt;/Set&gt;
        &lt;Set name="war"&gt;../../B.war&lt;/Set&gt;
      &lt;/New&gt;
    &lt;/Arg&gt;
  &lt;/Call&gt;
  &lt;Call&gt; 
    &lt;Arg&gt;
      &lt;New class="org.eclipse.jetty.webapp.WebAppContext"&gt;
        &lt;Set name="contextPath"&gt;/C&lt;/Set&gt;
        &lt;Set name="war"&gt;../../C.war&lt;/Set&gt;
      &lt;/New&gt;
    &lt;/Arg&gt;
  &lt;/Call&gt;
&lt;/Ref&gt;      
      </programlisting>
    </informalexample>

    <para>Then configure the location of this <filename>jetty.xml</filename>
    file into webapp A's jetty plugin:</para>

    <informalexample>
      <programlisting language="xml">
&lt;plugin&gt;
  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
  &lt;configuration&gt;
    &lt;scanIntervalSeconds&gt;10&lt;/scanIntervalSeconds&gt;
    &lt;webApp&gt;
      &lt;contextPath&gt;/test&lt;/contextPath&gt;
    &lt;/webApp&gt;
    &lt;jettyXml&gt;src/main/etc/jetty.xml&lt;/jettyXml&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;      
      </programlisting>
    </informalexample>

    <para>For either of these solutions, the other webapps must already have
    been built, and they are not automatically monitored for changes. You can
    refer either to the packed WAR file of the pre-built webapps or to their
    expanded equivalents.</para>
  </section>

  <section xml:id="setting-system-properties">
    <title linkend="sys_props">Setting System Properties</title>

    <para>You can specify property name/value pairs that Jetty sets as System
    properties for the execution of the plugin. This feature is useful to tidy
    up the command line and save a lot of typing.</para>

    <para>However, sometimes it is not possible to use this feature to set
    System properties - sometimes the software component using the System
    property is already initialized by the time that maven runs (in which case
    you will need to provide the System property on the command line), or by
    the time that jetty runs. In the latter case, you can use the <link
    xl:href="http://mojo.codehaus.org/properties-maven-plugin/">maven
    properties plugin</link> to define the system properties instead. Here's
    an example that configures the logback logging system as the jetty
    logger:</para>

    <informalexample>
      <programlisting language="xml">

&lt;plugin&gt;
  &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
  &lt;artifactId&gt;properties-maven-plugin&lt;/artifactId&gt;
  &lt;version&gt;1.0-alpha-2&lt;/version&gt;
  &lt;executions&gt;
    &lt;execution&gt;
      &lt;goals&gt;
        &lt;goal&gt;set-system-properties&lt;/goal&gt;
      &lt;/goals&gt;
      &lt;configuration&gt;
        &lt;properties&gt;
          &lt;property&gt;
            &lt;name&gt;logback.configurationFile&lt;/name&gt;
            &lt;value&gt;&amp;#36;{project.baseUri}/resources/logback.xml&lt;/value&gt;
          &lt;/property&gt;
        &lt;/properties&gt;
      &lt;/configuration&gt;
    &lt;/execution&gt;
  &lt;/executions&gt;
&lt;/plugin&gt;

      </programlisting>
    </informalexample>

    <para>Note that if a System property is already set (for example, from the
    command line or by the JVM itself), then by default these configured
    properties DO NOT override them (see below for use of the &lt;force&gt;
    parameter).</para>

    <section xml:id="specifying-properties-in-pom">
      <title>Specifying System Properties in the POM</title>

      <para>Here's an example of how to specify System properties in the
      POM:</para>

      <informalexample>
        <programlisting language="xml">
&lt;plugin&gt; 
  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
  &lt;configuration&gt; 
    &lt;systemProperties&gt;
      &lt;systemProperty&gt;
        &lt;name&gt;fooprop&lt;/name&gt;
        &lt;value&gt;222&lt;/value&gt;
      &lt;/systemProperty&gt;
    &lt;/systemProperties&gt;
    &lt;webApp&gt;
      &lt;contextPath&gt;/test&lt;/contextPath&gt;
    &lt;/webApp&gt;
  &lt;/configuration&gt; 
&lt;/plugin&gt;
                </programlisting>
      </informalexample>

      <para>To change the default behaviour so that these system properties
      override those on the command line, use the &lt;<code>force&gt;</code>
      parameter:</para>

      <informalexample>
        <programlisting language="xml">
&lt;plugin&gt; 
  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
  &lt;configuration&gt;
    &lt;systemProperties&gt;
      &lt;force&gt;true&lt;/force&gt;
      &lt;systemProperty&gt;
       &lt;name&gt;fooprop&lt;/name&gt;
       &lt;value&gt;222&lt;/value&gt;
     &lt;/systemProperty&gt;
    &lt;/systemProperties&gt;
    &lt;webApp&gt;
      &lt;contextPath&gt;/test&lt;/contextPath&gt;
    &lt;/webApp&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;
                </programlisting>
      </informalexample>
    </section>

    <section xml:id="specifying-properties-in-file">
      <title>Specifying System Properties in a File</title>

      <para>You can also specify your System properties in a file. System
      properties you specify in this way DO NOT override System properties
      that set on the command line, by the JVM, or directly in the POM
      via<code> systemProperties</code>.</para>

      <para>Suppose we have a file called <code>mysys.props</code> which
      contains the following:</para>

      <informalexample>
        <programlisting language="text">
fooprop=222
                </programlisting>
      </informalexample>

      <para>This can be configured on the plugin like so:</para>

      <informalexample>
        <programlisting language="xml">
&lt;plugin&gt;
  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
  &lt;configuration&gt;
    &lt;systemPropertiesFile&gt;&amp;#36;{basedir}/mysys.props&lt;/systemPropertiesFile&gt;
    &lt;webApp&gt;
      &lt;contextPath&gt;/test&lt;/contextPath&gt;
    &lt;/webApp&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;
                </programlisting>
      </informalexample>

      <para>You can instead specify the file by setting the System property
      (!) <filename> jetty.systemPropertiesFile</filename> on the command
      line.</para>
    </section>
  </section>
</section>
