<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE section PUBLIC '-//OASIS//DTD DocBook XML V5.0//EN'
'http://www.oasis-open.org/docbook/xml/5.0b5/dtd/docbook.dtd'>
<section xml:id="using-deployment-manager" version="5.0"
xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink"
xmlns:xi="http://www.w3.org/2001/XInclude"
xmlns:ns5="http://www.w3.org/2000/svg"
xmlns:ns4="http://www.w3.org/1998/Math/MathML"
xmlns:ns3="http://www.w3.org/1999/xhtml"
xmlns:db="http://docbook.org/ns/docbook">
  <title>Using the DeploymentManager</title>
  <para>In order for Jetty to serve content (static or dynamic), you need to
  create a 
  <link xl:href="@JDURL@/org/eclipse/jetty/server/handler/ContextHandler.html">
  ContextHandler</link>and add it to Jetty in the appropriate place. A
  pluggable DeploymentManager exists in Jetty 7 and later to make this process
  easier. The Jetty distribution contains example DeploymentManager
  configurations to deploy WAR files found in a directory to Jetty, and to
  deploy Jetty 
  <filename>context.xml</filename>files into Jetty as well.</para>
  <para>The DeploymentManager is the heart of the typical webapp deployment
  mechanism; it operates as a combination of an Application LifeCycle Graph,
  Application Providers that find and provide Applications into the Application
  LifeCycle Graph, and a set of bindings in the graph that control the
  deployment process.</para>
  <mediaobject>
    <info>
      <othercredit>
        <orgname>jetty deployment manager roles</orgname>
      </othercredit>
    </info>
    <imageobject>
      <imagedata align="center" width="6in" format="PNG"
      fileref="images/Jetty_DeployManager_DeploymentManager_Roles.png" />
    </imageobject>
  </mediaobject>
  <section xml:id="udm-application-providers">
    <title>Application Providers</title>
    <para>Before Jetty deploys an application, an 
    <link xl:href="@JDURL@/org/eclipse/jetty/deploy/AppProvider.html">
    AppProvider</link>identifies the App and then provides it to the
    DeploymentManager. Two AppProviders come with the Jetty
    distribution:</para>
    <itemizedlist>
      <listitem>
      <link
      xl:href="@JDURL@/org/eclipse/jetty/deploy/providers/WebAppProvider.html">
      WebAppProvider</link>&#8211;monitors a directory for 
      <code>*.war</code>files and submits them to the Application LifeCycle
      Graph for deployment into a context with the same name as the 
      <code>*.war</code>file itself.</listitem>
      <listitem>
      <link
      xl:href="@JDURL@/org/eclipse/jetty/deploy/providers/ContextProvider.html">ContextProvider</link>&#8211;monitors
      a directory for 
      <filename>*.xml</filename>files, and using the Jetty XML configurator
      creates a ContextHandler (usually a 
      <code>WebAppContext</code>) for the Application LifeCycle
      Graph.</listitem>
    </itemizedlist>
    <para>Activating both at the same time is possible, but can be confusing
    because you must take care to either keep both systems deploying mutually
    exclusive webapps, or align naming conventions of 
    <filename>context.xml</filename>style files with WAR and webapp
    directories.</para>
  </section>
  <section xml:id="udm-application-lifecycle-graph">
    <title>Application LifeCycle Graph</title>
    <para>The core feature of the DeploymentManager is the 
    <link xl:href="@JDURL@/org/eclipse/jetty/deploy/AppLifeCycle.html">
    Application LifeCycle Graph</link>.</para>
    <mediaobject>
      <info>
        <othercredit>
          <orgname>jetty deployment manager life cycle</orgname>
        </othercredit>
      </info>
      <imageobject>
        <imagedata align="center" width="6in" format="PNG"
        fileref="images/Jetty_DeployManager_AppLifeCycle-1.png" />
      </imageobject>
    </mediaobject>
    <para>The nodes and edges of this graph are pre-defined in Jetty along the
    most common actions and states found. These nodes and edges are not
    hardcoded; you can adjust and add to them depending on your needs (for
    example, any complex requirements for added workflow, approvals, staging,
    distribution, coordinated deploys for a cluster or cloud, etc.).</para>
    <para>New applications enter this graph at the Undeployed node, and the 
    <link
    xl:href="@JDURL@/org/eclipse/jetty/deploy/DeploymentManager.html#requestAppGoal(org.eclipse.jetty.deploy.App,">
      <code>java.lang.String
      DeploymentManager.requestAppGoal(App,String)</code>
    </link>method pushes them through the graph.</para>
  </section>
  <section xml:id="udm-lifecycle-bindings">
    <title>LifeCycle Bindings</title>
    <para>A set of default 
    <link xl:href="@JDURL@/org/eclipse/jetty/deploy/AppLifeCycle.Binding.html">
      <code>AppLifeCycle.Bindings</code>
    </link>defines standard behavior, and handles deploying, starting,
    stopping, and undeploying applications. If you choose, you can write your
    own 
    <code>AppLifeCycle.Bindings</code>and assign them to anywhere on the
    Application LifeCycle graph. 
    <para>Examples of new 
    <code>AppLifeCycle.Binding</code>implementations that you can write
    include:</para>
    <itemizedlist>
      <listitem>Validating the incoming application.</listitem>
      <listitem>Preventing the deployment of known forbidden
      applications.</listitem>
      <listitem>Submitting the installation to an application auditing service
      in a corporate environment.</listitem>
      <listitem>Distributing the application to other nodes in the cluster or
      cloud.</listitem>
      <listitem>Emailing owner/admin of change of state of the
      application.</listitem>
    </itemizedlist>
    <para>There are four default bindings:</para>
    <itemizedlist>
      <listitem>
      <link
      xl:href="@JDURL@/org/eclipse/jetty/deploy/bindings/StandardDeployer.html">StandardDeployer</link>&#8211;Deploys
      the ContextHandler into Jetty in the appropriate place.</listitem>
      <listitem>
      <link
      xl:href="@JDURL@/org/eclipse/jetty/deploy/bindings/StandardStarter.html">
      StandardStarter</link>&#8211;Sets the ContextHandler to started and start
      accepting incoming requests.</listitem>
      <listitem>
      <link
      xl:href="@JDURL@/org/eclipse/jetty/deploy/bindings/StandardStopper.html">
      StandardStopper</link>&#8211;Stops the ContextHandler and stop accepting
      incoming requests.</listitem>
      <listitem>
      <link
      xl:href="@JDURL@/org/eclipse/jetty/deploy/bindings/StandardUndeployer.html">StandardUndeployer</link>&#8211;Removes
      the ContextHandler from Jetty.</listitem>
    </itemizedlist>
    <mediaobject>
      <info>
        <othercredit>
          <orgname>jetty deployment manager life cycle</orgname>
        </othercredit>
      </info>
      <imageobject>
        <imagedata align="center" width="6in" format="PNG"
        fileref="images/Jetty_DeployManager_DefaultAppLifeCycleBindings.png" />
      </imageobject>
    </mediaobject>
    <para>A fifth, non-standard binding, called 
    <emphasis>DebugBinding</emphasis>, is also available for debugging reasons;
    It logs the various transitions through the Application
    LifeCycle.</para></para>
  </section>
</section>
