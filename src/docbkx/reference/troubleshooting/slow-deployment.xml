<?xml version="1.0" encoding="utf-8"?>
<!--
//  ========================================================================
//  Copyright (c) 1995-2012 Mort Bay Consulting Pty. Ltd.
//  ========================================================================
//  All rights reserved. This program and the accompanying materials
//  are made available under the terms of the Eclipse Public License v1.0
//  and Apache License v2.0 which accompanies this distribution.
//
//      The Eclipse Public License is available at
//      http://www.eclipse.org/legal/epl-v10.html
//
//      The Apache License v2.0 is available at
//      http://www.opensource.org/licenses/apache2.0.php
//
//  You may elect to redistribute this code under either of these licenses.
//  ========================================================================
-->
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
         xml:id="troubleshooting-slow-deployment"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns2="http://www.w3.org/1998/Math/MathML"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Troubleshooting Slow Deployment</title>

  <para>After upgrading to a version of Jetty that supports Servlet Spec 3.0
  or above, enabling some new modules, or introducing some new jars to your
  webapp, you notice that your deployment time is increased. This could be due
  to scanning for classes caused by a ServletContainerInitializer.</para>

  <para>As documented in the section on <link
  linkend="using-annotations">Using Annotations</link>, even if your webapp
  has set <code>metadata-complete=true</code> in web.xml, all jars within your
  webapp may still be scanned due to one or more ServletContainerInitializers
  that have a <link
  xl:href="http://docs.oracle.com/javaee/6/api/javax/servlet/annotation/HandlesTypes.html">@HandlesTypes</link>
  annotation listing the names of classes in which it is interested.</para>

  <para>There are 3 ways to speed up deployment time:</para>

  <itemizedlist>
    <listitem>
      <para>limit which ServletContainerInitializers to include</para>
    </listitem>

    <listitem>
      <para>limit which jars to scan</para>
    </listitem>

    <listitem>
      <para>limit the scan to the first deployment only</para>
    </listitem>
  </itemizedlist>

  <section>
    <title>Remedies</title>

    <section>
      <title>Limit Which ServletContainerInitializers to Execute</title>

      <para>As documented in the section <link
      linkend="excluding-scis">Excluding ServletContainerInitializers</link>,
      you can provide a context attribute that defines a pattern of
      ServletContainerInitializer (SCI) class names to ignore. These SCIs will
      not be examined for <link
      xl:href="http://docs.oracle.com/javaee/6/api/javax/servlet/annotation/HandlesTypes.html">@HandlesTypes</link>
      and will not be executed. This is useful if you have included a 3rd
      party jar that has a SCI on which your code does not rely.</para>
    </section>

    <section>
      <title>Limit Which Jars to Scan</title>

      <para>As documented in the section <link
      linkend="jars-scanned-for-annotations">Jars Scanned for
      Annotations</link>, you can explicitly define which jars to include in
      the scanning process. This is helpful if you have a lot of jars in your
      webapp, and you know that they do not contain any classes referenced by
      an @HandlesTypes annotation on a ServletContainerInitializer that will
      be executed.</para>
    </section>

    <section>
      <title>Limit Scanning to First Deployment Only (Quickstart)</title>

      <para>The <link linkend="quickstart-webapp">quickstart mechanism</link>
      will do a normal deployment - obeying any limits on SCIs and jars to
      scan as documented here - the first time the webapp is deployed only.
      Subsequent deployments will re-use the information discovered during the
      first deployment. This is useful if you cannot limit the scan
      significantly by using any of the mechanisms described here, but you
      don't want to incur the cost of scanning on every redeployment. The
      <link linkend="quickstart-webapp">quickstart mechanism</link> and how to
      use it is described <link linkend="quickstart-webapp">here</link>.
      </para>
    </section>
  </section>
</section>
